<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>远程固件升级</title>
      <link href="/2024/06/19/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BF%9C%E7%A8%8B%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7/"/>
      <url>/2024/06/19/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BF%9C%E7%A8%8B%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="项目过程">项目过程</h2><p>项目分成客户端和服务端，服务端通过nginx搭建一个web服务器，客户端负责获取web服务器的升级代码和版本信息并检查是否需要升级固件。</p><p>要想实现客户端远程升级这个功能，首先要在FLASH中划分出两个区域:Bootloader区和App区。Bootloader在上电后就会运行，它负责通过HTTP协议获取服务器的升级代码并写入App区。</p><p>把升级代码写到FLASH后就可以跳转到FLASH中的APP区执行用户程序。之后每次上电复位都会检查是否需要升级固件。</p><h2 id="系统架构">系统架构</h2><ul><li><strong>硬件层</strong>:STM32F103C8T6，ESP-01S</li><li><strong>软件层</strong>:flash读写，WIFI通信，HTTP通信，搭建nginx服务器。</li></ul><p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/%E9%A1%B9%E7%9B%AE%E4%BA%8C.png" alt=""></p><h2 id="软件开发">软件开发</h2><h3 id="WIFI通信">WIFI通信</h3><ul><li>采用ESP-01S WiFi模块,通过AT指令实现WiFi连接和TCP连接。</li><li>使用串口接收中断和空闲中断相结合的方式,接收WiFi模块返回的数据。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">esp8266_connect_tcp</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ip_buf[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (esp8266d_init(<span class="number">115200</span>))</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 init success\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (esp8266d_set_mode(<span class="number">1</span>))</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 set station mode success\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (esp8266d_sw_reset())</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 soft reset success\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (esp8266d_join_ap(DEMO_WIFI_SSID, DEMO_WIFI_PWD))</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 connect WIFI success\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (esp8266d_get_ip(ip_buf))</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 GOT IP: %s\r\n&quot;</span>, ip_buf);</span><br><span class="line">    <span class="keyword">while</span> (esp8266d_connect_tcp_server(DEMO_TCP_SERVER_IP, DEMO_TCP_SERVER_PORT))</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 connet TCP server success\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    delay_ms(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">while</span> (esp8266d_enter_unvarnished())</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP8266 enter unvarnish mode success\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    atk_mw8266d_uart_rx_restart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP通信">HTTP通信</h3><p>搭建一个nginx web服务器</p><p>开启透传模式，发送组装好的HTTP请求报文，接收服务端的HTTP响应报文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTP报文 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_INFO <span class="string">&quot;GET http://192.xxx/iap/STM32F103/info.txt HTTP/1.1\r\nHost: 192.xxx\r\n\r\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_BIN  <span class="string">&quot;GET http://192.xxx/iap/STM32F103/APP_LED.bin HTTP/1.1\r\nHost: 192.1xxxr\n\r\n&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_get_version</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    atk_mw8266d_uart_rx_restart();</span><br><span class="line">    atk_mw8266d_uart_printf(GET_INFO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等服务器传数据过来 需要一点时间 */</span></span><br><span class="line">    delay_ms(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *http_buf = atk_mw8266d_uart_rx_get_frame();</span><br><span class="line">    parse_version((<span class="type">const</span> <span class="type">char</span> *)http_buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_get_bin</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    atk_mw8266d_uart_rx_restart();</span><br><span class="line">    atk_mw8266d_uart_printf(GET_BIN);</span><br><span class="line"></span><br><span class="line">    delay_ms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flash读写">flash读写</h3><p>0x0800F000以后的4KB用来存储更新信息，暂时只有版本信息</p><p>用STM32的内部flash存储这些版本信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* FLASH起始地址 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STM32_FLASH_SIZE        0x10000         <span class="comment">/* STM32 FLASH 总大小 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STM32_FLASH_BASE        0x08000000      <span class="comment">/* STM32 FLASH 起始地址 */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 版本号存储位置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_VERSION_ADDR 0X0800F000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stmflash_read</span><span class="params">(<span class="type">uint32_t</span> raddr, <span class="type">uint16_t</span> *pbuf, <span class="type">uint16_t</span> length)</span>;    <span class="comment">/* 从指定地址开始读出指定长度的数据 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stmflash_write</span><span class="params">(<span class="type">uint32_t</span> waddr, <span class="type">uint16_t</span> *pbuf, <span class="type">uint16_t</span> length)</span>;   <span class="comment">/* 在FLASH 指定位置, 写入指定长度的数据(自动擦除) */</span></span><br></pre></td></tr></table></figure><h3 id="主函数逻辑">主函数逻辑</h3><ol><li>读取Flash中存储的当前固件版本号</li><li>通过ESP8266连接到TCP服务器</li><li>获取服务器上的新版本信息</li><li>比较当前版本和新版本，判断是否需要升级</li><li>从服务器下载新的固件bin文件</li><li>将新固件更新到Flash中</li><li>更新Flash中存储的版本号</li><li>运行新的固件程序</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();                         <span class="comment">/* 初始化HAL库 */</span></span><br><span class="line">    sys_stm32_clock_init(RCC_PLL_MUL9); <span class="comment">/* 设置时钟, 72Mhz */</span></span><br><span class="line">    delay_init(<span class="number">72</span>);                     <span class="comment">/* 延时初始化 */</span></span><br><span class="line">    usart_init(<span class="number">115200</span>);                 <span class="comment">/* 串口初始化为115200 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取 flash中的版本号 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;read flash......\r\n&quot;</span>);</span><br><span class="line">    stmflash_read(FLASH_VERSION_ADDR, (<span class="type">uint16_t</span> *)cur_version, cur_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 flash中没有当前的版本号 那么就把默认版本号存进去 */</span></span><br><span class="line">    <span class="keyword">if</span> (is_empty((<span class="type">char</span> *)cur_version))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;current version is null!\r\n&quot;</span>);</span><br><span class="line">        stmflash_write(FLASH_VERSION_ADDR, (<span class="type">uint16_t</span> *)default_version, default_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    delay_ms(<span class="number">1000</span>);</span><br><span class="line">    stmflash_read(FLASH_VERSION_ADDR, (<span class="type">uint16_t</span> *)cur_version, cur_SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current version : %s\r\n&quot;</span>, (<span class="type">char</span> *)cur_version);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接到 虚拟机建立的TCP服务器 */</span></span><br><span class="line">    esp8266_connect_tcp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取版本信息 */</span></span><br><span class="line">    esp8266_get_version();</span><br><span class="line">    delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current version : %s\r\n&quot;</span>, cur_version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;update version : %s\r\n&quot;</span>, new_version);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 比较版本信息 检查是否需要更新版本 如果需要更新 设置更新标志位 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cur_version, new_version) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(cur_version, new_version);</span><br><span class="line">        update_flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 从服务器获取 bin文件信息 */</span></span><br><span class="line">    <span class="keyword">if</span> (update_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;get update code from server......\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">esp8266_get_bin();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (g_uart_rx_frame.sta.finsh != <span class="number">1</span>);</span><br><span class="line">        app_lenth = g_uart_rx_frame.sta.len;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;code size : %d bytes\r\n&quot;</span>, app_lenth);</span><br><span class="line">        update_start = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果成功获取到 bin文件 */</span></span><br><span class="line">    <span class="keyword">if</span> (update_start &amp;&amp; app_lenth)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> headerEndIndex = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">uint8_t</span> *buf = atk_mw8266d_uart_rx_get_frame();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 找状态体起始位置 标志位是两个\r\n */</span></span><br><span class="line"><span class="type">char</span> *endOfHeaders = <span class="built_in">strstr</span>((<span class="type">char</span> *)buf, <span class="string">&quot;\r\n\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (endOfHeaders != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">headerEndIndex = endOfHeaders - (<span class="type">char</span> *)buf + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Copying app code to FLASH...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (((*(<span class="keyword">volatile</span> <span class="type">uint32_t</span> *)(<span class="number">0X20001000</span> + headerEndIndex + <span class="number">4</span>)) &amp; <span class="number">0xFF000000</span>) == <span class="number">0x08000000</span>) <span class="comment">/* 判断是否为0X08XXXXXX */</span></span><br><span class="line">&#123;</span><br><span class="line">iap_write_appbin(FLASH_APP1_ADDR, buf + headerEndIndex, app_lenth); <span class="comment">/* 更新FLASH代码 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Copy app code Successed!!\r\n&quot;</span>);</span><br><span class="line">update_finish = <span class="number">1</span>;</span><br><span class="line">update_start = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Illegal FLASH APP!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 只有上面的APP代码校验成功后 才能更新flash中的版本号 */</span></span><br><span class="line">    <span class="keyword">if</span> (update_finish)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;copy new version info to flash....\r\n&quot;</span>);</span><br><span class="line">        stmflash_write(FLASH_VERSION_ADDR, (<span class="type">uint16_t</span> *)new_version, new_SIZE);</span><br><span class="line">        update_finish = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 运行APP程序的复位中断函数 */</span></span><br><span class="line">    <span class="keyword">if</span> (((*(<span class="keyword">volatile</span> <span class="type">uint32_t</span> *)(FLASH_APP1_ADDR + <span class="number">4</span>)) &amp; <span class="number">0xFF000000</span>) == <span class="number">0x08000000</span>) <span class="comment">/* 判断FLASH里面是否有APP,有的话执行 */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;start exec user code!!\r\n\r\n&quot;</span>);</span><br><span class="line">        delay_ms(<span class="number">10</span>);</span><br><span class="line">        iap_load_app(FLASH_APP1_ADDR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;nothing user code to exec!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="项目启动流程">项目启动流程</h2><p>嵌入式系统上电后会进行复位。</p><p>在系统复位后，有三种启动模式可以选择。</p><p>通过设置BOOT1和BOOT0引脚的状态，来选择在复位后的启动模式。</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240812114034439.png" alt="image-20240812114034439" style="zoom:80%;" /><p>该项目就是把flash作为启动区域</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240812114913731.png" alt="image-20240812114913731" style="zoom: 80%;" /><p>上电后就执行bootloader程序，如果有可以运行的APP固件，就跳转到APP中断向量表的起始地址，并执行复位中断处理函数。</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240819172257771.png" alt="image-20240819172257771" style="zoom: 80%;" /><h2 id="项目bug点">项目bug点</h2><h3 id="bin文件权限">bin文件权限</h3><p>客户端通过HTTP获取服务器中的版本信息和bin文件需要给外部组读的权限</p><p>否则客户端拿不到正确的资源文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 704 filename</span><br></pre></td></tr></table></figure><h3 id="数据接收延迟">数据接收延迟</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">esp8266_get_version</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    atk_mw8266d_uart_rx_restart();</span><br><span class="line">    atk_mw8266d_uart_printf(GET_INFO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等服务器传数据过来 需要一点时间 */</span></span><br><span class="line">    delay_ms(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *http_buf = atk_mw8266d_uart_rx_get_frame();</span><br><span class="line">    parse_version((<span class="type">const</span> <span class="type">char</span> *)http_buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向服务器发送HTTP请求报文后，需要一段时间才能收到HTTP响应报文，所以延时一段时间或者等待finish标志变为1。</p><h2 id="项目细节">项目细节</h2><h3 id="STM32烧录方式">STM32烧录方式</h3><ul><li><p>ISP</p><p>串口烧录利用<strong>内置的引导程序</strong>（Bootloader）通过串口接口进行编程。使用此方法时，BOOT0引脚应设置为高电平（1），BOOT1引脚为低电平（0），以便从系统存储器启动。</p></li><li><p>ICP</p><p>使用SWD（Serial Wire Debug）或JTAG接口进行烧录。</p></li><li><p>IAP</p><p>通过特定的编程接口（比如串口）获取升级代码，更新FLASH中的APP程序</p></li></ul><h3 id="STM32启动流程">STM32启动流程</h3><p>STM32启动模式有三种</p><ul><li>内置flash</li><li>系统存储器</li><li>SRAM</li></ul><table><thead><tr><th>BOOT[1:0]</th><th>启动模式</th></tr></thead><tbody><tr><td>BOOT1=<code>0</code> BOOT0=<code>1</code></td><td>从系统存储器启动，这种模式启动的程序功能由厂家设置。</td></tr><tr><td>BOOT1=<code>x</code> BOOT0=<code>0</code></td><td>从内置FLASH启动，这是正常的工作模式。(<code>x</code>代表任意)</td></tr><tr><td>BOOT1=<code>1</code> BOOT0=<code>1</code></td><td>从内置SRAM启动，这种模式可以用于调试。</td></tr></tbody></table><p>以从内置FLASH启动为例，STM32复位后会从flash取出两个值</p><ul><li>从<code>0x08000000</code>取出MSP堆栈指针</li><li>从<code>0x08000004</code>取出复位中断程序的地址赋给PC指针</li></ul><blockquote><p>总结下来就是上电后根据boot引脚来决定PC位置，比如boot设置为flash启动</p><p>启动后PC跳到0x08000000。此时CPU会先取2个地址，第一个是栈顶地址，第二个是复位中断函数地址。</p><p>此时PC寄存器的值就是Reset_Handler函数的入口地址值。也是系统上电后第一个执行的程序</p></blockquote><p>Reset_Handler</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Reset_Handler   PROC</span><br><span class="line">                EXPORT  Reset_Handler             [WEAK]</span><br><span class="line">                IMPORT  __main</span><br><span class="line">                IMPORT  SystemInit</span><br><span class="line">                LDR     R0, =SystemInit</span><br><span class="line">                BLX     R0               </span><br><span class="line">                LDR     R0, =__main </span><br><span class="line">                BX      R0</span><br><span class="line">                ENDP</span><br></pre></td></tr></table></figure><blockquote><p>SystemInit 是STM32函数库的函数，作用是初始化系统时钟</p><p>__main是C库的函数，主要是初始化堆栈和代码重定位，然后跳到main函数执行用户编写的代码</p></blockquote><h3 id="IAP实现原理">IAP实现原理</h3><ol><li>在Flash中划分出两个区:Bootloader区域和App区域。Bootloader负责接收升级数据并写入App区域。</li><li>Bootloader在上电时首先运行。它会检测是否有新的固件需要升级。如果有,通过串口等接收升级数据并写入App区域的Flash。</li><li>如果没有升级,Bootloader会跳转到App程序的入口地址执行。为了让App程序能正常使用中断向量表,需要在App程序的启动文件中设置中断向量表的偏移地址。</li></ol><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/b3f755a2ba13a2b532e25d1d7cfa1292.png" alt="在这里插入图片描述" style="zoom:80%;" /><h3 id="nginx">nginx</h3><p>Nginx是一个高性能的Web服务器，用于处理HTTP请求。</p><ol><li>Web服务器</li></ol><p>相比于其他服务器（如Apache），Nginx在资源占用和并发处理能力上表现更优，适合高并发场景。</p><ol start="2"><li>反向代理</li></ol><p>Nginx常用作反向代理服务器，接收客户端请求并将其转发到后端服务器。这种方式可以隐藏后端服务器的真实地址，提高安全性，同时可以实现负载均衡。</p><ol start="3"><li>负载均衡</li></ol><p>Nginx支持多种负载均衡策略，可以将用户请求分配到多台后端服务器上，从而提高系统的可用性和性能。它可以根据不同的算法（如轮询、最少连接、IP哈希等）来分配请求。</p><h3 id="HTTP">HTTP</h3><p>HTTP协议是基于TCP/IP协议的应用层协议，因此首先需要建立TCP连接。客户端（例如浏览器）通过TCP与Web服务器建立连接，通常使用端口80（HTTP）或443（HTTPS）进行通信。</p><p>建立连接后，客户端会向服务器发送HTTP请求。请求报文主要由以下部分组成：</p><ul><li><p><strong>请求行</strong>：包括请求方法（如GET、POST）、请求URI（路由地址）和HTTP版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br></pre></td></tr></table></figure></li><li><p><strong>请求头</strong>：包含一些额外的信息，如用户代理、接受的内容类型等，采用键值对的形式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Accept: text/html</span><br></pre></td></tr></table></figure></li><li><p><strong>空行</strong>：请求头结束后需要一个空行。</p></li><li><p><strong>消息主体</strong>（可选）：对于POST请求，通常会包含要发送的数据。</p></li></ul><p>服务器接收到请求后，会解析请求报文，处理请求，并生成响应。处理过程包括：</p><ul><li>确定请求的资源（如HTML文件、图片等）。</li><li>根据请求的方法和URI，执行相应的操作。</li></ul><p>服务器处理完请求后，会返回HTTP响应。响应报文主要由以下部分组成：</p><ul><li><p><strong>状态行</strong>：包括HTTP版本、状态码和状态描述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure></li><li><p><strong>响应头</strong>：包含一些关于响应的信息，如内容类型、内容长度等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1234</span><br></pre></td></tr></table></figure></li><li><p><strong>空行</strong>：响应头结束后需要一个空行。</p></li><li><p><strong>消息主体</strong>：实际传输的数据，如HTML内容、JSON数据等。</p></li></ul><p>在通信过程中，可能会遇到错误情况，如404（未找到资源）、500（服务器内部错误）等。服务器会根据错误情况返回相应的状态码和描述。<strong>项目没有做这个校验，需要完善。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境监测与远程控制系统</title>
      <link href="/2024/05/24/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%8E%AF%E5%A2%83%E7%9B%91%E6%B5%8B%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/24/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%8E%AF%E5%A2%83%E7%9B%91%E6%B5%8B%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="开发初衷">开发初衷</h2><p>想用这个项目综合自己所学知识，没有实际应用价值。</p><p>系统利用STM32微控制器、两种传感器、WiFi模块ESP01S以及阿里云物联网平台,实现对温湿度数据、超声波测距数据的实时监测以及告警、数据上云及远程控制功能。</p><h2 id="系统架构">系统架构</h2><ul><li><strong>硬件层</strong>:STM32F103主控板、DHT11温湿度传感器、HC-SR04超声波测距模块、OLED显示屏、ESP-01S WiFi模块。</li><li><strong>软件层</strong>:传感器数据采集、显示、告警、MQTT通信等功能。</li><li><strong>云平台层</strong>:采用阿里云物联网平台,负责设备管理、数据存储及规则引擎等。</li><li><strong>应用层</strong>:包括Node.js开发的AMQP客户端,以及用于数据展示和远程控制的移动应用。</li></ul><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/1_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png" alt="1_系统架构"  /><h2 id="软件开发">软件开发</h2><h3 id="数据采集">数据采集</h3><h4 id="温湿度dht11">温湿度dht11</h4><p>通常是四个脚 VCC GND DATA NC，只有一条数据线DATA</p><p><strong>通信过程</strong></p><p>DHT11 通过单总线协议与主控设备（如微控制器或单片机）进行通信。通信过程如下：</p><ol><li><strong>主控设备初始化</strong>：主控设备将 Data 引脚拉低至少 18 ms，然后拉高 20-40 µs，通知 DHT11 准备通信。</li><li><strong>DHT11 响应</strong>：DHT11 在收到信号后，将 Data 引脚拉低 80 µs，然后拉高 80 µs，表示它准备发送数据。</li><li><strong>数据传输</strong>：DHT11 发送 40 位数据，其中包含 16 位湿度数据、16 位温度数据和 8 位校验和。<ul><li>数据格式为：湿度整数部分（8位） + 湿度小数部分（8位） + 温度整数部分（8位） + 温度小数部分（8位） + 校验和（8位）。</li><li>每一位数据的传输：DHT11 首先将 Data 引脚拉低 50 µs，随后发送高电平脉冲。如果高电平持续时间为 26-28 µs，则表示数据位为 0；如果持续时间为 70 µs，则表示数据位为 1。</li></ul></li><li><strong>校验和</strong>：接收到的 40 位数据中，前 32 位是湿度和温度数据，最后 8 位是校验和。如果第五个字节值等于前四个字节值那么就校验成功。</li></ol><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240810115136129.png" alt="image-20240810115136129" style="zoom: 67%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">dht11_read_data</span><span class="params">(<span class="type">uint8_t</span> buf[], <span class="type">uint8_t</span> len)</span> <span class="comment">/* return 0:succeed 1:failed */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> ret = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 复位 */</span></span><br><span class="line">dht11_reset();</span><br><span class="line"><span class="comment">/* 2. 等待从机响应 */</span></span><br><span class="line">dht11_check();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 接收40位数据 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">buf[i] = dht11_read_byte();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 校验数据是否正确 */</span></span><br><span class="line"><span class="keyword">if</span> (buf[<span class="number">4</span>] == (buf[<span class="number">0</span>] + buf[<span class="number">1</span>] + buf[<span class="number">2</span>] + buf[<span class="number">3</span>]))</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超声波测距HC-SR04">超声波测距HC-SR04</h4><p>传感器有四个脚 VCC GND TRIG ECHO</p><p>超声波测距原理：传感器发送超声波，遇到障碍物反弹回来，传感器接收到信号。通过之间的时间间隔就能计算出与障碍物的距离为 超声波在空气中传播速度×时间 / 2</p><p>TRIG是发送端，负责发送超声波，是输出口。</p><p>ECHO是接收端，负责接收超声波，是输入口。</p><p>开始发送超声波时ECHO处于高电平，接收到超声波后就变为低电平，所以高电平持续时间就是往返时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">hcsr04_get_distance</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> timcnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把计数值归零 */</span></span><br><span class="line">__HAL_TIM_SET_COUNTER(&amp;htim2, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单片机给超声波模块发送大于 10us 的高电平的触发信号 */</span></span><br><span class="line">HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);</span><br><span class="line">delay_us(<span class="number">15</span>);</span><br><span class="line">HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等待Echo 端由低电平转为高电平 马上开启定时器计时 */</span></span><br><span class="line"><span class="keyword">while</span> (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET)</span><br><span class="line">;</span><br><span class="line">HAL_TIM_Base_Start(&amp;htim2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  超声波模块检测到返回信号，Echo 端由高电平转为低电平 关闭定时器计时 */</span></span><br><span class="line"><span class="keyword">while</span> (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)</span><br><span class="line">;</span><br><span class="line">HAL_TIM_Base_Stop(&amp;htim2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时的 cnt值就是来回的时间 */</span></span><br><span class="line">timcnt = __HAL_TIM_GET_COUNTER(&amp;htim2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (timcnt &gt;= MAX_DELAY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> timcnt * <span class="number">170</span> / <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据显示">数据显示</h3><p>使用IIC协议让STM32与OLED通信，驱动OLED显示初始化信息和温湿度数据。</p><p>IIC总线上通过从机地址知道要把数据发给哪个从机设备</p><p>SPI总线通过片选线决定数据发布到哪个从机设备。</p><h3 id="温度告警">温度告警</h3><p>温度超过一定阈值，触发蜂鸣器，并且根据温度高低调整声音大小。</p><p>这块板上使用的蜂鸣器是无源蜂鸣器，属于压电式蜂鸣器类型。这里说的有源无源，并不是指电源的意思，而是指蜂鸣器内部是否含有振荡电路。</p><p>有源蜂鸣器内部自带振荡电路，只需提供电源即可发声，而无源蜂鸣器则需提供一定频率的脉冲信号才能发声，频率大小通常在 1.5-5KHz 之间。</p><p>如果给无源蜂鸣器加一个 1.5-5KHz 的脉冲信号会发声，而且改变这个频率，就可以调节蜂鸣器音调，产生各种不同音色、音调的声音。</p><p>如果改变输出电平的高低电平占空比，则可以改变蜂鸣器的声音大小。</p><p>这里通过输出不同占空比的PWM脉冲信号，控制蜂鸣器声音大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">beep_handle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp_val &gt; LOW_TEMPERATURE)</span><br><span class="line">&#123;</span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_1);</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_1, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (temp_val &gt; MIDDLE_TEMPERATURE)</span><br><span class="line">&#123;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_1, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">if</span> (temp_val &gt; HIGH_TEMPERATURE)</span><br><span class="line">&#123;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_1, <span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_TIM_PWM_Stop(&amp;htim3, TIM_CHANNEL_1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无线通信">无线通信</h3><ul><li>采用ESP-01S WiFi模块,通过AT指令实现WiFi连接和MQTT通信。</li><li>使用串口接收中断和空闲中断相结合的方式,处理WiFi模块返回的数据。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> ret;</span><br><span class="line"><span class="type">char</span> ip_buf[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (atk_mw8266d_init(<span class="number">115200</span>))</span><br><span class="line">    ;</span><br><span class="line">OLED_NewFrame();</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&quot;1.8266 init OK&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (atk_mw8266d_set_mode(<span class="number">1</span>))</span><br><span class="line">    ;</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">24</span>, <span class="string">&quot;2.8266 STA mode&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (atk_mw8266d_sw_reset())</span><br><span class="line">    ;</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">44</span>, <span class="string">&quot;3.8266 RESET OK&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (atk_mw8266d_join_ap(DEMO_WIFI_SSID, DEMO_WIFI_PWD))</span><br><span class="line">    ;</span><br><span class="line">OLED_NewFrame();</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&quot;4.JOIN WIFI OK&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (atk_mw8266d_get_ip(ip_buf))</span><br><span class="line">    ;</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">24</span>, <span class="string">&quot;5.8266 GOT IP OK&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置mqtt */</span></span><br><span class="line"><span class="keyword">while</span> (esp8266_config_mqtt(MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWD))</span><br><span class="line">    ;</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">44</span>, <span class="string">&quot;6.Config MQTT OK&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接阿里云 */</span></span><br><span class="line"><span class="keyword">while</span> (esp8266_connect_mqtt(BROKER_ASDDRESS, MQTT_PORT))</span><br><span class="line">    ;</span><br><span class="line">OLED_NewFrame();</span><br><span class="line">OLED_PrintASCIIString(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&quot;7.Link MQTT OK&quot;</span>, &amp;afont16x8, OLED_COLOR_NORMAL);</span><br><span class="line">OLED_ShowFrame();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 订阅主题 */</span></span><br><span class="line"><span class="keyword">while</span> (esp8266_device_subscribe(SUB_TOPIC))</span><br><span class="line">    ;</span><br><span class="line">atk_mw8266d_uart_rx_restart();</span><br></pre></td></tr></table></figure><p>设备接入阿里云是通过MQTT协议完成。MQTT协议通过发布订阅主题这种机制实现设备与服务器的通信。</p><p>设备不直接与服务器对话，而是与MQTT服务器对话，业务服务器也同样是与MQTT服务器对话。</p><p>STM32把数据封装到/sys/k1mtiHHABsy/${deviceName}/thing/event/property/post这个主题中，发送到阿里云MQTT服务器，虚拟机接收云端的数据</p><p><a href="https://help.aliyun.com/zh/iot/developer-reference/connect-a-client-to-iot-platform-by-using-the-sdk-for-node-js?spm=a2c4g.11186623.0.0.21e554d7ndCAaJ">nodejs开发amqp客户端</a></p><p>此时前端访问amqp客户端监听的端口，就可以拿到云端推送的JSON日志，进行JSON解析，拿到物模型数据后展示在APP界面上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS</title>
      <link href="/2024/05/13/C%E8%AF%AD%E8%A8%80/DS/"/>
      <url>/2024/05/13/C%E8%AF%AD%E8%A8%80/DS/</url>
      
        <content type="html"><![CDATA[<h1>DS</h1><h2 id="线性表">线性表</h2><p>sqlist.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SQLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATASIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> &#123;</span></span><br><span class="line">datatype data[DATASIZE];</span><br><span class="line"><span class="type">int</span> last;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line">sqlist *<span class="title function_">sqlist_create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sqlist_create1</span><span class="params">(sqlist **)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_insert</span><span class="params">(sqlist *, <span class="type">int</span>, datatype *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_delete</span><span class="params">(sqlist *, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_find</span><span class="params">(sqlist *, datatype *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_isempty</span><span class="params">(sqlist *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_setempty</span><span class="params">(sqlist *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_getnum</span><span class="params">(sqlist *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sqlist_print</span><span class="params">(sqlist *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_destroy</span><span class="params">(sqlist *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_union</span><span class="params">(sqlist *, sqlist *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>sqlist.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sqlist.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlist *<span class="title function_">sqlist_create</span><span class="params">()</span> &#123;</span><br><span class="line">sqlist *me;</span><br><span class="line">me = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line"><span class="keyword">if</span> (me == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">me-&gt;last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> me;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sqlist_create1</span><span class="params">(sqlist **<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">*<span class="built_in">list</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(sqlist));</span><br><span class="line"><span class="keyword">if</span> (*<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(*<span class="built_in">list</span>)-&gt;last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_insert</span><span class="params">(sqlist *me, <span class="type">int</span> i, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (me-&gt;last &gt;= DATASIZE - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; me-&gt;last + <span class="number">1</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = me-&gt;last; j &gt;= i; j--) </span><br><span class="line">me-&gt;data[j+<span class="number">1</span>] = me-&gt;data[j];</span><br><span class="line"></span><br><span class="line">me-&gt;data[i] = *data;</span><br><span class="line">me-&gt;last++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_delete</span><span class="params">(sqlist *me, <span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (me-&gt;last == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; me-&gt;last)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; me-&gt;last; j++)</span><br><span class="line">me-&gt;data[j] = me-&gt;data[j+<span class="number">1</span>];</span><br><span class="line">me-&gt;last--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_find</span><span class="params">(sqlist *me, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= me-&gt;last; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (me-&gt;data[i] == *data)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_isempty</span><span class="params">(sqlist *me)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> me-&gt;last == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_setempty</span><span class="params">(sqlist *me)</span> &#123;</span><br><span class="line">me-&gt;last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_getnum</span><span class="params">(sqlist *me)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> me-&gt;last + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sqlist_print</span><span class="params">(sqlist *me)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= me-&gt;last; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, me-&gt;data[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_destroy</span><span class="params">(sqlist *me)</span> &#123;</span><br><span class="line"><span class="built_in">free</span>(me);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sqlist_union</span><span class="params">(sqlist *list1, sqlist *list2)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= list2-&gt;last; i++) &#123;</span><br><span class="line">datatype x = list2-&gt;data[i];</span><br><span class="line"><span class="keyword">if</span> (sqlist_find(list1, &amp;x) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sqlist_insert(list1, <span class="number">0</span>, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链表">链表</h2><h3 id="单链表">单链表</h3><p>单链表有两种</p><ol><li>带头节点</li><li>不带头节点</li></ol><p>不带头节点，头节点就有可能改变，所以传参时用的是二级指针。</p><p>观察下两种写法有什么区别。</p><h4 id="带头节点">带头节点</h4><p>list.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">next</span>;</span></span><br><span class="line">datatype data;</span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *<span class="title function_">list_create</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_insert_at</span><span class="params">(<span class="built_in">list</span> *, <span class="type">int</span> , datatype *)</span>; <span class="comment">/* 不怎么用 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_order_insert</span><span class="params">(<span class="built_in">list</span> *, datatype *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除的元素回显到第三个参数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_delete_at</span><span class="params">(<span class="built_in">list</span> *, <span class="type">int</span>, datatype *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">list_delete</span><span class="params">(<span class="built_in">list</span> *, datatype *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_isempty</span><span class="params">(<span class="built_in">list</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_print</span><span class="params">(<span class="built_in">list</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_destroy</span><span class="params">(<span class="built_in">list</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>list.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *<span class="title function_">list_create</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *me = <span class="literal">NULL</span>; <span class="comment">/* 指针创建出来先置成NULL 避免产生野指针 */</span></span><br><span class="line">me = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line"><span class="keyword">if</span> (me == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">me-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> me;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_insert_at</span><span class="params">(<span class="built_in">list</span> *me, <span class="type">int</span> i, datatype *data)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *cur = me;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">/* return -EINVAL 错误规范 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; i &amp;&amp; cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;data = *data;</span><br><span class="line"></span><br><span class="line">node-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next = node;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按顺序插入 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_order_insert</span><span class="params">(<span class="built_in">list</span> *me, datatype *data)</span> &#123;</span><br><span class="line"><span class="comment">/* 写法一 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="built_in">list</span> *prev = me, *cur = me-&gt;next, *node;</span><br><span class="line"><span class="comment">/* cur必须放前面判断 只有cur != NULL 才会存在data 不然就是段错误 */</span></span><br><span class="line"><span class="keyword">while</span>(cur &amp;&amp; *data &gt; cur-&gt;data) &#123;</span><br><span class="line">prev = cur;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/* 写法二 */</span></span><br><span class="line"><span class="built_in">list</span> *p = me, *node;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next &amp;&amp; p-&gt;next-&gt;data &lt; *data) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">node-&gt;data = *data;</span><br><span class="line">node-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = node;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除的元素回显到第三个参数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_delete_at</span><span class="params">(<span class="built_in">list</span> *me, <span class="type">int</span> i, datatype *data)</span> &#123;</span><br><span class="line"><span class="comment">/* p就是前驱节点 */</span></span><br><span class="line"><span class="built_in">list</span> *p = me, *node;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(j &lt; i &amp;&amp; p-&gt;next) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">node = p-&gt;next;</span><br><span class="line">p-&gt;next = node-&gt;next;</span><br><span class="line">*data = node-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 值 == *data 的节点 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_delete</span><span class="params">(<span class="built_in">list</span> *me, datatype *data)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *p = me, *node;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next &amp;&amp; p-&gt;next-&gt;data != *data) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;next) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">node = p-&gt;next;</span><br><span class="line">p-&gt;next = node-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_isempty</span><span class="params">(<span class="built_in">list</span> *me)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> me-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_print</span><span class="params">(<span class="built_in">list</span> *me)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *cur = me-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (; cur; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_destroy</span><span class="params">(<span class="built_in">list</span> *me)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *next;</span><br><span class="line"><span class="built_in">list</span> *cur = me-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (; cur; cur = next) &#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(me);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *l;</span><br><span class="line">datatype arr[] = &#123;<span class="number">111</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">datatype data;</span><br><span class="line"></span><br><span class="line">l = list_create();</span><br><span class="line"><span class="keyword">if</span> (l == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> arr / <span class="keyword">sizeof</span> *arr; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (list_order_insert(l, &amp;arr[i]))</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list_print(l);</span><br><span class="line"></span><br><span class="line">data = <span class="number">1111</span>;</span><br><span class="line"><span class="keyword">if</span> (list_delete(l, &amp;data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">list_print(l);</span><br><span class="line">data = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">if</span> (list_delete(l, &amp;data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">list_print(l);</span><br><span class="line">list_delete_at(l, <span class="number">2</span>, &amp;data);</span><br><span class="line">list_print(l);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;deleted: %d\n&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">list_destroy(l);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头节点">不带头节点</h4><p>list.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> <span class="title">data</span>;</span></span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_insert</span><span class="params">(<span class="built_in">list</span> **, <span class="keyword">struct</span> score_st *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_delete</span><span class="params">(<span class="built_in">list</span> **)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> score_st *<span class="title function_">list_find</span><span class="params">(<span class="built_in">list</span> *, <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_isempty</span><span class="params">(<span class="built_in">list</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_print</span><span class="params">(<span class="built_in">list</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_destroy</span><span class="params">(<span class="built_in">list</span> *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>list.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有头节点和无头节点的区别</span></span><br><span class="line"><span class="comment"> * 传二级指针 因为插入位置在首部，头节点会改变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_insert</span><span class="params">(<span class="built_in">list</span> **me, <span class="keyword">struct</span> score_st *score)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> **head = me, *node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *node);</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">node-&gt;data = *score;</span><br><span class="line"><span class="comment">/* node-&gt;next = NULL; */</span></span><br><span class="line"></span><br><span class="line">node-&gt;next = *head;</span><br><span class="line">*head = node;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 值 == *data 的节点 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_delete</span><span class="params">(<span class="built_in">list</span> **me)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *ptr;</span><br><span class="line"><span class="keyword">if</span> (me == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">ptr = *me;</span><br><span class="line">*me = (*me)-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> score_st *<span class="title function_">list_find</span><span class="params">(<span class="built_in">list</span> *me, <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *cur;</span><br><span class="line"><span class="keyword">for</span> (cur = me; cur; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;data.id == id)</span><br><span class="line"><span class="keyword">return</span> &amp;cur-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_print</span><span class="params">(<span class="built_in">list</span> *me)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *cur = me;</span><br><span class="line"><span class="keyword">for</span> (; cur; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, cur-&gt;data.id, cur-&gt;data.name, cur-&gt;data.math);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_destroy</span><span class="params">(<span class="built_in">list</span> *me)</span> &#123;</span><br><span class="line"><span class="built_in">list</span> *cur, *next;</span><br><span class="line"><span class="keyword">for</span> (cur = me; cur; cur = next) &#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *l = <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> <span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">tmp.id = i;</span><br><span class="line">tmp.math = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">snprintf</span>(tmp.name, NAMESIZE, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line">list_insert(&amp;l, &amp;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list_print(l);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;after delete\n&quot;</span>);</span><br><span class="line">list_delete(&amp;l);</span><br><span class="line">list_delete(&amp;l);</span><br><span class="line">list_print(l);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">score</span>;</span></span><br><span class="line">score = list_find(l, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (score == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;found %d %s %d\n&quot;</span>, score-&gt;id, score-&gt;name, score-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_destroy(l);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子：多项式合并">例子：多项式合并</h4><p>实现效果：</p><ul><li>5 + 2x + 8x^8 + 3x^16</li><li>6x + 16x^6 - 8x^8</li></ul><p>合并结果应该为： 5 + 8x + 16x^6 + 3x^16</p><p>todo: 如果原始数据无序，插入时需要顺序插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> coef; <span class="comment">/* 系数 */</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">exp</span>;  <span class="comment">/* 指数 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> node_st *<span class="title function_">poly_create</span><span class="params">(<span class="type">int</span> a[][<span class="number">2</span>], <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">me</span> =</span> <span class="literal">NULL</span>, *node, *cur;</span><br><span class="line">me = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *me);</span><br><span class="line"><span class="keyword">if</span> (me == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">me-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">cur = me;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *node);</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="comment">/* 没有考虑 之前 还有malloc成功的 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;coef = a[i][<span class="number">0</span>];</span><br><span class="line">node-&gt;<span class="built_in">exp</span> = a[i][<span class="number">1</span>];</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next = node;</span><br><span class="line">cur = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> me;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">poly_union</span><span class="params">(<span class="keyword">struct</span> node_st *p1, <span class="keyword">struct</span> node_st *p2)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">p</span>, *<span class="title">q</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">r</span>;</span> <span class="comment">/* 指向结果链表的最后一个有效节点 */</span></span><br><span class="line">p = p1-&gt;next;</span><br><span class="line">q = p2-&gt;next; </span><br><span class="line">r = p1; <span class="comment">/* 待确定连接某个节点 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; q) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> &lt; q-&gt;<span class="built_in">exp</span>) &#123; <span class="comment">/* 留p p成为新的有效节点 更新r值 */</span></span><br><span class="line">r-&gt;next = p;</span><br><span class="line">r = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> &gt; q-&gt;<span class="built_in">exp</span>) &#123; <span class="comment">/* 留q  r = q */</span></span><br><span class="line">r-&gt;next = q;</span><br><span class="line">r = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">/* 相加 判断是否 = 0 */</span></span><br><span class="line">p-&gt;coef += q-&gt;coef;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;coef != <span class="number">0</span>) &#123;</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">r = p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p) r-&gt;next = p;</span><br><span class="line"><span class="keyword">if</span> (q) r-&gt;next = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">poly_show</span><span class="params">(<span class="keyword">struct</span> node_st *me)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = me-&gt;next; cur; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%dX^%d + &quot;</span>, cur-&gt;coef, cur-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%dX^%d&quot;</span>, cur-&gt;coef, cur-&gt;<span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">/* 这里人为让它有序 如果原始数据无序 需要按顺序插入 list_order_insert */</span></span><br><span class="line"><span class="type">int</span> a[][<span class="number">2</span>] = &#123;&#123;<span class="number">5</span>, <span class="number">0</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">8</span>, <span class="number">8</span>&#125;, &#123;<span class="number">3</span>, <span class="number">16</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> b[][<span class="number">2</span>] = &#123;&#123;<span class="number">6</span>, <span class="number">1</span>&#125;, &#123;<span class="number">16</span>, <span class="number">6</span>&#125;, &#123;<span class="number">-8</span>, <span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> *<span class="title">p1</span>, *<span class="title">p2</span>;</span></span><br><span class="line"></span><br><span class="line">p1 = poly_create(a, <span class="keyword">sizeof</span> a / <span class="keyword">sizeof</span> *a);</span><br><span class="line"><span class="keyword">if</span> (p1 == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">p2 = poly_create(b, <span class="keyword">sizeof</span> b / <span class="keyword">sizeof</span> *b);</span><br><span class="line"><span class="keyword">if</span> (p2 == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">poly_show(p1);</span><br><span class="line">poly_show(p2);</span><br><span class="line"></span><br><span class="line">poly_union(p1, p2);</span><br><span class="line"></span><br><span class="line">poly_show(p1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表">双向链表</h3><ol><li>回调函数</li><li>修改过程</li></ol><h4 id="基本实现">基本实现</h4><p>llist.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LLIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首部插入和尾部插入 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_FORWARD  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_BACKWARD 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> &#123;</span></span><br><span class="line"><span class="type">void</span> *data; <span class="comment">/* 指向存储元素的那块空间 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> <span class="title">head</span>;</span></span><br><span class="line">&#125;LLIST; <span class="comment">/* 头节点 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 抽象回调函数类型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> <span class="title function_">llist_op</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="title function_">llist_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> mode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只删除 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除后回显 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *, <span class="type">void</span> *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回调函数实现遍历 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_travel</span><span class="params">(LLIST *, llist_op *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>llist.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span> &#123;</span><br><span class="line">LLIST *new = <span class="literal">NULL</span>;</span><br><span class="line">new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *new);</span><br><span class="line"><span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">new-&gt;size = initsize;</span><br><span class="line">new-&gt;head.data = <span class="literal">NULL</span>;</span><br><span class="line">new-&gt;head.prev = &amp;new-&gt;head;</span><br><span class="line">new-&gt;head.next = &amp;new-&gt;head;</span><br><span class="line"><span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *newnode);</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">newnode-&gt;data = <span class="built_in">malloc</span>(ptr-&gt;size);</span><br><span class="line">newnode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (newnode-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(newnode-&gt;data, data, ptr-&gt;size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mode == LLIST_FORWARD) &#123; <span class="comment">/* 首部插入 */</span></span><br><span class="line">newnode-&gt;prev = &amp;ptr-&gt;head; <span class="comment">/* &#x27;&amp;&#x27; &lt; &#x27;-&gt;&#x27; 所以取的是头节点head成员地址 */</span></span><br><span class="line">newnode-&gt;next = ptr-&gt;head.next;</span><br><span class="line"><span class="comment">// newnode-&gt;prev-&gt;next = newnode;</span></span><br><span class="line"><span class="comment">// newnode-&gt;next-&gt;prev = newnode;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == LLIST_BACKWARD) &#123; <span class="comment">/* 尾部插入 */</span></span><br><span class="line">newnode-&gt;next = &amp;ptr-&gt;head;</span><br><span class="line">newnode-&gt;prev = ptr-&gt;head.prev;</span><br><span class="line"><span class="comment">// newnode-&gt;prev-&gt;next = newnode;</span></span><br><span class="line"><span class="comment">// newnode-&gt;next-&gt;prev = newnode;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">/* error */</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重复 */</span></span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> llist_node_st *<span class="title function_">find_</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(key, cur-&gt;data) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 找不到 返回的就是头节点 而头节点的data 就是NULL */</span></span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> find_(ptr, key, cmp)-&gt;data; <span class="comment">/* 通用函数 delte fetch 也会用到 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line"><span class="built_in">free</span>(node-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* data == NULL 表示不回显 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(data, node-&gt;data, ptr-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(node-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回调函数 实现遍历 因为并不知道用户实际数据长什么样 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_travel</span><span class="params">(LLIST *ptr, llist_op *op)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="comment">/* cur-&gt;data */</span></span><br><span class="line">op(cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *ptr)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>, *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = next) &#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_s</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *record)</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">r</span> =</span> record;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, r-&gt;id, r-&gt;name, r-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">id_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key, <span class="type">const</span> <span class="type">void</span> *record)</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">r</span> =</span> record;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (*k - r-&gt;id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">name_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key, <span class="type">const</span> <span class="type">void</span> *record)</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *k = key;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">r</span> =</span> record;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(k, r-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">LLIST *handler;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> <span class="title">tmp</span>;</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">handler = llist_create(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> score_st));</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">tmp.id = i;</span><br><span class="line">tmp.math = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">snprintf</span>(tmp.name, NAMESIZE, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ret = llist_insert(handler, &amp;tmp, LLIST_FORWARD); */</span></span><br><span class="line">ret = llist_insert(handler, &amp;tmp, LLIST_BACKWARD);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_travel(handler, print_s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> id = <span class="number">6</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">data</span>;</span></span><br><span class="line">data = llist_find(handler, &amp;id, id_cmp);</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">print_s(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id = <span class="number">31</span>;</span><br><span class="line">llist_delete(handler, &amp;id, id_cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;after delete\n&quot;</span>);</span><br><span class="line">llist_travel(handler, print_s);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *name = <span class="string">&quot;stu0&quot;</span>;</span><br><span class="line">llist_delete(handler, name, name_cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;after delete\n&quot;</span>);</span><br><span class="line">llist_travel(handler, print_s);</span><br><span class="line"></span><br><span class="line">llist_destroy(handler);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变长结构体实现">变长结构体实现</h4><p>修改节点结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 变长结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">0</span>]; <span class="comment">/* 占位符 C99以后才支持 长度为0这种写法 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>llist.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span> &#123;</span><br><span class="line">LLIST *new = <span class="literal">NULL</span>;</span><br><span class="line">new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *new);</span><br><span class="line"><span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">new-&gt;size = initsize;</span><br><span class="line">new-&gt;head.prev = &amp;new-&gt;head;</span><br><span class="line">new-&gt;head.next = &amp;new-&gt;head;</span><br><span class="line"><span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *newnode + ptr-&gt;size);</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">newnode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(newnode-&gt;data, data, ptr-&gt;size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mode == LLIST_FORWARD) &#123; <span class="comment">/* 首部插入 */</span></span><br><span class="line">newnode-&gt;prev = &amp;ptr-&gt;head; <span class="comment">/* &#x27;&amp;&#x27; &lt; &#x27;-&gt;&#x27; 所以取的是头节点head成员地址 */</span></span><br><span class="line">newnode-&gt;next = ptr-&gt;head.next;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == LLIST_BACKWARD) &#123; <span class="comment">/* 尾部插入 */</span></span><br><span class="line">newnode-&gt;next = &amp;ptr-&gt;head;</span><br><span class="line">newnode-&gt;prev = ptr-&gt;head.prev;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">/* error */</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重复 */</span></span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> llist_node_st *<span class="title function_">find_</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(key, cur-&gt;data) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 找不到 返回的就是头节点 而头节点的data 就是NULL */</span></span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* data == NULL 表示不回显 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(data, node-&gt;data, ptr-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回调函数 实现遍历 因为并不知道用户实际数据长什么样 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_travel</span><span class="params">(LLIST *ptr, llist_op *op)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="comment">/* cur-&gt;data */</span></span><br><span class="line">op(cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *ptr)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>, *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = next) &#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数封装到结构体中">函数封装到结构体中</h4><p>llist.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LLIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首部插入和尾部插入 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_FORWARD  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_BACKWARD 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 变长结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">0</span>]; <span class="comment">/* 占位符 C99以后才支持 长度为0这种写法 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 抽象回调函数类型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> <span class="title function_">llist_op</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="title function_">llist_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> &#123;</span></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> <span class="title">head</span>;</span></span><br><span class="line"><span class="type">int</span> (*insert)(<span class="keyword">struct</span> llist_head *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span>);</span><br><span class="line"><span class="type">void</span> *(*find)(<span class="keyword">struct</span> llist_head *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *);</span><br><span class="line"><span class="type">int</span> (*delete)(<span class="keyword">struct</span> llist_head *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *);</span><br><span class="line"><span class="type">int</span> (*fetch)(<span class="keyword">struct</span> llist_head *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *, <span class="type">void</span> *);</span><br><span class="line"><span class="type">void</span> (*travel)(<span class="keyword">struct</span> llist_head *, llist_op *);</span><br><span class="line"><span class="type">void</span> (*destroy)(<span class="keyword">struct</span> llist_head *);</span><br><span class="line"></span><br><span class="line">&#125;LLIST; <span class="comment">/* 头节点 */</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>llist.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp, <span class="type">void</span> *data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_travel</span><span class="params">(LLIST *ptr, llist_op *op)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *ptr)</span>;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span> &#123;</span><br><span class="line">LLIST *new = <span class="literal">NULL</span>;</span><br><span class="line">new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *new);</span><br><span class="line"><span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">new-&gt;size = initsize;</span><br><span class="line">new-&gt;head.prev = &amp;new-&gt;head;</span><br><span class="line">new-&gt;head.next = &amp;new-&gt;head;</span><br><span class="line"></span><br><span class="line">new-&gt;insert = llist_insert;</span><br><span class="line">new-&gt;delete = llist_delete;</span><br><span class="line">new-&gt;find = llist_find;</span><br><span class="line">new-&gt;fetch = llist_fetch;</span><br><span class="line">new-&gt;destroy = llist_destroy;</span><br><span class="line">new-&gt;travel = llist_travel;</span><br><span class="line"><span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐藏数据结构">隐藏数据结构</h4><p><code>typedef void LLIST;</code> 结构体放到.c文件 .h只放大概内容</p><p>llist.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LLIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首部插入和尾部插入 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_FORWARD  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLIST_BACKWARD 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> LLIST;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 抽象回调函数类型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> <span class="title function_">llist_op</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="title function_">llist_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> mode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只删除 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除后回显 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *, <span class="type">void</span> *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回调函数实现遍历 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_travel</span><span class="params">(LLIST *, llist_op *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>llist.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据结构 不放在 .h文件中 隐藏起来 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> &#123;</span></span><br><span class="line"><span class="type">void</span> *data; <span class="comment">/* 指向存储元素的那块空间 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> <span class="title">head</span>;</span></span><br><span class="line">&#125;; <span class="comment">/* 头节点 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> initsize)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">new</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *new);</span><br><span class="line"><span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">new-&gt;size = initsize;</span><br><span class="line">new-&gt;head.data = <span class="literal">NULL</span>;</span><br><span class="line">new-&gt;head.prev = &amp;new-&gt;head;</span><br><span class="line">new-&gt;head.next = &amp;new-&gt;head;</span><br><span class="line"><span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *p, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">ptr</span> =</span> p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *newnode);</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">newnode-&gt;data = <span class="built_in">malloc</span>(ptr-&gt;size);</span><br><span class="line">newnode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (newnode-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(newnode-&gt;data, data, ptr-&gt;size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mode == LLIST_FORWARD) &#123; <span class="comment">/* 首部插入 */</span></span><br><span class="line">newnode-&gt;prev = &amp;ptr-&gt;head; <span class="comment">/* &#x27;&amp;&#x27; &lt; &#x27;-&gt;&#x27; 所以取的是头节点head成员地址 */</span></span><br><span class="line">newnode-&gt;next = ptr-&gt;head.next;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == LLIST_BACKWARD) &#123; <span class="comment">/* 尾部插入 */</span></span><br><span class="line">newnode-&gt;next = &amp;ptr-&gt;head;</span><br><span class="line">newnode-&gt;prev = ptr-&gt;head.prev;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">/* error */</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重复 */</span></span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> llist_node_st *<span class="title function_">find_</span><span class="params">(<span class="keyword">struct</span> llist_head_st *ptr, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(key, cur-&gt;data) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 找不到 返回的就是头节点 而头节点的data 就是NULL */</span></span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *p, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">ptr</span> =</span> p;</span><br><span class="line"><span class="keyword">return</span> find_(ptr, key, cmp)-&gt;data; <span class="comment">/* 通用函数 delte fetch 也会用到 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *p, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">ptr</span> =</span> p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line"><span class="built_in">free</span>(node-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* data == NULL 表示不回显 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *p, <span class="type">const</span> <span class="type">void</span> *key, llist_cmp *cmp, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">ptr</span> =</span> p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">node</span>;</span></span><br><span class="line">node = find_(ptr, key, cmp);</span><br><span class="line"><span class="keyword">if</span> (node == &amp;ptr-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(data, node-&gt;data, ptr-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(node-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回调函数 实现遍历 因为并不知道用户实际数据长什么样 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_travel</span><span class="params">(LLIST *p, llist_op *op)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">ptr</span> =</span> p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = cur-&gt;next) &#123;</span><br><span class="line"><span class="comment">/* cur-&gt;data */</span></span><br><span class="line">op(cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *p)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head_st</span> *<span class="title">ptr</span> =</span> p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node_st</span> *<span class="title">cur</span>, *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">for</span> (cur = ptr-&gt;head.next; cur != &amp;ptr-&gt;head; cur = next) &#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="栈">栈</h2><p>栈和队列也是线性表，不同的只是插入数据方法不同。</p><ul><li>栈：先进后出</li><li>队列：先进先出 队尾插入 队头弹出</li></ul><h3 id="顺序栈">顺序栈</h3><p>sqstack.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SQSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQSTACK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_st</span> &#123;</span></span><br><span class="line">datatype data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;sqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqstack *<span class="title function_">st_create</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_push</span><span class="params">(sqstack *, datatype *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除后回显 ctrl+x */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_pop</span><span class="params">(sqstack *, datatype *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回填查看栈顶元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_top</span><span class="params">(sqstack *, datatype *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_isempty</span><span class="params">(sqstack *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_travel</span><span class="params">(sqstack *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_destroy</span><span class="params">(sqstack *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>sqstack.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">sqstack *<span class="title function_">st_create</span><span class="params">()</span> &#123;</span><br><span class="line">sqstack *st;</span><br><span class="line">st = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *st);</span><br><span class="line"><span class="keyword">if</span> (!st)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">st-&gt;top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_push</span><span class="params">(sqstack *st, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (st-&gt;top &gt;= (MAXSIZE - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">st-&gt;data[++st-&gt;top] = *data;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除后回显 ctrl+x */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_pop</span><span class="params">(sqstack *st, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (st_isempty(st))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">*data = st-&gt;data[st-&gt;top--];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回填查看栈顶元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_top</span><span class="params">(sqstack *st, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (st_isempty(st))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">*data = st-&gt;data[st-&gt;top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">st_isempty</span><span class="params">(sqstack *st)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> st-&gt;top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_travel</span><span class="params">(sqstack *st)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (st_isempty(st))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= st-&gt;top; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_destroy</span><span class="params">(sqstack *st)</span> &#123;</span><br><span class="line"><span class="built_in">free</span>(st);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sqstack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">sqstack *st;</span><br><span class="line">datatype arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">111</span>, <span class="number">12</span>&#125;;</span><br><span class="line">st = st_create();</span><br><span class="line"><span class="keyword">if</span> (st == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> arr / <span class="keyword">sizeof</span> *arr; i++)</span><br><span class="line">st_push(st, &amp;arr[i]);</span><br><span class="line"></span><br><span class="line">st_travel(st);</span><br><span class="line"></span><br><span class="line">datatype data;</span><br><span class="line"><span class="keyword">while</span> (st_pop(st, &amp;data) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">st_destroy(st);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链栈">链栈</h3><p>在双向链表基础上二次开发，用到llist.h和llist.c</p><p>stack.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> LLIST STACK;</span><br><span class="line"></span><br><span class="line">STACK *<span class="title function_">stack_create</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首部插入 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(STACK *, <span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(STACK *, <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_destroy</span><span class="params">(STACK *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>stack.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">STACK *<span class="title function_">stack_create</span><span class="params">(<span class="type">int</span> initsize)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> llist_create(initsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(STACK *ptr, <span class="type">const</span> <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> llist_insert(ptr, data, LLIST_FORWARD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">always_match</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key, <span class="type">const</span> <span class="type">void</span> *r)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(STACK *ptr, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> llist_fetch(ptr, (<span class="type">void</span> *)<span class="number">0</span>, always_match, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_destroy</span><span class="params">(STACK *ptr)</span> &#123;</span><br><span class="line">llist_destroy(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 32</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_s</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *record)</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">r</span> =</span> record;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, r-&gt;id, r-&gt;name, r-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">STACK *st;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> <span class="title">tmp</span>;</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">st = stack_create(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> score_st));</span><br><span class="line"><span class="keyword">if</span> (st == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">tmp.id = i;</span><br><span class="line">tmp.math = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">snprintf</span>(tmp.name, NAMESIZE, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line">stack_push(st, &amp;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">ret = stack_pop(st, &amp;tmp);</span><br><span class="line"><span class="keyword">if</span> (ret) <span class="keyword">break</span>;</span><br><span class="line">print_s(&amp;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack_destroy(st);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列">队列</h2><p>搞明白循环队列原理，队空/队满 条件为什么冲突？</p><p>解决方法哪两种？</p><ol><li>head不存数据 head == tail -&gt; 空  (head + 1) % MAXSIZE == tail 满</li><li>?</li></ol><h3 id="线性循环队列">线性循环队列</h3><p>queue.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"><span class="type">int</span> tail;</span><br><span class="line">&#125;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> *<span class="title function_">qu_create</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">qu_isempty</span><span class="params">(<span class="built_in">queue</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">qu_enqueue</span><span class="params">(<span class="built_in">queue</span> *, datatype *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回显出队元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">qu_dequeue</span><span class="params">(<span class="built_in">queue</span> *, datatype *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qu_travel</span><span class="params">(<span class="built_in">queue</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qu_clear</span><span class="params">(<span class="built_in">queue</span> *)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">qu_destroy</span><span class="params">(<span class="built_in">queue</span> *)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>queue.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span> *<span class="title function_">qu_create</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">queue</span> *sq;</span><br><span class="line">sq = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *sq);</span><br><span class="line"><span class="keyword">if</span> (sq == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">sq-&gt;head = <span class="number">0</span>;</span><br><span class="line">sq-&gt;tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">qu_isempty</span><span class="params">(<span class="built_in">queue</span> *sq)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sq-&gt;head == sq-&gt;tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">qu_enqueue</span><span class="params">(<span class="built_in">queue</span> *sq, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((sq-&gt;tail + <span class="number">1</span>) % MAXSIZE == sq-&gt;head)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">sq-&gt;tail = (sq-&gt;tail + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">sq-&gt;data[sq-&gt;tail] = *data;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回显出队元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">qu_dequeue</span><span class="params">(<span class="built_in">queue</span> *sq, datatype *data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (qu_isempty(sq)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">sq-&gt;head = (sq-&gt;head + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">*data = sq-&gt;data[sq-&gt;head];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qu_travel</span><span class="params">(<span class="built_in">queue</span> *sq)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (qu_isempty(sq))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = sq-&gt;head + <span class="number">1</span>; i != sq-&gt;tail; i = (i + <span class="number">1</span>) % MAXSIZE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sq-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sq-&gt;data[sq-&gt;tail]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qu_clear</span><span class="params">(<span class="built_in">queue</span> *sq)</span> &#123;</span><br><span class="line">sq-&gt;head = sq-&gt;tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qu_destroy</span><span class="params">(<span class="built_in">queue</span> *sq)</span> &#123;</span><br><span class="line"><span class="built_in">free</span>(sq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> *sq;</span><br><span class="line">datatype arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">111</span>&#125;;</span><br><span class="line">sq = qu_create();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> arr / <span class="keyword">sizeof</span> *arr; i++) &#123;</span><br><span class="line">qu_enqueue(sq, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">qu_travel(sq);</span><br><span class="line"></span><br><span class="line">datatype data;</span><br><span class="line"><span class="keyword">while</span>(qu_dequeue(sq, &amp;data) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">qu_travel(sq);</span><br><span class="line">qu_destroy(sq);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式循环队列">链式循环队列</h3><p>在双向链表基础上开发</p><p>queue.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> LLIST QUEUE;</span><br><span class="line"></span><br><span class="line">QUEUE *<span class="title function_">queue_create</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_en</span><span class="params">(QUEUE *, <span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_de</span><span class="params">(QUEUE *, <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(QUEUE *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>queue.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QUEUE *<span class="title function_">queue_create</span><span class="params">(<span class="type">int</span> initsize)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> llist_create(initsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_en</span><span class="params">(QUEUE *ptr, <span class="type">const</span> <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> llist_insert(ptr, data, LLIST_BACKWARD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">always_match</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key, <span class="type">const</span> <span class="type">void</span> *r)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_de</span><span class="params">(QUEUE *ptr, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> llist_fetch(ptr, (<span class="type">void</span> *)<span class="number">0</span>, always_match, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(QUEUE *ptr)</span> &#123;</span><br><span class="line">llist_destroy(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 32</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_s</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *record)</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> *<span class="title">r</span> =</span> record;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, r-&gt;id, r-&gt;name, r-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">QUEUE *q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score_st</span> <span class="title">tmp</span>;</span></span><br><span class="line">q = queue_create(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> score_st));</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">tmp.id = i;</span><br><span class="line">tmp.math = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">snprintf</span>(tmp.name, NAMESIZE, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line">queue_en(q, &amp;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (queue_de(q, &amp;tmp) == <span class="number">0</span>) &#123;</span><br><span class="line">print_s(&amp;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue_destroy(q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树">树</h2><p>todo</p><h3 id="二叉树">二叉树</h3><h3 id="搜索树">搜索树</h3>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC</title>
      <link href="/2024/05/03/C%E8%AF%AD%E8%A8%80/IPC/"/>
      <url>/2024/05/03/C%E8%AF%AD%E8%A8%80/IPC/</url>
      
        <content type="html"><![CDATA[<h1>IPC</h1><p>inter-process-communication</p><h2 id="管道">管道</h2><p>内核提供匿名、命名两种管道，管道文件p</p><p>单工（一端读，一端写，像队列）</p><p>自同步机制（迁就慢的一方）</p><p>程序先易读、正确 ， 再谈优化</p><p>管道必须凑齐读写双方才能实现， 只有一方的话就会一直卡在那</p><p>双工管道如何实现? 创建两个管道，一个父写子读，一个子写父读</p><h3 id="匿名管道">匿名管道</h3><p>磁盘上不存在，没有亲缘关系的进程不能用，因为找不到管道，只能用命名管道</p><p>父子进程各自关于一个不用的fd</p><p>如果父写子读，父进程close读fd，子进程close写fd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipefd[<span class="number">2</span>])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe2</span><span class="params">(<span class="type">int</span> pipefd[<span class="number">2</span>], <span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>pipe()  creates  a  pipe,  a unidirectional data channel that can be used for interprocess communication.</p><p>The array pipefd is used to return two file descriptors referring to the ends  of  the  pipe.</p><p>pipefd[0] refers  to the read end of the pipe.  pipefd[1] refers to the write end of the pipe.</p><p>Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pipe()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// child</span></span><br><span class="line">close(fd[<span class="number">1</span>]);</span><br><span class="line">len = read(fd[<span class="number">0</span>], buf, BUFSIZE);</span><br><span class="line">write(<span class="number">1</span>, buf, len);</span><br><span class="line">close(fd[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">close(fd[<span class="number">0</span>]);</span><br><span class="line">write(fd[<span class="number">1</span>], <span class="string">&quot;Hello, world!\n&quot;</span>, <span class="number">14</span>);</span><br><span class="line">close(fd[<span class="number">1</span>]);</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>mpg123 test.mp4 / cat test.mp4 | mpg123 -</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pipe()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// child read</span></span><br><span class="line">close(fd[<span class="number">1</span>]);</span><br><span class="line">dup2(fd[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">close(fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;/dev/null&quot;</span>,O_RDWR);<span class="comment">//屏蔽 标准输出和标准出错</span></span><br><span class="line">        dup2(fd,<span class="number">1</span>);</span><br><span class="line">        dup2(fd,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">execl(<span class="string">&quot;/usr/bin/mpg123&quot;</span>, <span class="string">&quot;mpg123&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">perror(<span class="string">&quot;execl()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parent write</span></span><br><span class="line">close(fd[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> fd_mp3 = open(argv[<span class="number">1</span>], O_RDWR);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">len = read(fd_mp3,buf,BUFSIZE);</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">close(fd[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">write(fd[<span class="number">1</span>],buf,len);</span><br><span class="line">&#125;</span><br><span class="line">close(fd[<span class="number">1</span>]);</span><br><span class="line">close(fd_mp3);</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名管道">命名管道</h3><p>makefifo命令就是这个函数实现的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mkfifo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure><h2 id="XSI-SysV">XSI -&gt; SysV</h2><p>XSI IPC. The three types of IPC that we call XSI IPC:</p><ul><li>message queues</li><li>semaphores arrays</li><li>shared memory</li></ul><p><code>ipcs</code>可以查看</p><p>key: ftok() 产生同一个key值 三种机制要用到</p><p>无亲缘关系：用协议约定KEYPATH KEYPROJ，ftok获取同一key值</p><p>有亲缘关系：<code>IPC_PRIVATE</code></p><ul><li>xxxget 创建<ul><li>msget</li><li>semget</li><li>shmget</li></ul></li><li>xxxop 操作</li><li>xxxctl  控制</li></ul><p>主动端：先发包的一方</p><p>被动端：先收包的一方（先运行起来，像服务器）</p><h3 id="消息队列">消息队列</h3><p>协议就是双方的约定。</p><p>接收端（被动端）先运行</p><p>消息队列机制是有一个缓冲区的，大小可以通过 ulimit -a查看 <code>POSIX message queues</code></p><p>结构体中的 <code>long mtype</code>是什么意思？</p><p>消息队列可以实现 没有关系的IPC（但只是跨进程，不是跨主机），匿名管道只能实现 有关系的IPC</p><p>协议</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PROTO_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTO_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEYPATH <span class="string">&quot;/etc/services&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEYPROJ <span class="string">&#x27;a&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> &#123;</span></span><br><span class="line"><span class="type">long</span> mtype;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125; msg_st;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* PROTO_H_ */</span></span></span><br></pre></td></tr></table></figure><p>接收端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> msgid;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">()</span> &#123;</span><br><span class="line">msgctl(msgid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被动端先运行起来 等消息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">key_t</span> key;</span><br><span class="line">msg_st rbuf;</span><br><span class="line"></span><br><span class="line">key = ftok(KEYPATH, KEYPROJ);</span><br><span class="line"><span class="keyword">if</span> (key &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;ftok()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msgid = msgget(key, IPC_CREAT | <span class="number">0600</span>);</span><br><span class="line"><span class="keyword">if</span> (msgid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;msgget()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常终止改正常终止</span></span><br><span class="line">signal(SIGINT, handler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (msgrcv(msgid, &amp;rbuf, <span class="keyword">sizeof</span>(rbuf) - <span class="keyword">sizeof</span>(<span class="type">long</span>), <span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;msgrcv()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NAME: %s\n&quot;</span>, rbuf.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MATH: %d\n&quot;</span>, rbuf.math);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AGE: %d\n&quot;</span>, rbuf.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">key_t</span> key;</span><br><span class="line"><span class="type">int</span> msgid;</span><br><span class="line">msg_st sbuf;</span><br><span class="line"></span><br><span class="line">key = ftok(KEYPATH, KEYPROJ);</span><br><span class="line"><span class="keyword">if</span> (key &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;ftok()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msgid = msgget(key, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (msgid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;msgget()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sbuf.mtype = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(sbuf.name, <span class="string">&quot;kimi&quot;</span>);</span><br><span class="line">sbuf.age = <span class="number">20</span>;</span><br><span class="line">sbuf.math = rand() % <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (msgsnd(msgid, &amp;sbuf, <span class="keyword">sizeof</span>(msg_st) - <span class="keyword">sizeof</span>(<span class="type">long</span>), <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;msgsnd()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Message send over&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号量">信号量</h3><p>匿名IPC</p><p>有亲缘关系的IPC, key不是必须的，可以用IPC_PRIVATE，不用ftok</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROCNUM 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FNAME <span class="string">&quot;/tmp/out&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> semid;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">P</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">op</span>;</span></span><br><span class="line">op.sem_num = <span class="number">0</span>;</span><br><span class="line">op.sem_op = <span class="number">-1</span>;</span><br><span class="line">op.sem_flg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (semop(semid, &amp;op, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR &amp;&amp; errno!= EAGAIN) &#123;</span><br><span class="line">perror(<span class="string">&quot;semop()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">V</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">op</span>;</span></span><br><span class="line">op.sem_num = <span class="number">0</span>;</span><br><span class="line">op.sem_op = <span class="number">1</span>;</span><br><span class="line">op.sem_flg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (semop(semid, &amp;op, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR &amp;&amp; errno!= EAGAIN) &#123;</span><br><span class="line">perror(<span class="string">&quot;semop()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func_add</span><span class="params">()</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> linebuf[BUFSIZE];</span><br><span class="line">fp = fopen(FNAME, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P();</span><br><span class="line">fgets(linebuf, BUFSIZE, fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">sleep(<span class="number">1</span>); <span class="comment">// 放大故障</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, atoi(linebuf) + <span class="number">1</span>);</span><br><span class="line">V();</span><br><span class="line"></span><br><span class="line">fclose(fp); <span class="comment">// 防止意外解锁 放在 lockf 之后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">semid = semget(IPC_PRIVATE, <span class="number">1</span>, <span class="number">0600</span>); <span class="comment">// 有亲缘关系的IPC, key不是必须的，可以用IPC_PRIVATE</span></span><br><span class="line"><span class="keyword">if</span> (semid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;semget()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semctl(semid, <span class="number">0</span>, SETVAL, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;semctl()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="comment">// 互斥量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PROCNUM; i++) &#123;</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">func_add();</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PROCNUM; i++) &#123;</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">semctl(semid, <span class="number">0</span>, IPC_RMID);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共享内存">共享内存</h3><ul><li>shmget</li><li>shmop</li><li>shmctl</li></ul><p>比mmap实现的共享内存 复杂一点</p><p>指定<code>IPC_PRIVATE</code> 匿名IPC 用于有亲缘关系的IPC</p><p>没有亲缘关系就得<code>ftok</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MEMSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> shmid;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">char</span> *ptr;</span><br><span class="line"></span><br><span class="line">shmid = shmget(IPC_PRIVATE, MEMSIZE, IPC_CREAT | <span class="number">0600</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shmid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;shmget()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// child writes to shared memory</span></span><br><span class="line">ptr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ptr == (<span class="type">void</span>*) <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;shmat()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(ptr, <span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">shmdt(ptr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// parent reads from shared memory</span></span><br><span class="line">wait(<span class="literal">NULL</span>); <span class="comment">// wait for child to finish writing</span></span><br><span class="line"></span><br><span class="line">ptr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ptr == (<span class="type">void</span>*) <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;shmat()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(ptr);</span><br><span class="line">shmdt(ptr);</span><br><span class="line">shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>); <span class="comment">// remove shared memory</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络套接字socket">网络套接字socket</h2><ul><li>跨主机传输要注意的问题</li><li>报式套接字</li><li>流式套接字</li></ul><h3 id="跨主机问题">跨主机问题</h3><h4 id="字节序问题">字节序问题</h4><p>大端：低地址放高字节</p><p>小端：低地址放低字节</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240602105717506.png" alt="image-20240602105717506" style="zoom:50%;" /><p>主机字节序：host</p><p>网络字节序：network</p><p><em>to</em>_: htons(host to network short),htonl,ntohs,ntohl</p><p>通过 主机序 &lt;—-&gt; 网络序 这种统一方法 解决字节序问题</p><h4 id="对齐问题">对齐问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">&#125;;<span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>硬件存储的原理：字存储，半字存储</p><p>应用层解释：addr % 当前size 如果不能整除，就要对齐，32位64位对齐单位也不同</p><p>对齐是为了加快取值速度</p><p><mark>解决网络通信一定要禁止对齐</mark></p><h4 id="类型长度问题">类型长度问题</h4><p>sizeof(int) = ?  只是大概 double &gt; float &gt;= int</p><p>char有无符号？</p><p>解决：使用通用类型<code>int32_t</code>, <code>uint32_t</code>, <code>int8_t</code>, <code>uint8_t</code></p><h3 id="socket是什么">socket是什么</h3><p>抽象成了一个fd</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240602112535844.png" alt="image-20240602112535844" style="zoom:50%;" /><p>socket使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br></pre></td></tr></table></figure><p>用 domain协议族中某一个protocol协议实现 type类型的数据传输</p><p>函数说明</p><blockquote><p>socket()  creates an endpoint for communication and returns a file descriptor that refers to that endpoint.</p><p>On success, a file descriptor for the new socket is returned.  On error, -1 is returned, and errno is set appropriately.</p><p>The domain argument specifies a communication domain; this selects the protocol family which will be used  for  communication. These families are defined in &lt;sys/socket.h&gt;.</p><p>The socket has the indicated type, which specifies the communication semantics.</p></blockquote><p><mark>type类型</mark></p><table><thead><tr><th style="text-align:center">type</th><th style="text-align:left">description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>SOCK_STREAM</strong></td><td style="text-align:left">Provides sequenced, reliable, two-way, connection-based byte streams.        流式套接字，以字节为单位，不在意数据边界，一对一，点对点，不能实现多点通讯（TCP）</td></tr><tr><td style="text-align:center"><strong>SOCK_DGRAM</strong></td><td style="text-align:left">Supports datagrams (connectionless, unreliable messages of a fixed maximum length).                                                                                     报式套接字，以数据包为单位,可以实现多点通讯（UDP User Datagram Protocol）</td></tr><tr><td style="text-align:center"><strong>SOCK_SEQPACKET</strong></td><td style="text-align:left">Provides a sequenced, reliable, two-way connection-based data transmission path for datagrams of fixed maximum length;                                           消息队列</td></tr></tbody></table><h3 id="报式套接字">报式套接字</h3><ul><li>socket()</li><li>bind()</li><li>sendto()</li><li>recvfrom()</li><li>struct sockaddr_in 不同协议数据类型定义不同</li><li>inet_pton()</li><li>setsockopt()</li><li>getsockopt()</li><li>…</li></ul><p>被动端（服务器）：先运行（收包）</p><ol><li>拿socket</li><li>给socket地址（绑定本地端口）<strong>必须说明自己在哪</strong></li><li>收/发消息</li><li>关闭socket</li></ol><p>主动端：</p><ol><li>拿socket</li><li>给socket地址（可省略，随机分配一个端口）</li><li>发/收消息</li><li>关闭socket</li></ol><h4 id="基本使用">基本使用</h4><p><strong>proto.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PROTO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTO_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCVPORT <span class="string">&quot;1989&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> &#123;</span></span><br><span class="line"><span class="type">uint8_t</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int32_t</span> math;</span><br><span class="line"><span class="type">int32_t</span> chinese;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>rcver.c</strong></p><p>注意数据格式转换 htons, ntohl，inet_pton, inet_ntoa</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">laddr</span>;</span> <span class="comment">// local address</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span> <span class="comment">// remote address</span></span><br><span class="line"><span class="type">socklen_t</span> raddrlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> <span class="title">rbuf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不确定协议名字 protocol = 0 默认协议</span></span><br><span class="line">sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>); <span class="comment">/* IPPROTO_UDP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">laddr.sin_family = AF_INET;</span><br><span class="line">laddr.sin_port = htons(atoi(RCVPORT));</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;0.0.0.0&quot;</span>, &amp;laddr.sin_addr); <span class="comment">/* 0.0.0.0: any address */</span></span><br><span class="line"><span class="keyword">if</span> (bind(sd, (<span class="type">void</span> *)&amp;laddr, <span class="keyword">sizeof</span> laddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;bind()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* !!! */</span></span><br><span class="line">raddrlen = <span class="keyword">sizeof</span> raddr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">recvfrom(sd, &amp;rbuf, <span class="keyword">sizeof</span> rbuf, <span class="number">0</span>, (<span class="type">void</span> *)&amp;raddr, &amp;raddrlen);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Received message from %s:%d\n&quot;</span>, inet_ntoa(raddr.sin_addr), ntohs(raddr.sin_port));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NAME: %s\n&quot;</span>, rbuf.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MATH: %d\n&quot;</span>, ntohl(rbuf.math));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CHINESE: %d\n&quot;</span>, ntohl(rbuf.chinese));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>netstat -anu</code>查看 报式套接字 网络状态（UDP）</p><p><code>netstat -ant</code> 流式套接字 （TCP）</p><p><strong>snder.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> <span class="title">sbuf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;receiver_port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不确定协议名字 protocol = 0 默认协议</span></span><br><span class="line">sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>); <span class="comment">/* IPPROTO_UDP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind();</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(sbuf.name, <span class="string">&quot;soredake&quot;</span>);</span><br><span class="line">sbuf.math = htonl(rand() % <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">sbuf.chinese = htonl(rand() % <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">raddr.sin_family = AF_INET;</span><br><span class="line">raddr.sin_port = htons(atoi(RCVPORT));</span><br><span class="line">inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;raddr.sin_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sendto(sd, &amp;sbuf, <span class="keyword">sizeof</span> sbuf, <span class="number">0</span>, (<span class="type">void</span> *)&amp;raddr, <span class="keyword">sizeof</span> raddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;sendto()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p>这里把云服务器当成接收端，记得防火墙开放端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 UFW</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw allow 22/tcp</span><br><span class="line"><span class="comment"># 开放自定义端口（例如 8080）</span></span><br><span class="line">sudo ufw allow 8080/tcp</span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">sudo ufw status verbose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器当接收端</span></span><br><span class="line">./rcver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本机当发送端</span></span><br><span class="line">./snder IP</span><br></pre></td></tr></table></figure><h4 id="变长数据包">变长数据包</h4><p>proto.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PROTO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTO_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMEMAX (512 - 8 - 8) <span class="comment">// 512 bytes(udp suggest) - 8 bytes for math and chinese - 8 bytes for udp header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCVPORT <span class="string">&quot;1111&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变长实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> &#123;</span></span><br><span class="line"><span class="type">int32_t</span> math;</span><br><span class="line"><span class="type">int32_t</span> chinese;</span><br><span class="line"><span class="type">uint8_t</span> name[<span class="number">1</span>];</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>rcver.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">laddr</span>;</span> <span class="comment">// local address</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span> <span class="comment">// remote address</span></span><br><span class="line"><span class="type">socklen_t</span> raddrlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> *<span class="title">rbufp</span>;</span></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg_st) + NAMEMAX - <span class="number">1</span>;</span><br><span class="line">rbufp = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> (rbufp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;malloc()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不确定协议名字 protocol = 0 默认协议</span></span><br><span class="line">sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>); <span class="comment">/* IPPROTO_UDP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">laddr.sin_family = AF_INET;</span><br><span class="line">laddr.sin_port = htons(atoi(RCVPORT));</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;0.0.0.0&quot;</span>, &amp;laddr.sin_addr); <span class="comment">/* 0.0.0.0: any address */</span></span><br><span class="line"><span class="keyword">if</span> (bind(sd, (<span class="type">void</span> *)&amp;laddr, <span class="keyword">sizeof</span> laddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;bind()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* !!! */</span></span><br><span class="line">raddrlen = <span class="keyword">sizeof</span> raddr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">recvfrom(sd, rbufp, size, <span class="number">0</span>, (<span class="type">void</span> *)&amp;raddr, &amp;raddrlen);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Received message from %s:%d\n&quot;</span>, inet_ntoa(raddr.sin_addr), ntohs(raddr.sin_port));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NAME: %s\n&quot;</span>, rbufp-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MATH: %d\n&quot;</span>, ntohl(rbufp-&gt;math));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CHINESE: %d\n&quot;</span>, ntohl(rbufp-&gt;chinese));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>snder.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> *<span class="title">sbufp</span>;</span> <span class="comment">// 变长结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;receiver_port&gt; &lt;name&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 名字太长不发送</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[<span class="number">2</span>]) &gt;= NAMEMAX) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Name too long\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg_st) + <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">sbufp = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> (sbufp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;malloc()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不确定协议名字 protocol = 0 默认协议</span></span><br><span class="line">sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>); <span class="comment">/* IPPROTO_UDP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind();</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(sbufp-&gt;name, argv[<span class="number">2</span>]);</span><br><span class="line">sbufp-&gt;math = htonl(rand() % <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">sbufp-&gt;chinese = htonl(rand() % <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">raddr.sin_family = AF_INET;</span><br><span class="line">raddr.sin_port = htons(atoi(RCVPORT));</span><br><span class="line">inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;raddr.sin_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sendto(sd, sbufp, size, <span class="number">0</span>, (<span class="type">void</span> *)&amp;raddr, <span class="keyword">sizeof</span> raddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;sendto()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现多播">实现多播</h4><p>多点通讯</p><p><code>man 7 socket</code> 也可以 <code>man 7 udp / tcp / ip</code></p><p>Socket Options下描述</p><blockquote><p>SO_BROADCAST : Set or get the broadcast flag.  When enabled, datagram sockets are allowed to  send  packets to a broadcast address.  <strong>This option has no effect on stream-oriented sockets.</strong></p></blockquote><p><strong>rcver.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">laddr</span>;</span> <span class="comment">// local address</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span> <span class="comment">// remote address</span></span><br><span class="line"><span class="type">socklen_t</span> raddrlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> <span class="title">rbuf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不确定协议名字 protocol = 0 默认协议</span></span><br><span class="line">sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>); <span class="comment">/* IPPROTO_UDP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (setsockopt(sd, SOL_SOCKET, SO_BROADCAST, &amp;val, <span class="keyword">sizeof</span> val) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;setsockopt()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">laddr.sin_family = AF_INET;</span><br><span class="line">laddr.sin_port = htons(atoi(RCVPORT));</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;0.0.0.0&quot;</span>, &amp;laddr.sin_addr); <span class="comment">/* 0.0.0.0: any address */</span></span><br><span class="line"><span class="keyword">if</span> (bind(sd, (<span class="type">void</span> *)&amp;laddr, <span class="keyword">sizeof</span> laddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;bind()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* !!! */</span></span><br><span class="line">raddrlen = <span class="keyword">sizeof</span> raddr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">recvfrom(sd, &amp;rbuf, <span class="keyword">sizeof</span> rbuf, <span class="number">0</span>, (<span class="type">void</span> *)&amp;raddr, &amp;raddrlen);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Received message from %s:%d\n&quot;</span>, inet_ntoa(raddr.sin_addr), ntohs(raddr.sin_port));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NAME: %s\n&quot;</span>, rbuf.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MATH: %d\n&quot;</span>, ntohl(rbuf.math));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CHINESE: %d\n&quot;</span>, ntohl(rbuf.chinese));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>snder.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_st</span> <span class="title">sbuf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不确定协议名字 protocol = 0 默认协议</span></span><br><span class="line">sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>); <span class="comment">/* IPPROTO_UDP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多播</span></span><br><span class="line"><span class="type">int</span> val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (setsockopt(sd, SOL_SOCKET, SO_BROADCAST, &amp;val, <span class="keyword">sizeof</span>(val)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;setsockopt()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind();</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">memset</span>(&amp;sbuf, <span class="number">0</span>, <span class="keyword">sizeof</span> sbuf);</span><br><span class="line"><span class="built_in">strcpy</span>(sbuf.name, <span class="string">&quot;soredake&quot;</span>);</span><br><span class="line">sbuf.math = htonl(rand() % <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">sbuf.chinese = htonl(rand() % <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">raddr.sin_family = AF_INET;</span><br><span class="line">raddr.sin_port = htons(atoi(RCVPORT));</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;255.255.255.255&quot;</span>, &amp;raddr.sin_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sendto(sd, &amp;sbuf, <span class="keyword">sizeof</span> sbuf, <span class="number">0</span>, (<span class="type">void</span> *)&amp;raddr, <span class="keyword">sizeof</span> raddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;sendto()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="wireshark">wireshark</h4><p><code>sudo apt install wireshark</code>安装抓包器wireshark</p><p><code>sudo wireshark</code> 管理员启动wireshark 不然报 permisson denied</p><p>设置抓包范围条件，过滤包，expression表达式</p><p>如果抓不到 试着从 ens33 改成 any，加个端口筛选条件 tcp.port = xxx</p><p><mark>防止内存泄漏</mark></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(&amp;sbuf, <span class="number">0</span>, <span class="keyword">sizeof</span> sbuf);</span><br></pre></td></tr></table></figure><h4 id="UDP丢包-报">UDP丢包/报</h4><p><mark>TTL: time to leave 单位不是时间，指最多能经过几个路由</mark></p><ul><li>linux 64</li><li>windows: 128</li></ul><p>数值是足够用的，所以丢包不是因为TTL耗尽</p><p><mark>丢包由阻塞造成，网络传输中有等待队列</mark></p><p>页面一部分显示，一部分不显示，刷新（断点续传）</p><p><mark>解决：流控（流量控制，拥塞控制）  –&gt; 停等式流控</mark></p><h4 id="停等式流控">停等式流控</h4><p>发一个包，等待对方回应，确定对方收到包。</p><p>丢包率并没有降低，反而提高，data包可能丢，ack包也可能丢</p><p>只是为了确定对方一定能收到内容<br><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240602184322298.png" alt="image-20240602184322298" style="zoom: 50%;" /></p><p>还有一种情况，data包传给c端，但是ack丢了。RTT之后，s端只能认为是data包丢了，重发data包，但是c端发现两次的data包重复，但是可能是ack丢了s端重发，也有可能本来就是一样的内容。</p><p>所以需要给每一次data包加上编号。</p><p>而且ack也需要编号</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240602185122342.png" alt="image-20240602185122342" style="zoom: 50%;" /><p>一次发一个包效率太低 -&gt; <mark>TCP滑动窗口</mark></p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240602190034713.png" alt="image-20240602190034713" style="zoom: 33%;" /><p>但是s端拿到的ack不一定是第一个ack，同样的对方c端也不确定收到的是否是第一个包</p><p>所以对话之前要进行编号的约定（握手）</p><h4 id="TCP三次握手">TCP三次握手</h4><p>目的：约定编号，确定双方收发能力没问题</p><p>完成1、2次握手状态 —&gt; 半连接状态</p><p>半连接池： 存放半连接节点，之后进行第三次握手就行</p><p>攻击形式：半连接洪水，只进行前两次握手</p><p>解决：不用半连接池，发包互相带上cookie</p><p>cookie: hash((对端IP+port + 我端IP+port) &amp; SALT)</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240602190959210.png" alt="image-20240602190959210" style="zoom:50%;" /><h3 id="流式套接字">流式套接字</h3><p>C端（主动端）</p><ol><li>获取socket</li><li>给socket地址（可省略，给一个无用端口）</li><li>发送连接</li><li>收/发消息</li><li>关闭</li></ol><p>S端（被动端）</p><ol><li>获取socket</li><li>给地址，说明自己在哪</li><li>将socket置为监听模式</li><li>接收连接</li><li>收/发消息</li><li>关闭</li></ol><h4 id="basic">basic</h4><p>proto.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PROTO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTO_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVERPORT <span class="string">&quot;1111&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FMT_STAMP <span class="string">&quot;%lld\r\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>server.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IPSTRSIZE 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">server_job</span><span class="params">(<span class="type">int</span> sd)</span> &#123;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">len = <span class="built_in">sprintf</span>(buf, FMT_STAMP, (<span class="type">long</span> <span class="type">long</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">if</span> (send(sd, buf, len, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;send()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sd, newsd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">laddr</span>, <span class="title">raddr</span>;</span></span><br><span class="line"><span class="type">socklen_t</span> raddr_len;</span><br><span class="line"><span class="type">char</span> ipstr[IPSTRSIZE];</span><br><span class="line"></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">/* 0: defaut protocol IPPROTO_TCP, IPPROTO_SCTP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">laddr.sin_family = AF_INET;</span><br><span class="line">laddr.sin_port = htons(atoi(SERVERPORT));</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;0.0.0.0&quot;</span>, &amp;laddr.sin_addr); <span class="comment">/* INADDR_ANY */</span></span><br><span class="line"><span class="keyword">if</span> (bind(sd, (<span class="type">void</span> *)&amp;laddr, <span class="keyword">sizeof</span> laddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;bind()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (listen(sd, <span class="number">200</span>) &lt; <span class="number">0</span>) &#123; <span class="comment">/* backlog: max number of clients waiting to connect */</span></span><br><span class="line">perror(<span class="string">&quot;listen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">raddr_len = <span class="keyword">sizeof</span> raddr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">newsd = accept(sd, (<span class="type">void</span> *)&amp;raddr, &amp;raddr_len); <span class="comment">/* 不能用sd接值 容易被覆盖 */</span></span><br><span class="line"><span class="keyword">if</span> (newsd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno != EINTR &amp;&amp; errno != EAGAIN) &#123; <span class="comment">/* 真错 */</span></span><br><span class="line">perror(<span class="string">&quot;accept()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">/* 假错 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* inet_ntop: convert binary IP to string IP(点分式 192.168.1.1) */</span></span><br><span class="line"><span class="comment">/* inet_ntoa: 线程不安全 */</span></span><br><span class="line">inet_ntop(AF_INET, &amp;raddr.sin_addr, ipstr, IPSTRSIZE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client connected from %s:%d\n&quot;</span>, ipstr, ntohs(raddr.sin_port));</span><br><span class="line"></span><br><span class="line">server_job(newsd);</span><br><span class="line"></span><br><span class="line">close(newsd); <span class="comment">/* newsd是新产生的fd 不关闭会 导致内存泄漏 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ZONE_OFFSET 8</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span></span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> stamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;server IP&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind(); /* 可省  */</span></span><br><span class="line">raddr.sin_family = AF_INET;</span><br><span class="line">raddr.sin_port = htons(atoi(SERVERPORT));</span><br><span class="line">inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;raddr.sin_addr);</span><br><span class="line"><span class="keyword">if</span> (connect(sd, (<span class="type">void</span> *)&amp;raddr, <span class="keyword">sizeof</span> raddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;connect()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* unix: 一切皆文件 既然sd是文件描述符 那完全可以用IO去读写数据 */</span></span><br><span class="line">fp = fdopen(sd, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fdopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fscanf</span>(fp, FMT_STAMP, &amp;stamp) &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Invalid stamp format\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stamp: %lld\n&quot;</span>, stamp);</span><br><span class="line"></span><br><span class="line">stamp += ZONE_OFFSET * <span class="number">3600</span>; <span class="comment">// 时区问题</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tm_info</span>;</span></span><br><span class="line">    <span class="type">char</span> tbuf[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    tm_info = gmtime((<span class="type">time_t</span> *)&amp;stamp); </span><br><span class="line">    strftime(tbuf, <span class="number">20</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, tm_info); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Formatted datetime: %s\n&quot;</span>, tbuf);</span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// recv();</span></span><br><span class="line"><span class="comment">// close();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nc IP PORT</code> / <code>telnet IP port</code>  充当客户端测试</p><p>记得开放防火墙端口，腾讯云控制台和终端都要</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw allow 1111/tcp</span><br></pre></td></tr></table></figure><p>client端最后使用 标准IO方式 读写数据（unix：一切皆文件），sd就是文件描述符，fdopen可以转换成文件指针</p><h4 id="并发版">并发版</h4><p>程序现在只是一个个响应，如果一个响应过长，又来一个。</p><p>fork()子进程 子进程去干活</p><blockquote><p>为什么父进程要 close(newsd); 子进程要close(sd); ？</p><p>父子进程各有一份newsd和sd，不关闭自己不需要的会导致阻塞。</p><p>父进程为什么不wait();？</p><p>while循环内wait会造成阻塞，要wait也是在循环外，但循环外的代码也执行不到，也就没意义了</p></blockquote><p>server.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IPSTRSIZE 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">server_job</span><span class="params">(<span class="type">int</span> sd)</span> &#123;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">len = <span class="built_in">sprintf</span>(buf, FMT_STAMP, (<span class="type">long</span> <span class="type">long</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">if</span> (send(sd, buf, len, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;send()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>); <span class="comment">// 工作5s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sd, newsd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">laddr</span>, <span class="title">raddr</span>;</span></span><br><span class="line"><span class="type">socklen_t</span> raddr_len;</span><br><span class="line"><span class="type">char</span> ipstr[IPSTRSIZE];</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">/* 0: defaut protocol IPPROTO_TCP, IPPROTO_SCTP */</span></span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* 解决bind(): port already in use  释放端口 */</span></span><br><span class="line"><span class="keyword">if</span> (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &amp;val, <span class="keyword">sizeof</span>(val)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;setsockopt()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">laddr.sin_family = AF_INET;</span><br><span class="line">laddr.sin_port = htons(atoi(SERVERPORT));</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;0.0.0.0&quot;</span>, &amp;laddr.sin_addr); <span class="comment">/* INADDR_ANY */</span></span><br><span class="line"><span class="keyword">if</span> (bind(sd, (<span class="type">void</span> *)&amp;laddr, <span class="keyword">sizeof</span> laddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;bind()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (listen(sd, <span class="number">200</span>) &lt; <span class="number">0</span>) &#123; <span class="comment">/* backlog: max number of clients waiting to connect */</span></span><br><span class="line">perror(<span class="string">&quot;listen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">raddr_len = <span class="keyword">sizeof</span> raddr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">newsd = accept(sd, (<span class="type">void</span> *)&amp;raddr, &amp;raddr_len); <span class="comment">/* 不能用sd接值 容易被覆盖 */</span></span><br><span class="line"><span class="keyword">if</span> (newsd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno != EINTR &amp;&amp; errno != EAGAIN) &#123; <span class="comment">/* 真错 */</span></span><br><span class="line">perror(<span class="string">&quot;accept()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">/* 假错 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">close(sd); <span class="comment">/* 子进程用不到 sd */</span></span><br><span class="line"></span><br><span class="line">inet_ntop(AF_INET, &amp;raddr.sin_addr, ipstr, IPSTRSIZE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client connected from %s:%d\n&quot;</span>, ipstr, ntohs(raddr.sin_port));</span><br><span class="line">server_job(newsd);</span><br><span class="line">close(newsd); <span class="comment">/* newsd是新产生的fd 不关闭会 导致内存泄漏 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">/* 防止无限fork进程 子进程干完活就退出 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(newsd); <span class="comment">/* 父进程用不到 newsd 因为父子进程一摸一样 都有sd newsd 不写就会一直堵塞 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进程池版-todo">进程池版 todo</h4><p>上面并发版的问题在于，如果来了2000个响应，要fork2000个进程吗？</p><p>所以又回到之前，使用进程池限制资源的使用量。</p><h4 id="HTTP请求图片抓包">HTTP请求图片抓包</h4><p>下载apache2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install httpd <span class="comment"># centOS用这个</span></span><br><span class="line">sudo apt-get install apache2 <span class="comment"># ubuntu用这个</span></span><br></pre></td></tr></table></figure><p>开启防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Apache&#x27;</span></span><br><span class="line">sudo ufw allow <span class="string">&#x27;Apache Secure&#x27;</span></span><br><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/apache2/apache2.conf /etc/apache2/apache2.conf.bak</span><br><span class="line">sudo vim etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure><p>添加下面内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">var</span>/<span class="attr">www</span>/<span class="attr">html</span>&quot;&gt;</span></span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apache2 </span><br></pre></td></tr></table></figure><p>firefox输入 127.0.0.1/test.jpg</p><p>如果没权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> www-data:www-data /var/www/html/test.jpg  <span class="comment"># Debian 系 ubuntu</span></span><br><span class="line">sudo <span class="built_in">chown</span> apache:apache /var/www/html/test.jpg  <span class="comment"># Red Hat 系 CentOs</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">chmod</span> 644 /var/www/html/test.jpg</span><br></pre></td></tr></table></figure><p>刷新</p><p>抓包</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240603162356939.png" alt="image-20240603162356939" style="zoom: 67%;" /><h4 id="HTTP1-0下载图片">HTTP1.0下载图片</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">raddr</span>;</span></span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;server IP&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind(); /* 可省  */</span></span><br><span class="line">raddr.sin_family = AF_INET;</span><br><span class="line">raddr.sin_port = htons(<span class="number">80</span>);</span><br><span class="line">inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;raddr.sin_addr);</span><br><span class="line"><span class="keyword">if</span> (connect(sd, (<span class="type">void</span> *)&amp;raddr, <span class="keyword">sizeof</span> raddr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;connect()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* unix: 一切皆文件 既然sd是文件描述符 那完全可以用IO去读写数据 */</span></span><br><span class="line">fp = fdopen(sd, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fdopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;GET /test.jpg\r\n\r\n&quot;</span>);</span><br><span class="line">fflush(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">len = fread(buf, <span class="number">1</span>, BUFSIZE, fp);</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">fwrite(buf, <span class="number">1</span>, len, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(sd);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gcc webdl.c &amp; ./a.out 127.0.0.1</code> 终端输出乱码</p><p>用eog图片解码器就行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./a.out 127.0.0.1 &gt; /tmp/out</span><br><span class="line">eog /tmp/out </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级IO</title>
      <link href="/2024/04/28/C%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7IO/"/>
      <url>/2024/04/28/C%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7IO/</url>
      
        <content type="html"><![CDATA[<h1>高级IO</h1><p>阻塞IO：盲等</p><p>非阻塞IO：尝试等</p><p>EINTR / EAGAIN:set error number后的假错</p><p>有限状态机编程：解决复杂问题</p><h2 id="非阻塞IO">非阻塞IO</h2><ul><li>简单流程 ：自然流程是结构化的</li><li>复杂流程 ：自然流程不是结构化的</li></ul><p>数据中继（relay）：两个设备不断数据交换。这是一个通用模型，放大之后会有很多应用。拦截服务</p><p>阻塞方式实现：①单线程完成不了 ② 两个线程，一个负责rl - wr 一个负责 rr - wl 还能完成。</p><p>非阻塞方式：单线程也可完成</p><p>设备数量增多，负担加大：①fork ② 多线程，下面的这些进程或线程分布在不同服务器上，主机拿到一个请求，下面那个主机负担比较小就分配给谁，负载均衡。</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240608105048357.png" alt="image-20240608105048357" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TTY1 <span class="string">&quot;/dev/tty11&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY2 <span class="string">&quot;/dev/tty12&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">STATE_R = <span class="number">1</span>,</span><br><span class="line">STATE_W,</span><br><span class="line">STATE_EX,</span><br><span class="line">STATE_T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> state;</span><br><span class="line"><span class="type">int</span> sfd;</span><br><span class="line"><span class="type">int</span> dfd;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="type">char</span> *errstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">fsm_driver</span><span class="params">(<span class="keyword">struct</span> fsm_st *fsm)</span> &#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="keyword">switch</span>(fsm-&gt;state) &#123;</span><br><span class="line"><span class="keyword">case</span> STATE_R:</span><br><span class="line">fsm-&gt;len = read(fsm-&gt;sfd, fsm-&gt;buf, BUFSIZE);</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fsm-&gt;len &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errstr = <span class="string">&quot;read()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">fsm-&gt;pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_W:</span><br><span class="line">ret = write(fsm-&gt;dfd, fsm-&gt;buf + fsm-&gt;pos, fsm-&gt;len);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errstr = <span class="string">&quot;write()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;pos += ret;</span><br><span class="line">fsm-&gt;len -= ret;</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_EX:</span><br><span class="line">perror(fsm-&gt;errstr);</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_T:</span><br><span class="line"><span class="comment">/* 两个设备终止  */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">abort</span>(); <span class="comment">/* 认为制造异常 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">relay</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span> &#123;</span><br><span class="line"><span class="type">int</span> fd1_save, fd2_save;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> <span class="title">fsm12</span>, <span class="title">fsm21</span>;</span></span><br><span class="line"></span><br><span class="line">fd1_save = fcntl(fd1, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fd2_save = fcntl(fd2, F_GETFL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save | O_NONBLOCK);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">fsm12.state = STATE_R;</span><br><span class="line">fsm12.sfd = fd1;</span><br><span class="line">fsm12.dfd = fd2;</span><br><span class="line">fsm21.state = STATE_R;</span><br><span class="line">fsm21.sfd = fd2;</span><br><span class="line">fsm21.dfd = fd1;</span><br><span class="line"></span><br><span class="line">write(fd1, <span class="string">&quot;TTY1\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line">write(fd2, <span class="string">&quot;TTY2\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">while</span>(fsm12.state != STATE_T || fsm21.state != STATE_T) &#123;</span><br><span class="line">fsm_driver(&amp;fsm12);</span><br><span class="line">fsm_driver(&amp;fsm21);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 恢复fd */</span></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd1, fd2;</span><br><span class="line">fd1 = open(TTY1, O_RDWR); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY1 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd2 = open(TTY2, O_RDWR | O_NONBLOCK); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY2 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">relay(fd1, fd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(fd1);</span><br><span class="line">close(fd2);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ctrl+alt+F11 / F12</p><p>ctrl+alt+F2返回之前的图形化界面</p><p>linux 画图软件 ： dia 图片可以转文本格式</p></blockquote><h2 id="IO多路转接-复用">IO多路转接 / 复用</h2><p>解决IO盲等的问题</p><p>改进方法：监视fd的行为，当fd达到感兴趣的状态时，再做下一步。</p><p>之前的relay.c 一直在假错EAGAIN那里循环（刚开始没数据），也就是在盲等</p><p>监视现场/任务：到了感兴趣的部分（有数据来了）才去推动状态机进行下一步，而不是一直盲等</p><ul><li>select() 移植性强  但古老，设计有缺陷</li><li>⭐poll() 可移植</li><li>epoll()：Linux上的方言，不能移植，与poll()设计相似</li></ul><p>基本流程</p><ul><li>布置监视任务</li><li>监视</li><li>查看监视结果</li></ul><h3 id="select">select</h3><blockquote><p>select(-1, NULL, NULL, NULL, timeout) 可以作为一个 安全的sleep用</p><p>以事件为单位组织文件描述符fd</p><p>select缺点</p><ul><li>监视状态单一 除了读写 就是异常</li><li>出现假错必须重新布置任务，因为 rset, wset被冲掉，监视现场没了</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TTY1 <span class="string">&quot;/dev/tty11&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY2 <span class="string">&quot;/dev/tty12&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">STATE_R = <span class="number">1</span>,</span><br><span class="line">STATE_W,</span><br><span class="line">STATE_AUTO, <span class="comment">/* 分界位 */</span></span><br><span class="line">STATE_EX,</span><br><span class="line">STATE_T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> state;</span><br><span class="line"><span class="type">int</span> sfd;</span><br><span class="line"><span class="type">int</span> dfd;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="type">char</span> *errsetr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">fsm_driver</span><span class="params">(<span class="keyword">struct</span> fsm_st *fsm)</span> &#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="keyword">switch</span>(fsm-&gt;state) &#123;</span><br><span class="line"><span class="keyword">case</span> STATE_R:</span><br><span class="line">fsm-&gt;len = read(fsm-&gt;sfd, fsm-&gt;buf, BUFSIZE);</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fsm-&gt;len &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errsetr = <span class="string">&quot;read()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">fsm-&gt;pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_W:</span><br><span class="line">ret = write(fsm-&gt;dfd, fsm-&gt;buf + fsm-&gt;pos, fsm-&gt;len);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errsetr = <span class="string">&quot;write()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;pos += ret;</span><br><span class="line">fsm-&gt;len -= ret;</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_EX:</span><br><span class="line">perror(fsm-&gt;errsetr);</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_T:</span><br><span class="line"><span class="comment">/* 两个设备终止  */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">abort</span>(); <span class="comment">/* 认为制造异常 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">relay</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span> &#123;</span><br><span class="line"><span class="type">int</span> fd1_save, fd2_save;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> <span class="title">fsm12</span>, <span class="title">fsm21</span>;</span></span><br><span class="line">fd_set rset, wset;</span><br><span class="line"></span><br><span class="line">fd1_save = fcntl(fd1, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fd2_save = fcntl(fd2, F_GETFL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save | O_NONBLOCK);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">fsm12.state = STATE_R;</span><br><span class="line">fsm12.sfd = fd1;</span><br><span class="line">fsm12.dfd = fd2;</span><br><span class="line">fsm21.state = STATE_R;</span><br><span class="line">fsm21.sfd = fd2;</span><br><span class="line">fsm21.dfd = fd1;</span><br><span class="line"></span><br><span class="line">write(fd1, <span class="string">&quot;TTY1\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line">write(fd2, <span class="string">&quot;TTY2\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fsm12.state != STATE_T || fsm21.state != STATE_T) &#123;</span><br><span class="line"><span class="comment">/* 布置任务 */</span></span><br><span class="line">FD_ZERO(&amp;rset);</span><br><span class="line">FD_ZERO(&amp;wset);</span><br><span class="line"><span class="keyword">if</span> (fsm12.state == STATE_R)</span><br><span class="line">FD_SET(fsm12.sfd, &amp;rset);</span><br><span class="line"><span class="keyword">if</span> (fsm12.state == STATE_W)</span><br><span class="line">FD_SET(fsm12.dfd, &amp;wset);</span><br><span class="line"><span class="keyword">if</span> (fsm21.state == STATE_R)</span><br><span class="line">FD_SET(fsm21.sfd, &amp;rset);</span><br><span class="line"><span class="keyword">if</span> (fsm21.state == STATE_W)</span><br><span class="line">FD_SET(fsm21.dfd, &amp;wset);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fsm12.state &lt; STATE_AUTO || fsm21.state &lt; STATE_AUTO) &#123;</span><br><span class="line"><span class="comment">/* 监视任务 */</span></span><br><span class="line"><span class="keyword">if</span> (select(max(fd1, fd2) + <span class="number">1</span>, &amp;rset, &amp;wset, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">perror(<span class="string">&quot;select()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看监视结果 */</span></span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(fd1, &amp;rset) || FD_ISSET(fd2, &amp;wset) || fsm12.state &gt; STATE_AUTO)</span><br><span class="line">fsm_driver(&amp;fsm12);</span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(fd2, &amp;rset) || FD_ISSET(fd1, &amp;wset) || fsm21.state &gt; STATE_AUTO)</span><br><span class="line">fsm_driver(&amp;fsm21);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 恢复fd */</span></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd1, fd2;</span><br><span class="line">fd1 = open(TTY1, O_RDWR); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY1 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd2 = open(TTY2, O_RDWR | O_NONBLOCK); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY2 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">relay(fd1, fd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(fd1);</span><br><span class="line">close(fd2);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poll">poll</h3><blockquote><p>以文件描述符fd 组织事件</p><p>这里的事件就是读写操作</p><p>因为poll设计中 已经发生的事件和感兴趣事件存的是两个位置，所以不需要重新布置监视任务，while循环即可</p><p>而且poll能监视的事件类型更多，理论上可以16种</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TTY1 <span class="string">&quot;/dev/tty11&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY2 <span class="string">&quot;/dev/tty12&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">STATE_R = <span class="number">1</span>,</span><br><span class="line">STATE_W,</span><br><span class="line">STATE_AUTO, <span class="comment">/* 分界位 */</span></span><br><span class="line">STATE_EX,</span><br><span class="line">STATE_T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> state;</span><br><span class="line"><span class="type">int</span> sfd;</span><br><span class="line"><span class="type">int</span> dfd;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="type">char</span> *errsetr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">fsm_driver</span><span class="params">(<span class="keyword">struct</span> fsm_st *fsm)</span> &#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="keyword">switch</span>(fsm-&gt;state) &#123;</span><br><span class="line"><span class="keyword">case</span> STATE_R:</span><br><span class="line">fsm-&gt;len = read(fsm-&gt;sfd, fsm-&gt;buf, BUFSIZE);</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fsm-&gt;len &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errsetr = <span class="string">&quot;read()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">fsm-&gt;pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_W:</span><br><span class="line">ret = write(fsm-&gt;dfd, fsm-&gt;buf + fsm-&gt;pos, fsm-&gt;len);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errsetr = <span class="string">&quot;write()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;pos += ret;</span><br><span class="line">fsm-&gt;len -= ret;</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_EX:</span><br><span class="line">perror(fsm-&gt;errsetr);</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_T:</span><br><span class="line"><span class="comment">/* 两个设备终止  */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">abort</span>(); <span class="comment">/* 人为制造异常 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">relay</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span> &#123;</span><br><span class="line"><span class="type">int</span> fd1_save, fd2_save;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> <span class="title">fsm12</span>, <span class="title">fsm21</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfd</span>[2];</span></span><br><span class="line"></span><br><span class="line">fd1_save = fcntl(fd1, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fd2_save = fcntl(fd2, F_GETFL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save | O_NONBLOCK);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">fsm12.state = STATE_R;</span><br><span class="line">fsm12.sfd = fd1;</span><br><span class="line">fsm12.dfd = fd2;</span><br><span class="line">fsm21.state = STATE_R;</span><br><span class="line">fsm21.sfd = fd2;</span><br><span class="line">fsm21.dfd = fd1;</span><br><span class="line"></span><br><span class="line">write(fd1, <span class="string">&quot;TTY1\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line">write(fd2, <span class="string">&quot;TTY2\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">pfd[<span class="number">0</span>].fd = fd1;</span><br><span class="line">pfd[<span class="number">1</span>].fd = fd2;</span><br><span class="line"><span class="keyword">while</span>(fsm12.state != STATE_T || fsm21.state != STATE_T) &#123;</span><br><span class="line"><span class="comment">/* 布置任务 */</span></span><br><span class="line">pfd[<span class="number">0</span>].events = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (fsm12.state == STATE_R)</span><br><span class="line">pfd[<span class="number">0</span>].events |= POLLIN;</span><br><span class="line"><span class="keyword">if</span> (fsm21.state == STATE_W)</span><br><span class="line">pfd[<span class="number">0</span>].events |= POLLOUT;</span><br><span class="line"></span><br><span class="line">pfd[<span class="number">1</span>].events = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (fsm12.state == STATE_W)</span><br><span class="line">pfd[<span class="number">1</span>].events |= POLLOUT;</span><br><span class="line"><span class="keyword">if</span> (fsm21.state == STATE_R)</span><br><span class="line">pfd[<span class="number">1</span>].events |= POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fsm12.state &lt; STATE_AUTO || fsm21.state &lt; STATE_AUTO) &#123;</span><br><span class="line"><span class="comment">/* 监视任务 */</span></span><br><span class="line"><span class="keyword">while</span> (poll(pfd, <span class="number">2</span>, <span class="number">-1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">perror(<span class="string">&quot;poll()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看监视结果 */</span></span><br><span class="line"><span class="keyword">if</span> (pfd[<span class="number">0</span>].revents &amp; POLLIN || pfd[<span class="number">1</span>].revents &amp; POLLOUT || fsm12.state &gt; STATE_AUTO)</span><br><span class="line">fsm_driver(&amp;fsm12);</span><br><span class="line"><span class="keyword">if</span> (pfd[<span class="number">1</span>].revents &amp; POLLIN || pfd[<span class="number">0</span>].revents &amp; POLLOUT || fsm21.state &gt; STATE_AUTO)</span><br><span class="line">fsm_driver(&amp;fsm21);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 恢复fd */</span></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd1, fd2;</span><br><span class="line">fd1 = open(TTY1, O_RDWR); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY1 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd2 = open(TTY2, O_RDWR | O_NONBLOCK); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY2 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">relay(fd1, fd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(fd1);</span><br><span class="line">close(fd2);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="epoll">epoll</h3><blockquote><p>Linux方言，不能移植</p><p>封装了poll，与poll使用相似</p></blockquote><ul><li>epoll_create</li><li>epoll_ctl</li><li>epoll_wait</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TTY1 <span class="string">&quot;/dev/tty11&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY2 <span class="string">&quot;/dev/tty12&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">STATE_R = <span class="number">1</span>,</span><br><span class="line">STATE_W,</span><br><span class="line">STATE_AUTO, <span class="comment">/* 分界位 */</span></span><br><span class="line">STATE_EX,</span><br><span class="line">STATE_T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> state;</span><br><span class="line"><span class="type">int</span> sfd;</span><br><span class="line"><span class="type">int</span> dfd;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="type">char</span> *errsetr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">fsm_driver</span><span class="params">(<span class="keyword">struct</span> fsm_st *fsm)</span> &#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="keyword">switch</span>(fsm-&gt;state) &#123;</span><br><span class="line"><span class="keyword">case</span> STATE_R:</span><br><span class="line">fsm-&gt;len = read(fsm-&gt;sfd, fsm-&gt;buf, BUFSIZE);</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fsm-&gt;len &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errsetr = <span class="string">&quot;read()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">fsm-&gt;pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_W:</span><br><span class="line">ret = write(fsm-&gt;dfd, fsm-&gt;buf + fsm-&gt;pos, fsm-&gt;len);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;state = STATE_EX;</span><br><span class="line">fsm-&gt;errsetr = <span class="string">&quot;write()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fsm-&gt;pos += ret;</span><br><span class="line">fsm-&gt;len -= ret;</span><br><span class="line"><span class="keyword">if</span> (fsm-&gt;len == <span class="number">0</span>)</span><br><span class="line">fsm-&gt;state = STATE_R;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">fsm-&gt;state = STATE_W;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_EX:</span><br><span class="line">perror(fsm-&gt;errsetr);</span><br><span class="line">fsm-&gt;state = STATE_T;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STATE_T:</span><br><span class="line"><span class="comment">/* 两个设备终止  */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">abort</span>(); <span class="comment">/* 认为制造异常 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">relay</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span> &#123;</span><br><span class="line"><span class="type">int</span> fd1_save, fd2_save;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsm_st</span> <span class="title">fsm12</span>, <span class="title">fsm21</span>;</span></span><br><span class="line"><span class="type">int</span> epfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line"></span><br><span class="line">fd1_save = fcntl(fd1, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fd2_save = fcntl(fd2, F_GETFL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save | O_NONBLOCK);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">fsm12.state = STATE_R;</span><br><span class="line">fsm12.sfd = fd1;</span><br><span class="line">fsm12.dfd = fd2;</span><br><span class="line">fsm21.state = STATE_R;</span><br><span class="line">fsm21.sfd = fd2;</span><br><span class="line">fsm21.dfd = fd1;</span><br><span class="line"></span><br><span class="line">write(fd1, <span class="string">&quot;TTY1\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line">write(fd2, <span class="string">&quot;TTY2\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">epfd = epoll_create(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (epfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;epoll_create()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ev.events = <span class="number">0</span>;</span><br><span class="line">ev.data.fd = fd1;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd1, &amp;ev);</span><br><span class="line">ev.events = <span class="number">0</span>;</span><br><span class="line">ev.data.fd = fd2;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd2, &amp;ev);</span><br><span class="line"><span class="keyword">while</span>(fsm12.state != STATE_T || fsm21.state != STATE_T) &#123;</span><br><span class="line"><span class="comment">/* 布置任务 */</span></span><br><span class="line">ev.events = <span class="number">0</span>;</span><br><span class="line">ev.data.fd = fd1;</span><br><span class="line"><span class="keyword">if</span> (fsm12.state == STATE_R)</span><br><span class="line">ev.events |= EPOLLIN;</span><br><span class="line"><span class="keyword">if</span> (fsm21.state == STATE_W)</span><br><span class="line">ev.events |= EPOLLOUT;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_MOD, fd1, &amp;ev);</span><br><span class="line"></span><br><span class="line">ev.events = <span class="number">0</span>;</span><br><span class="line">ev.data.fd = fd2;</span><br><span class="line"><span class="keyword">if</span> (fsm12.state == STATE_W)</span><br><span class="line">ev.events |= EPOLLOUT;</span><br><span class="line"><span class="keyword">if</span> (fsm21.state == STATE_R)</span><br><span class="line">ev.events |= EPOLLIN;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_MOD, fd2, &amp;ev);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fsm12.state &lt; STATE_AUTO || fsm21.state &lt; STATE_AUTO) &#123;</span><br><span class="line"><span class="comment">/* 监视任务 */</span></span><br><span class="line"><span class="keyword">while</span> (epoll_wait(epfd, &amp;ev, <span class="number">1</span>, <span class="number">-1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">perror(<span class="string">&quot;epoll_wait()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看监视结果 */</span></span><br><span class="line"><span class="keyword">if</span> (ev.data.fd == fd1 &amp;&amp; ev.events &amp; EPOLLIN \</span><br><span class="line">|| ev.data.fd == fd2 &amp;&amp; ev.events &amp; EPOLLOUT \</span><br><span class="line">|| fsm12.state &gt; STATE_AUTO)</span><br><span class="line">fsm_driver(&amp;fsm12);</span><br><span class="line"><span class="keyword">if</span> (ev.data.fd == fd2 &amp;&amp; ev.events &amp; EPOLLIN \</span><br><span class="line">|| ev.data.fd == fd1 &amp;&amp; ev.events &amp; EPOLLOUT \</span><br><span class="line">|| fsm21.state &gt; STATE_AUTO)</span><br><span class="line">fsm_driver(&amp;fsm21);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 恢复fd */</span></span><br><span class="line">fcntl(fd1, F_SETFL, fd1_save);</span><br><span class="line">fcntl(fd2, F_SETFL, fd2_save);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd1, fd2;</span><br><span class="line">fd1 = open(TTY1, O_RDWR); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY1 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd2 = open(TTY2, O_RDWR | O_NONBLOCK); <span class="comment">/* 假设用户操作 */</span></span><br><span class="line"><span class="keyword">if</span> (fd2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open TTY2 failed&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">relay(fd1, fd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(fd1);</span><br><span class="line">close(fd2);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他读写函数">其他读写函数</h2><ul><li>readv</li><li>writev</li><li>readn</li><li>writen</li></ul><h2 id="存储映射IO">存储映射IO</h2><ul><li>mmap() 内存共享      ————     替换 malloc free</li><li>munmap()</li></ul><p>计算一个文件中有多少 字符a</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数 一个文件中有多少 字符a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> *str;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statres</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fstat(fd, &amp;statres) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fstat()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str = mmap(<span class="literal">NULL</span>, statres.st_size, PROT_READ, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (str == MAP_FAILED) &#123;</span><br><span class="line">perror(<span class="string">&quot;mmap()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; statres.st_size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The file %s has %d &#x27;a&#x27; characters.\n&quot;</span>, argv[<span class="number">1</span>], count);</span><br><span class="line"></span><br><span class="line">munmap(str, statres.st_size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现共享内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MEMSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用mmap 实现 shared memory、实现父子IPC</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *ptr;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line">ptr = mmap(<span class="literal">NULL</span>, MEMSIZE, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line">munmap(ptr, MEMSIZE);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// child write</span></span><br><span class="line"><span class="built_in">strcpy</span>(ptr, <span class="string">&quot;Hello, i am child process!&quot;</span>);</span><br><span class="line">munmap(ptr, MEMSIZE);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parent read</span></span><br><span class="line">wait(<span class="literal">NULL</span>); <span class="comment">// wait for child write over</span></span><br><span class="line"><span class="built_in">puts</span>(ptr);</span><br><span class="line">munmap(ptr, MEMSIZE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件锁">文件锁</h2><ul><li>fcntl()</li><li>lockf()</li><li>flock()</li></ul><p>多进程并发</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROCNUM 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FNAME <span class="string">&quot;/tmp/out&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func_add</span><span class="params">()</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> linebuf[BUFSIZE];</span><br><span class="line">fp = fopen(FNAME, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd = fileno(fp);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fileno()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lockf(fd, F_LOCK, <span class="number">0</span>); <span class="comment">// 加锁</span></span><br><span class="line">fgets(linebuf, BUFSIZE, fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">sleep(<span class="number">1</span>); <span class="comment">// 放大故障</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, atoi(linebuf) + <span class="number">1</span>);</span><br><span class="line">lockf(fd, F_ULOCK, <span class="number">0</span>); <span class="comment">// 解锁</span></span><br><span class="line">fclose(fp); <span class="comment">// 防止意外解锁 放在 lockf 之后</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PROCNUM; i++) &#123;</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">func_add();</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PROCNUM; i++) &#123;</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO</title>
      <link href="/2024/04/23/C%E8%AF%AD%E8%A8%80/IO/"/>
      <url>/2024/04/23/C%E8%AF%AD%E8%A8%80/IO/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-文件种类">linux 文件种类</h2><ol><li>普通文件 -</li><li>目录文件 d</li><li>管道文件 p：一种用于进程间通信的特殊文件，也称为命名管道FIFO。</li><li>套接字文件s：一种用于网络间通信的特殊文件。</li><li>链接文件l：用于间接访问另外一个目标文件，相当于Windows快捷方式。</li><li>字符设备文件c：字符设备在应用层的访问接口。触摸屏 、液晶屏、键盘、鼠标</li><li>块设备文件b：块设备在应用层的访问接口。硬盘、U盘 、光盘</li></ol><blockquote><p>ls -l 第一列的第一个字符 就代表文件种类</p></blockquote><h2 id="IO简介">IO简介</h2><p>I/O是在内存和外部设备（磁盘驱动器、网络、终端）之间复制数据的过程。输入是从外部 设备复制到内存，输出是从内存复制到外部设备。</p><p>在Linux系统中所有的I/O设备都被映射称为文件，所有的输入输出都被当做相应文件的读和写来执行， 所以内核提供了系统级的I/O函数接口，使得所有输入输出都以统一且一致的方式来执行。</p><p>文件读写的过程</p><ol><li>打开文件，返回一个非负整数，叫做描述符</li><li><strong>每个进程都默认打开三个描述符</strong><ol><li>标准输入 STDIN_FILENO（描述符0）</li><li>标准输出  STDOUT_FILENO（描述符1）</li><li>标准出错 STDERR_FILENO（描述符2）</li></ol></li><li>读写文件，读就是从文件复制n个字节到内存，写就是从内存复制n个字节到文件。</li><li><strong>文件偏移：默认打开文件是从文件开头起始的字节偏移量，可以使用seek来操作。</strong></li><li><strong>关闭文件。</strong></li></ol><p><strong>文件描述符fd 是什么？</strong></p><p>打开或新建文件后，Linux会返回一个非负整数，就是文件描述符，从0开始分配，012是预先分配好的，分别是stdin，stdout，stderr，fd相当于标准IO中的文件指针fp。</p><p><strong>另外文件描述符实际上也标记了打开的文件，之后 read, write, lseek函数的第一个参数都是这个文件描述符</strong></p><p>在 Linux 系统中，不能无限制打开很多的文件</p><p>查看最大限制命令  <code>ulimit -n</code></p><p><strong>被占用的012定义在哪里?</strong></p><p><code>在程序执行的时候，就会默认打开3个文件</code>，分别是&quot;标准输入&quot;、“标准输出”、“标准出错”，他们其实是一个宏定义来 的，是被定义在一个头文件中，头文件路径：/usr/include/unistd.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_FILENO    0       <span class="comment">/* Standard input.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_FILENO   1       <span class="comment">/* Standard output.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_FILENO   2       <span class="comment">/* Standard error output.  */</span></span></span><br></pre></td></tr></table></figure><h2 id="文件IO">文件IO</h2><h3 id="文件IO-标准IO">文件IO/标准IO</h3><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240522093609761.png" alt="image-20240522093609761" style="zoom: 67%;" /><p>⭐<strong>标准IO是应用程序和库函数之间的接口，由C库提供，与操作系统无关，代码迁移简单</strong></p><p>⭐文件IO、又叫系统IO、系统调用，<strong>是库函数与操作系统之间的接口</strong>，接近底层，不同的OS的实现也不同，比如ubuntu这里是open，可能在其他操作系统里函数名不同且实现也不同。</p><p>⭐系统IO没有缓冲机制，标准IO有缓冲机制。</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240522093706298.png" alt="image-20240522093706298" style="zoom:67%;" /><p><strong>系统调用是什么？</strong></p><p>用户不能直接操作内核，所以在内核提供了接口供用户调用，这个就是系统调用。</p><p>文件IO就是系统调用。标准IO是再向上一层的封装，它在用户空间添加了缓冲区，就是在内存申请一块空间用来存放读写的数据，这也是为什么它有缓冲机制，而文件IO没有。</p><p><strong>为什么要搞两套？直接用系统IO不行吗？</strong></p><p>因为系统不同 linux，mac，windows，如果直接系统调用，移植代码就很麻烦。所以主流操作系统都实现了c库，而我们只需要调用c库就行，而不需要改很多代码。</p><h3 id="第一个读写程序">第一个读写程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd1, fd2;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">fd1 = open(<span class="string">&quot;data.txt&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (fd1 == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open data.txt&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd2 = open(<span class="string">&quot;file.txt&quot;</span>, O_WRONLY | O_CREAT, <span class="number">0644</span>);</span><br><span class="line"><span class="keyword">if</span> (fd2 == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open file.txt&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = read(fd1, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(buf);</span><br><span class="line"></span><br><span class="line">ret = write(fd2, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd1);</span><br><span class="line">close(fd2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="man手册">man手册</h3><ul><li>man 1 ls 1表示Linux命令</li><li>man 2 open 2表示系统调用</li><li>man 3 printf 3 表示C库函数</li></ul><h3 id="系统IO-API">系统IO API</h3><h4 id="open">open</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure><p>成功返回值是一个非负整数，也就是文件描述符，打开失败返回-1</p><p>pathname 指定要打开的文件</p><p>flags 指定要用什么模式去打开</p><blockquote><p>man手册原文</p><p>The  argument  flags must include one of the following  access  modes:  <strong>O_RDONLY,  O_WRONLY,   or O_RDWR</strong>.   These  request  opening  the file read-only, write-only, or read/write, respectively.</p></blockquote><p>可选参数</p><ol><li>O_TRUNC：如果文件存在并且是一个普通文件，而且打开方式是O_WRONLY/O_RDWR，那么这个文件就会被清空。</li><li>O_APPEND ：追加的方式打开，The  file is opened in append mode.</li><li>O_CREAT ：如果文件不存在则创建，If the file does not exist it will be created.</li><li>O_EXCL ：和O_CREAT一块使用，如果文件存在则报错</li><li>O_NONBLOCK ：非阻塞的方式打开文件</li></ol><p>这些参数一起使用时 用 位运算符<code>|</code>连接</p><p><strong>mode 指定文件权限，只有在需要创建文件时，也就是 flags指定了 O_CREAT 才有效</strong></p><p>换句话说，如果flags没有指定 O_CREAT，mode参数是无效的。</p><blockquote><p>The open() system call opens the file specified  by  pathname. If  the  specified file does not exist, it may optionally (if O_CREAT is specified in flags) be created  by open().</p></blockquote><p>四个八进制位指定，以0766为例</p><ul><li>0： 没有特殊权限</li><li>7： 文件所属用户 有 rwx权限  r：4 w：2 x：1</li><li>6： 同组用户 有 rw权限</li><li>6： 其他用户有 rw权限</li></ul><p>除了这种写法，还可以通过系统定义好的宏指定</p><ol><li><code>S_IRWXU  </code>00700 user (file owner) has read, write, and execute permission</li><li><code>S_IRUSR</code>00400 user has read permission</li><li><code>S_IWUSR  </code>00200 user has write permission</li><li><code>S_IXUSR  </code>00100 user has execute permission</li><li><code>S_IRWXG  </code>00070 group has read, write,  and execute permission</li><li><code>S_IRGRP  </code>00040 group has read permission</li><li><code>S_IWGRP  </code>00020 group has write permission</li><li><code>S_IXGRP  </code>00010  group  has execute permission</li><li><code>S_IRWXO  </code>00007 others  have  read,  write, and execute permission</li><li><code>S_IROTH  </code>00004 others have read permission</li><li><code>S_IWOTH  </code>00002  others  have write permission</li></ol><p>第一个0指八进制位，第二位指特殊权限值，第三位文件所属用户，第四位同组用户，第五位其他用户</p><p>不过一般用四位即可，表示四种权限</p><h4 id="read">read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>read()  attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.</p></blockquote><ol><li>成功返回读到的字节数 可能小于 count，失败返回-1，并且设置错误码errno</li><li>fd 文件描述符</li><li>buf 文件内容读到哪个缓冲区地址</li><li>count 要读多少字节</li></ol><p>errno 是 &lt;errno.h&gt; 中定义的变量，出现错误会被设置成2 成功就是0</p><h4 id="write">write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>write()  writes  up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.</p></blockquote><ol><li>成功返回写入的字节数 可能小于 count，失败返回-1，并且设置错误码errno</li><li>fd 文件描述符</li><li>buf 哪个缓冲区的内容写到文件中</li><li>count 要读多少字节</li></ol><h4 id="lseek">lseek</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure><p>作用：移动文件指针</p><ol><li>成功返回当前位置，失败返回-1 并且设置错误码 errno</li><li>fd  文件描述符</li><li>whence 偏移参考点<ol><li>SEEK_SET 文件起始位置</li><li>SEEK_CUR 当前位置</li><li>SEEK_END 文件末尾</li></ol></li><li>offset 相对于 whence的偏移量</li></ol><p>flags 为 O_APPEND时，因为是追加，文件指针直接从文件末尾开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd1;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">fd1 = open(<span class="string">&quot;./file.txt&quot;</span>, O_RDWR | O_CREAT, <span class="number">00644</span>);</span><br><span class="line"><span class="keyword">if</span> (fd1 == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open file.txt&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = write(fd1, <span class="string">&quot;hello world\n&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;write file.txt&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lseek(fd1, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">ret = read(fd1, buf, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = write(fd1, <span class="string">&quot;123&quot;</span>, <span class="number">3</span>);</span><br><span class="line">lseek(fd1, <span class="number">-2</span>, SEEK_END);</span><br><span class="line">ret = write(fd1, <span class="string">&quot;45&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(buf);</span><br><span class="line"></span><br><span class="line">close(fd1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>lseek函数不仅可以用来调整当前文件偏移量，而且还可以将文件位置偏移到文件之外，形成一个 空洞，这种特性其实是非常重要的，它提供了可以在不同地方同时写一个文件的可能，对于一个较大的 文件我们可以在文件中定位到一个指定的地方，让多个进程同时在不同的偏移量处写入文件数据。相当 于网络中的多点下载。</p></blockquote><h3 id="文件管理">文件管理</h3><p>文件储存在硬盘上，硬盘的最小存储单位叫做“扇区”（Sector），每个扇区储存512字节（相当于 0.5KB）， 操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多 个扇区，即一次 性读取一个“块”（block）。这种由多个扇区组成的“块”，是文件存取的最小单位。“块”的 大小，最常 见的是4KB，即连续八个sector组成一个block。</p><p>磁盘在进行分区、格式化的时候会将其分为两个区域，一个是数据区，用于存储文件中的数据； 另一个 是inode区，用于存放inode table（inode表）</p><p><strong>每一个文件都必须对应一个inode，inode实质上是 一个结构体，这个结构体是通过inode编码在inode表中找到的，这个结构体记录了文件了不同信息</strong>，譬如文件字节大小、文件所有者、文件对应的读/写/执行权限、文件时间戳（创建时间、更新时间等）、文件类型、文件数据 存储的block（块） 位置等等信息</p><p>Linux中可以通过 <code>ls -il</code> 和 <code>stat</code>命令查看 inode编号</p><p><strong>打开文件这个过程中做了什么？</strong></p><p>在Linux 系统中，内核会为每个进程设置一个专门的数据结构用于管理该进程，用来记录进程的状态信息、运行特征等，我们把这个称为进程控制块（Process control block，缩写 PCB）。</p><p>PCB 数据结构体中有一个指针指向了文件描述符表（File descriptors），文件描述符表中的每一个文件描述符fd索引到对应的文件表（File table），文件表也是一个数据结构体，其中记录了很多文件相关的信息，譬 如文 件状态标志、引用计数、当前文件的读写偏移量以及i-node指针（指向该文件对应的inode）</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240523083213985.png" alt="image-20240523083213985" style="zoom: 50%;" /><h2 id="标准IO">标准IO</h2><h3 id="标准IO介绍">标准IO介绍</h3><p>标准IO是文件IO的又一层封装。</p><p>文件IO是系统调用，不同操作系统实现不同，标准IO是标准C库实现，不同操作系统实现也是相同的，所以代码移植容易。</p><p>性能上，标准IO引入了缓冲机制，在用户空间中定义了stdio缓冲区，性能优于文件IO</p><h3 id="file指针">file指针</h3><p>相当于 文件IO中的文件描述符，实际上这两个也是可以互相转换的，由库函数实现</p><p><code>FILE *fp</code>中的FILE就是一个结构体。 FILE 是一个结构体数据类型，它包含了标准I/O库函数为管理文件所需要的所有信息，包括用于实 际 I/O 的文件描述符、指向文件缓冲区的指针、缓冲区的长度、当前缓冲区中的字节数以及出错标志等。FILE 数据结构定义在标准I/O库函数头文件stdio.h中。</p><h3 id="标准IO-API">标准IO API</h3><h4 id="fwrite-fread">fwrite / fread</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>The  function  fread()  reads nmemb items of data, each size bytes long, from the stream pointed to by stream, storing them at the location given by ptr.</p><p>The  function fwrite() writes nmemb items of data, each size bytes long, to the stream pointed to by stream, obtaining  them  from  the  location given by ptr.</p><p>On  success,  fread()  and  fwrite()  return the number of items read or written.  This number equals the number of bytes transferred  only  when size  is  1.  If an error occurs, or the end of the file is reached, the return value is a short item count (or zero).</p><p>fread()  does not distinguish between end-of-file and error, and callers must use feof(3) and ferror(3) to determine which occurred.</p><p>后面有 feof和ferror 1</p></blockquote><ul><li>size参数表示 每块多少字节</li><li>nmemb 表示 这次读写 多少块</li></ul><h4 id="fopen">fopen</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来 将文件描述符转为FILE指针 就可以使用标准IO的方法</span></span><br><span class="line">FILE *<span class="title function_">fdopen</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br></pre></td></tr></table></figure><p><strong>fopen mode参数和 open mode参数 的对应关系</strong></p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240523145030310.png" alt="image-20240523145030310" style="zoom: 80%;" /><h4 id="feof-ferror">feof / ferror</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">clearerr</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">feof</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ferror</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>The function clearerr() clears the end-of-file and error indicators for the stream pointed to by stream.</p><p>The  function  feof()  tests  the  end-of-file indicator for the stream pointed to by stream, <strong>returning nonzero  if  it  is  set.</strong> The  end-of-file  indicator  can be cleared only by the function clearerr().</p><p>The function ferror() tests the error indicator for  the  stream  pointed to by stream, returning nonzero if it is set.  The error indicator can be reset only by the clearerr() function.</p></blockquote><p>读到文件结尾,<code>end-of-file</code>标识会被设置，这是一种错误情况。</p><p>当出现IO错误时（不是读到文件末尾，可能是各种错误），错误标识被设置，这是另一种错误情况。</p><p>想区分这两种情况，根据不同情况做出不同的处理，就要使用 feof和ferror</p><p>clearerr()作用是清空 <code>end-of-file</code>标识和 <code>error</code>标识 （就是error.h中定义的errno标识）</p><h4 id="文件指针定位">文件指针定位</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">ftell</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rewind</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><ul><li>fseek 与系统调用 lseek 基本一样</li><li>ftell 返回当前文件指针位置</li><li>rewind 将文件指针移动到文件首部</li></ul><p><strong>代码案例</strong></p><ul><li><p>案例一（读写）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = <span class="string">&quot;hello world nihao shijie`&quot;</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = fwrite(buf, <span class="number">1</span>, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>, fp);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="built_in">strlen</span>(buf) + <span class="number">1</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fseek(fp, 0, SEEK_SET);</span></span><br><span class="line">rewind(fp);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf1[<span class="number">1024</span>];</span><br><span class="line">ret = fread(buf1, <span class="number">1</span>, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>, fp);</span><br><span class="line"><span class="built_in">puts</span>(buf1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算文件大小</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;file size: %ld\n&quot;</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>案例二（错误处理）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="keyword">if</span> ((ret = fread(buf, <span class="number">1</span>, <span class="number">12</span>, fp)) &lt; <span class="number">12</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (feof(fp)) &#123;</span><br><span class="line">perror(<span class="string">&quot;到达末尾&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clearerr(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!feof(fp)) &#123;</span><br><span class="line">perror(<span class="string">&quot;clearerror&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ferror(fp)) &#123;</span><br><span class="line">perror(<span class="string">&quot;IO错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(buf);</span><br><span class="line">    </span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="格式化输出">格式化输出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dprintf</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">snprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><p><strong>函数说明</strong></p><blockquote><p>The functions in the printf() family produce output according to a  format  as  described  below.   The  functions  <strong>printf()  and write  output  to stdout, the standard output stream; fprintf() and write  output  to  the  given  output  stream; sprintf(), snprintf() write to the character string str.</strong></p><p>The function dprintf() is the same as fprintf() except  that  it outputs to <strong>a file descriptor, fd, instead of to a stdio stream.</strong></p><p>The  functions  snprintf()  write at most size bytes (including the terminating null byte (‘\0’)) to str.</p></blockquote><p>printf 相当于 stream == stdout 的fprintf</p><p><strong>案例：按格式打印当前时间</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">timeinfo</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">24</span>]; <span class="comment">// 保证有足够的空间存放格式化后的时间字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前时间</span></span><br><span class="line">    time(&amp;rawtime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将时间转换为本地时区的tm结构体</span></span><br><span class="line">    timeinfo = localtime(&amp;rawtime);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 snprintf进行时间格式化</span></span><br><span class="line"><span class="built_in">snprintf</span>(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;%d-%d-%d %d:%d:%d&quot;</span>, timeinfo-&gt;tm_year + <span class="number">1900</span>, timeinfo-&gt;tm_mon + <span class="number">1</span>, timeinfo-&gt;tm_mday, timeinfo-&gt;tm_hour, timeinfo-&gt;tm_min, timeinfo-&gt;tm_sec);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 使用strftime进行时间格式化</span></span><br><span class="line">    <span class="keyword">if</span> (strftime(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeinfo) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;时间格式化失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 输出格式化后的时间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前时间是: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO缓冲">IO缓冲</h4><p>标准IO在用户空间引入缓冲区，又叫stdio缓冲区，文件IO没有，如下图</p><img src="C:\Users\13798\Downloads\嵌入式-第 2 页.drawio.png" alt="嵌入式-第 2 页.drawio" style="zoom: 67%;" /><h5 id="内核缓冲区">内核缓冲区</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsync</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fdatasync</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sync</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>fsync将参数fd所指的文件内容数据和元数据写入磁盘，对磁盘设备的写操作完成后，才会返回。调 用成功返回0，错误返回-1并设置errno指示错误原因。</li><li>fdatasync只是写入内容数据，不包括元数据（记录文件属性相关的数据信息）。</li><li>sync()会将所有文件I/O内核缓冲区中的文件内容数据和元数据全部更新到磁盘设备中，刷新所有文 件I/O内核缓冲区。</li></ul><p>除了手动调用函数刷新内核缓冲区，还可以在打开文件时，通过指定系统调用open方法中的flags参数实现每次读写操作后刷新内核缓冲区</p><ul><li>O_DSYNC  每个write调用后将数据同步，类似于fdatasync</li><li>O_SYNC 类似于 fsync</li></ul><h5 id="stdio缓冲区">stdio缓冲区</h5><p>标准I/O所维护的stdio缓冲是用户空间 的缓 冲区，当应用程序中通过标准I/O操作磁盘文件时，<strong>为了减少调用系统调用的次数</strong>，标准I/O函数会<strong>将用户写入或读取文件的数据缓存在stdio 缓冲区</strong>，然后再一次性将 stdio 缓冲区中缓存的数据<strong>通过调用系统调用I/O（文件I/O）写入到文件I/O内核缓冲区</strong>或者拷贝到应用程序的buf中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setvbuf</span><span class="params">(FILE *stream, <span class="type">char</span> *buf, <span class="type">int</span> mode, <span class="type">size_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setbuf</span><span class="params">(FILE *stream, <span class="type">char</span> *buf)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setbuffer</span><span class="params">(FILE *stream, <span class="type">char</span> *buf, <span class="type">size_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setlinebuf</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><p><strong>函数说明</strong></p><blockquote><p>The  setvbuf() function may be used on any open stream to change its buffer.  The mode argument must  be  one  of  the  following three macros:</p><p>_IONBF unbuffered 无缓冲</p><p>_IOLBF line buffered 行缓冲</p><p>_IOFBF fully buffered 全缓冲</p><p>Except  for unbuffered files, the buf argument should point to a buffer at least size bytes long; this buffer will  be  used  instead  of the current buffer.  If the argument buf is NULL, only the mode is affected; a new buffer will be allocated on the next read  or  write  operation.  就是说如果buf不是NULL，那么buf就是缓冲区，如果buf不是NULL，系统自动分配一块空间作为缓冲区</p><p>The  setbuffer()  function  is the same, except that the size of the buffer is up to the caller, rather than being determined  by  the default BUFSIZ.  The setlinebuf() function is exactly equivalent to the call:</p><p><code>setvbuf(stream, NULL, _IOLBF, 0);</code></p></blockquote><p><strong>案例：标准IO缓冲测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_FILE <span class="string">&quot;./file&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_FILE <span class="string">&quot;./wfile&quot;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// setvbuf(stdout, NULL, _IONBF, 0);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="type">int</span> rfd, wfd;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">rfd = open(READ_FILE, O_RDONLY);</span><br><span class="line">wfd = open(WRITE_FILE, O_WRONLY | O_CREAT | O_TRUNC, <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((size = read(rfd, buf, BUF_SIZE)) &gt; <span class="number">0</span>)</span><br><span class="line">write(wfd, buf, size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(buf);</span><br><span class="line"></span><br><span class="line">fsync(wfd);</span><br><span class="line"></span><br><span class="line">close(rfd);</span><br><span class="line">close(wfd);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结下刷新stdio缓冲区的方法</p><ul><li>换行符刷新缓冲区（行缓冲）</li><li>调用fflush()</li><li>调用fclose()关闭文件</li><li>程序退出时</li></ul><img src="C:\Users\13798\AppData\Roaming\Typora\typora-user-images\image-20240523182523202.png" alt="image-20240523182523202" style="zoom:67%;" />]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发</title>
      <link href="/2024/04/23/C%E8%AF%AD%E8%A8%80/%E5%B9%B6%E5%8F%91/"/>
      <url>/2024/04/23/C%E8%AF%AD%E8%A8%80/%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="并发">并发</h2><p><strong>什么是同步，什么是异步</strong></p><p>俄罗斯方块</p><p>同步：事件到来 / 输入是知道的，程序执行到哪，哪出错是知道的</p><p>异步：事件什么时候到来不知道，到来后产生什么结果也不知道</p><p><strong>异步事件的处理</strong></p><p>捞鱼 / 钓鱼 / 火灾（通知） / 闹钟 / 不停看表</p><ul><li>查询法 主动轮询<ul><li>适用于发生频率非常高</li></ul></li><li>通知法 被动等通知<ul><li>适用于发生频率非常低</li><li>虽然是等通知，但要观察通知。 红绿灯闭眼 / 闹钟不在旁边。</li><li>所以虽然是两种方法，但和查询法 本质上都是监测，不过通知法消耗更少</li></ul></li></ul><p><strong>单核哪来的并发？</strong></p><p>时间片轮转，调度速度非常快，所以看起来是同时进行，也就是并发。</p><p>多核有并行。</p><p><strong>解决并发的两种机制</strong></p><ul><li><p>信号</p></li><li><p>线程</p></li></ul><h3 id="一、信号">一、信号</h3><h4 id="什么是信号">什么是信号</h4><p>信号（应用层）是软件中断（硬件）。—&gt;  信号的响应依赖于中断</p><p>kill -l 查看标准信号 34~ 67 是实时信号 RT realtime</p><p><strong>core 文件</strong></p><p>core文件 保存出错现场 软件/应用/qq出错时发送错误报告 这时就是 错误现场</p><p>段错误会产生core文件 ulime -a 查看 core文件 size</p><p>gdb core.4628 就可以调试那次错误程序</p><h4 id="signal">signal</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">sighandler_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">sighandler_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">sighandler_t</span> handler)</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分开来</span></span><br><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> signum, <span class="type">void</span> (*handler)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>信号会打断系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">int_handler</span><span class="params">()</span> &#123;</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// signal(SIGINT, SIG_IGN); // ignore SIGINT signal</span></span><br><span class="line">signal(SIGINT, int_handler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;*&quot;</span>, <span class="number">1</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>一直按 ctrl+c 测试</p><p>之前的程序没有考虑信号，判断文件描述符 &lt; 0，有可能是因为信号打断了系统调用，导致假错。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fd1 = open(<span class="string">&quot;./file.txt&quot;</span>, O_RDWR | O_CREAT);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fd1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EINTR) &#123;</span><br><span class="line">            perror(<span class="string">&quot;open file.txt&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (fd1 &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>信号的不可靠</strong></p><p>第一次调用还没结束，第二次调用就开始了，导致第一次调用产生不可预测的结果，比如第一次结果被第二次调用冲掉</p><p><strong>可重入函数</strong></p><p>解决信号的不可靠</p><p>所有系统调用都是可重入的，一部分库函数也是可重入的，如：memcpy</p><p>一些函数，比如locatime，rand，都有 <code>_r</code> 版本，就是为了支持可重入</p><p><strong>信号的响应过程 ⭐图</strong></p><p>程序执行过程中是被中断（硬件机制）打断过很多次的，是在磕磕绊绊的运行</p><p>信号从收到到响应有一个不可避免的延迟, 因为有中断，所以有说信号是在从kernel到user的路上响应的。</p><p>信号是如何忽略掉的？ 信号的mask位置成0</p><p>信号为什么要丢失？</p><p>标准信号（ &lt; 34）的响应没有严格的顺序</p><p><img src="C:%5CUsers%5C13798%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240529144203186.png" alt=""></p><h4 id="常用函数">常用函数</h4><p><strong>kill</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">kill</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure><p>函数描述</p><blockquote><p>The kill() system call can be used to send any signal to any process group or process.</p><p>不同的pid，发送信号的对象也不同（和waitpid的pid参数相似）</p><p>On  success  (at  least one signal was sent), zero is returned.  On error, -1 is returned, and errno is set appropriately.</p><p>就算返回-1，也有三种情况</p></blockquote><p><strong>raise</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">raise</span><span class="params">(<span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure><p>函数描述</p><blockquote><p>The  raise()  function  sends  a  signal  to  the calling process or thread.  In a single-threaded program it is equivalent to</p><p>​<code> kill(getpid(), sig);</code></p><p>In a multithreaded program it is equivalent to</p><p>​    <code>pthread_kill(pthread_self(), sig);</code></p><p>成功返回0 失败返回非0</p></blockquote><p><strong>alarm</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br></pre></td></tr></table></figure><p>几秒后杀死当前进程.</p><p>不可重入,不能实现多任务的计时器，测试多次调用alarm，只有最后一次有效</p><p>除了测试，最好不要用sleep，因为有的环境中的sleep就是用 alarm封装的，用了sleep，再用alarm，程序肯定会有问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">alarm(<span class="number">2</span>);</span><br><span class="line">alarm(<span class="number">10</span>);</span><br><span class="line">alarm(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间统计</strong></p><blockquote><p>time ./a.out &gt; /tmp/out 查看这两种实现 时间精度怎么样</p><p>不用<code>volatile</code>时，看gcc 5sec_alarm -O1 优化后程序是否能正常结束</p></blockquote><ul><li><p>time函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">time_t</span> end;</span><br><span class="line"><span class="type">__int64_t</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">end = time(<span class="literal">NULL</span>) + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(time(<span class="literal">NULL</span>) &lt; end) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>信号实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> loop = <span class="number">1</span>; <span class="comment">// volatile 解决01优化 直接拿值一直用 而不用地址去拿值 不然值变化了都不知道</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">alarm_handler</span><span class="params">()</span> &#123;</span><br><span class="line">loop = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">__int64_t</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">signal(SIGALRM, alarm_handler);</span><br><span class="line">alarm(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>实现多任务计时器（todo）</strong></p><p><strong>pause</strong></p><p><strong>abort</strong></p><p><strong>system</strong></p><p><strong>sleep</strong></p><p><strong>信号集</strong></p><p><strong>信号屏蔽字/pending集的处理</strong></p><p><strong>扩展函数</strong></p><ul><li>sigsuspend</li><li>sigaction 替换 signal</li><li>setitimer 替换 alarm</li></ul><p><strong>实时信号</strong></p><p>之前是标准信号，区别很小。</p><h3 id="二、线程">二、线程</h3><h4 id="线程的概念">线程的概念</h4><p>一个正在运行的函数</p><p>线程之间没有主次之分，main线程在运行</p><p>POSIX线程：一套标准，不是实现</p><p>线程标识：<code>pthread_t </code>结构体 / 共用体 / …不同实现</p><p>容器：会话容纳多个进程组，进程组容纳多个进程，进程容纳多个线程</p><p><code>ps ax -L</code>以linux 形式展示  LWP标识线程， 但还是别随便用 %d打印</p><ul><li>pthread_equal() 比较线程标识</li><li>pthread_self() 获取线程标识</li></ul><h4 id="线程操作">线程操作</h4><h5 id="线程创建">线程创建</h5><p>pthread_create()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br></pre></td></tr></table></figure><p>有些情况下虽然参数是指针，但其实是要传一个变量地址过去，从而修改变量值（回填）。</p><p>默认情况，比如线程属性参数pthread_attr_t传NULL已经可以解决大多数问题。</p><p>不能用perror报错（因为错误时直接返回error number，并不是像之前那些函数返回-1，并且设置errno），只能用strerror</p><blockquote><p>On success, pthread_create() returns 0; on error, it returns an error number</p></blockquote><p>线程的调度（线程执行到谁）取决于调度策略</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;thread is working!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;begin!&quot;</span>);</span><br><span class="line"></span><br><span class="line">err = pthread_create(&amp;tid, <span class="literal">NULL</span>, func, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;end!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释运行结果：线程何时被调度是由调度策略决定的，所以何时打印是不确定的，甚至大多数情况下是不打印 的，因为还没来得及调度线程，进程就已经exit结束了</p><h5 id="线程终止">线程终止</h5><p>三种方式</p><ul><li>从启动例程返回，返回值是线程退出码</li><li>被同一进程中的其他线程取消</li><li>线程调用pthread_exit()函数，如果是最后一个线程，进程也会结束（第一条同）。</li></ul><p>pthread_join() —— 进程中的 wait()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;thread is working!&quot;</span>);</span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// return NULL;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;begin!&quot;</span>);</span><br><span class="line"></span><br><span class="line">err = pthread_create(&amp;tid, <span class="literal">NULL</span>, func, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_join(tid, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;end!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="栈的清理">栈的清理</h5><p><strong>两个钩子函数</strong></p><p>pthread_cleanup_push();</p><p>pthread_cleanup_pop();</p><p>两个函数成对出现，不然就报语法错误。  gcc -E 预处理测试以下（预处理 处理的是#开头的内容）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">clean_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;thread is working!&quot;</span>);</span><br><span class="line"></span><br><span class="line">pthread_cleanup_push(clean_func, <span class="string">&quot;cleanup: 1&quot;</span>);</span><br><span class="line">pthread_cleanup_push(clean_func, <span class="string">&quot;cleanup: 2&quot;</span>);</span><br><span class="line">pthread_cleanup_push(clean_func, <span class="string">&quot;cleanup: 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">pthread_cleanup_pop(<span class="number">1</span>);</span><br><span class="line">pthread_cleanup_pop(<span class="number">0</span>);</span><br><span class="line">pthread_cleanup_pop(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// return NULL;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;begin!&quot;</span>);</span><br><span class="line"></span><br><span class="line">err = pthread_create(&amp;tid, <span class="literal">NULL</span>, func, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_join(tid, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;end!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程取消">线程取消</h5><p>一个场景：四个线程去查二叉树，肯定有一个线程先查到，那其他线程就没有继续的必要了，就取消</p><p>先取消再收尸</p><p>pthread_cancel()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_cancel</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure><p>有个问题，如果还没来得及close(fd) 就被cancel了。钩子函数解决， push pop，close操作放在钩子函数中</p><p>但如果还没来及挂钩子函数就被cancel呢？ 约定</p><p>取消有两种状态：允许与不允许</p><p>允许分为：异步cancel，推迟cancel（<strong>默认推迟到cancel点再执行cancel</strong>）</p><p>POSIX定义的cancel点：可能引发阻塞的系统调用</p><p>所以上面那种情况不会出现，因为push 不是cancel点。而open这种系统调用是cancel点，所以不可能说open之后cancel，肯定是open之前就响应cancel。</p><p>pthread_setcancelstate() 设置是否允许取消</p><p>pthread_setcanceltype() 设置取消方式（异步还是推迟）</p><p>pthread_testcancel() 人为设置cancel点</p><h5 id="线程分离">线程分离</h5><p>pthread_detach(); 分离线程</p><p>分离之后与创建该线程的那个无关系</p><h5 id="例子">例子</h5><p><mark>重写筛质数</mark></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LEFT  30000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIGHT 30000200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM RIGHT - LEFT + 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i - LEFT, <span class="literal">NULL</span>, thr_prime, &amp;i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 如果是创建最后一个线程时失败了 那么还要 给前面200个线程用join收尸</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">pthread_join(tid[i - LEFT], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *i_ptr)</span> &#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> i = *(<span class="type">int</span> *)i_ptr;</span><br><span class="line">    <span class="type">int</span> is_prime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++) &#123; <span class="comment">// sqrt(n) 更快 </span></span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            is_prime = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_prime)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>, i);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出并不对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30000023</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br><span class="line"><span class="number">30000109</span> is prime</span><br></pre></td></tr></table></figure><p>产生这种情况是因为线程竞争</p><p>什么情况下产生竞争？没有协议 / 约定</p><p>协议不一定非是TCP/IP，有约定就有协议，比如红绿灯，没有红绿灯这个约定就有可能导致撞车，虽然就算有了约定还是会有撞车hhh</p><p>怎么保证一定不会撞 / 一定会撞？ 车身加长（sleep测试语句） / 车身小到不可能撞</p><p>sleep(1000) -&gt; ps -axm / ps ax -L测试</p><p>问题就是因为<code>err = pthread_create(tid + i - LEFT, NULL, thr_prime, &amp;i);</code>这里用的地址传递。这201个线程同时在跑 <code>thr_prime</code>这个函数，前一个线程<code>int i = *(int *)i_ptr;</code>还没执行完，下一个线程就也执行到这里，所以就可到导致很多个线程拿到的是同一个 i值</p><p><strong>第一种解决</strong> —&gt; 强转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i - LEFT, <span class="literal">NULL</span>, thr_prime, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 如果是创建最后一个线程时失败了 那么还要 给前面200个线程用join收尸</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">pthread_join(tid[i - LEFT], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *i_ptr)</span> &#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> i = (<span class="type">int</span>)i_ptr;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++) &#123; <span class="comment">// sqrt(n) 更快 </span></span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>, i);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是会有警告，这种就是可以解释的警告，如果是其他警告，最好调到没有</p><p><strong>第二种解决</strong></p><p>产生竞争的原因就是多个进程拿到同一个i值，那用201块空间存储i值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">thr_arg_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">&#125; thr_arg_st;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line">thr_arg_st *p;</span><br><span class="line"><span class="type">void</span> *p_exit;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*p));</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;malloc()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;n = i;</span><br><span class="line"></span><br><span class="line">err = pthread_create(tid + i - LEFT, <span class="literal">NULL</span>, thr_prime, p);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 如果是创建最后一个线程时失败了 那么还要 给前面200个线程用join收尸</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">pthread_join(tid[i - LEFT], &amp;p_exit);</span><br><span class="line"><span class="built_in">free</span>(p_exit); <span class="comment">// free 和 malloc 最好在一个模块中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *p)</span> &#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> i = ((thr_arg_st *)p)-&gt;n;</span><br><span class="line"><span class="type">int</span> is_prime = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// free(p); // free 和 malloc 最好在一个模块中</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++) &#123; <span class="comment">// sqrt(n) 更快 </span></span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">is_prime = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_prime)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>, i);</span><br><span class="line">pthread_exit(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ulimt -a 查看资源大小</p><p>理论上， stack size减少，那线程数可以更多，但其实先耗尽的是tid号 而不是容量</p><p>现在200个线程还可以，如果再增大，不可能创建那么线程</p><p>所以要用一个值来控制产生的线程数。这里与进程那里是一样的思路。</p><p><strong>竞争故障</strong></p><blockquote><p>echo 1 /tmp/out</p><p>./a.out 之后应该是 21  多核一定会有竞争问题 不一定是21</p><p>加一条sleep(1) 这一秒内20个线程拿到的都是1 写了20次2</p><p>sleep就相当于车身加长导致线程一定冲突，用途就是测试，放大线程竞争现象</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FNAME <span class="string">&quot;/tmp/out&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thr_io</span><span class="params">()</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">char</span> linebuf[BUFSIZE];</span><br><span class="line">fp = fopen(FNAME, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fgets(linebuf, BUFSIZE, fp);</span><br><span class="line"></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, atoi(linebuf) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i, <span class="literal">NULL</span>, thr_io, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程同步"><mark>线程同步</mark></h4><p><code>man 3 pthread_mutex_init</code> 发现手册中找不到函数</p><p><code>sudo apt install glibc-doc</code> 安装这个手册就行了</p><p>参考地址 <a href="https://askubuntu.com/questions/197363/no-manual-entry-for-pthread-could-not-find-man-page-by-name">https://askubuntu.com/questions/197363/no-manual-entry-for-pthread-could-not-find-man-page-by-name</a></p><h5 id="互斥量">互斥量</h5><p>互斥量就是为了 实现抢锁这个逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operations on mutexes 这些函数就是操作互斥量的</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *mutexattr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>; <span class="comment">// 死等锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>; <span class="comment">// 尝试</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>; <span class="comment">// 解锁</span></span><br></pre></td></tr></table></figure><p>回到上面那个程序</p><p>20个人<strong>可以同时打开</strong>，但是20个人<strong>不能同时读 / 写</strong>（如果是只读的话，可以同时读，但是这个程序是读写）。</p><p>这种只能一个人操作的部分代码叫做临界区，需要加锁</p><blockquote><p>等20秒是正常的，只有一个线程能抢到锁</p><p>因为有sleep(1)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thr_io</span><span class="params">()</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">char</span> linebuf[BUFSIZE];</span><br><span class="line">fp = fopen(FNAME, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">fgets(linebuf, BUFSIZE, fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, atoi(linebuf) + <span class="number">1</span>);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i, <span class="literal">NULL</span>, thr_io, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一道题</strong></p><blockquote><p>四个线程分别无限输出 a b c d</p><p>要求一直 重复输出abcd 不管是不是多核</p><p>问题关键是 执行顺序是调度器决定的 顺序不一定是abcd 所以需要加锁手动指定顺序</p><p>前V后P（死去的OS开始攻击我） 锁自己解锁下一个人</p><p><mark>互斥量锁的永远不是变量 锁的是一段代码</mark></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mut[THRNUM];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">next</span> <span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (n + <span class="number">1</span>) % THRNUM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">thr_io</span><span class="params">(<span class="type">void</span> *i)</span> &#123;</span><br><span class="line"><span class="type">int</span> n = (<span class="type">int</span>)i;</span><br><span class="line"><span class="type">int</span> id = <span class="string">&#x27;a&#x27;</span> + n;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">pthread_mutex_lock(mut + n);</span><br><span class="line">write(<span class="number">1</span>, &amp;id, <span class="number">1</span>);</span><br><span class="line">pthread_mutex_unlock(mut + next(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_mutex_init(mut + i, <span class="literal">NULL</span>);</span><br><span class="line">pthread_mutex_lock(mut + i);</span><br><span class="line">err = pthread_create(tid + i, <span class="literal">NULL</span>, thr_io, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(mut + <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">alarm(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>池类算法实现</mark></p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240530114127912.png" alt="image-20240530114127912" style="zoom:67%;" /><p>临界区内的跳转语句（break continue…）必须先解锁再跳转，不然就等着死锁</p><p>全局变量实现线程通信</p><blockquote><p>程序问题：用的是查询法，是在盲等，所以有时会稍卡一下</p><p>后面改成通知法：条件变量</p><p>todo: 实现mytbf_mt</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LEFT  30000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIGHT 30000200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">// 任务 </span></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mut_num = PTHREAD_MUTEX_INITIALIZER; <span class="comment">// 互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i, <span class="literal">NULL</span>, thr_prime, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 如果是创建最后一个线程时失败了 那么还要 给前面200个线程用join收尸</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line">sched_yield(); <span class="comment">// 小型sleep 让出时间片 让其他线程去抢任务</span></span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line">&#125;</span><br><span class="line">num = i;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看最后一个任务 是否被其他线程抢到了 是才能把num = -1</span></span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line">sched_yield(); </span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">-1</span>;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_mutex_destroy(&amp;mut_num);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *p)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, is_prime;</span><br><span class="line"><span class="comment">// is_prime = 1; 写在这里为什么会有问题？ 下面是一while循环 就会一直是1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line">         <span class="comment">// 看是否有任务来</span></span><br><span class="line"><span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line">sched_yield();</span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">-1</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num); <span class="comment">// 跳转之前不解锁有可能导致死锁</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i = num; <span class="comment">// num有可能是 0</span></span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line"></span><br><span class="line">is_prime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">is_prime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_prime)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]%d is prime\n&quot;</span>, (<span class="type">int</span>)p, i);</span><br><span class="line">&#125;</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="条件变量">条件变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_condattr_t</span> *cond_attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// signal是给某个wait发通知 broadcast是所有</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>; </span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait就是解锁+等通知（signal / broadcast） +抢锁 类似于之前拿三句代码的封装</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="keyword">struct</span>  time‐</span></span><br><span class="line"><span class="params">                           spec *abstime)</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>条件变量实现筛质数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LEFT  30000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIGHT 30000200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">// 任务</span></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mut_num = PTHREAD_MUTEX_INITIALIZER; </span><br><span class="line"><span class="type">static</span> <span class="type">pthread_cond_t</span> cond_num = PTHREAD_COND_INITIALIZER; </span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i, <span class="literal">NULL</span>, thr_prime, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 如果是创建最后一个线程时失败了 那么还要 给前面200个线程用join收尸</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">pthread_cond_wait(&amp;cond_num, &amp;mut_num); <span class="comment">// 等下游抢到任务</span></span><br><span class="line">&#125;</span><br><span class="line">num = i;</span><br><span class="line">pthread_cond_signal(&amp;cond_num); <span class="comment">// 通知下游 任务已下发</span></span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">pthread_cond_wait(&amp;cond_num, &amp;mut_num); <span class="comment">// 等待最后一个任务被下游抢到</span></span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">-1</span>;</span><br><span class="line">pthread_cond_broadcast(&amp;cond_num); <span class="comment">// 通知下游 任务已经全部下发完毕</span></span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_mutex_destroy(&amp;mut_num);</span><br><span class="line">pthread_cond_destroy(&amp;cond_num);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *p)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, is_prime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;mut_num);</span><br><span class="line"><span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">pthread_cond_wait(&amp;cond_num, &amp;mut_num); <span class="comment">// 等待上游下发任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">-1</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;mut_num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i = num; <span class="comment">// num有可能是 0</span></span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">pthread_cond_broadcast(&amp;cond_num); <span class="comment">// 下游抢到任务通知上游该下发任务了</span></span><br><span class="line">pthread_mutex_unlock(&amp;mut_num); <span class="comment">// 这句和上面那句 顺序无所谓</span></span><br><span class="line"></span><br><span class="line">is_prime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++) &#123; <span class="comment">// sqrt(n) 更快 </span></span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">is_prime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_prime)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]%d is prime\n&quot;</span>, (<span class="type">int</span>)p, i);</span><br><span class="line">&#125;</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>条件变量实现abcd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mut = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thr_io</span><span class="params">(<span class="type">void</span> *i)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">next</span> <span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">err = pthread_create(tid + i, <span class="literal">NULL</span>, thr_io, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alarm(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; THRNUM; i++) &#123;</span><br><span class="line">pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_destroy(&amp;mut);</span><br><span class="line">pthread_cond_destroy(&amp;cond);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">next</span> <span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (n + <span class="number">1</span>) % THRNUM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">thr_io</span><span class="params">(<span class="type">void</span> *i)</span> &#123;</span><br><span class="line"><span class="type">int</span> n = (<span class="type">int</span>)i;</span><br><span class="line"><span class="type">int</span> id = <span class="string">&#x27;a&#x27;</span> + n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;mut);</span><br><span class="line"><span class="comment">// 判断是否是自己 是自己才打印</span></span><br><span class="line"><span class="keyword">while</span> (num != n) &#123;</span><br><span class="line">pthread_cond_wait(&amp;cond, &amp;mut);</span><br><span class="line">&#125;</span><br><span class="line">write(<span class="number">1</span>, &amp;id, <span class="number">1</span>);</span><br><span class="line">num = next(n);</span><br><span class="line">pthread_cond_broadcast(&amp;cond);</span><br><span class="line">pthread_mutex_unlock(&amp;mut);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="信号量">信号量</h5><p>用互斥量+条件变量实现信号量</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LEFT  30000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIGHT 30000200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THRNUM RIGHT - LEFT + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">mysem_t</span> *sem;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid[THRNUM];</span><br><span class="line"></span><br><span class="line">sem = mysem_init(N);</span><br><span class="line"><span class="keyword">if</span> (sem == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;mysem_init(): failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">mysem_sub(sem, <span class="number">1</span>);</span><br><span class="line">err = pthread_create(tid + i - LEFT, <span class="literal">NULL</span>, thr_prime, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 如果是创建最后一个线程时失败了 那么还要 给前面200个线程用join收尸</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = LEFT; i &lt;= RIGHT; i++) &#123;</span><br><span class="line">pthread_join(tid[i - LEFT], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysem_destroy(sem);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">thr_prime</span><span class="params">(<span class="type">void</span> *i_ptr)</span> &#123;</span><br><span class="line"><span class="type">int</span> j, is_prime;</span><br><span class="line"><span class="type">int</span> i = (<span class="type">int</span>)i_ptr;</span><br><span class="line"></span><br><span class="line">is_prime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++) &#123; <span class="comment">// sqrt(n) 更快 </span></span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">is_prime = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_prime)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysem_add(sem, <span class="number">1</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysem.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">mysem_st</span> &#123;</span></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mut;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond;</span><br><span class="line">&#125;mysem_st;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">mysem_t</span> *<span class="title function_">mysem_init</span><span class="params">(<span class="type">int</span> initval)</span> &#123;</span><br><span class="line">mysem_st *me;</span><br><span class="line">me = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(mysem_st));</span><br><span class="line"><span class="keyword">if</span>(me == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">me-&gt;value = initval;</span><br><span class="line">pthread_mutex_init(&amp;me-&gt;mut, <span class="literal">NULL</span>);</span><br><span class="line">pthread_cond_init(&amp;me-&gt;cond, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> me;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mysem_add</span><span class="params">(<span class="type">mysem_t</span> *sem, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">mysem_st *me = (mysem_st *) sem;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;me-&gt;mut);</span><br><span class="line">me-&gt;value += val;</span><br><span class="line">pthread_cond_broadcast(&amp;me-&gt;cond); <span class="comment">// 通知有资源来了</span></span><br><span class="line">pthread_mutex_unlock(&amp;me-&gt;mut);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mysem_sub</span><span class="params">(<span class="type">mysem_t</span> *sem, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">mysem_st *me = (mysem_st *) sem;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;me-&gt;mut);</span><br><span class="line"><span class="keyword">while</span> (me-&gt;value &lt; val) &#123;</span><br><span class="line">pthread_cond_wait(&amp;me-&gt;cond, &amp;me-&gt;mut);</span><br><span class="line">&#125;</span><br><span class="line">me-&gt;value -= val;</span><br><span class="line">pthread_mutex_unlock(&amp;me-&gt;mut);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mysem_destroy</span><span class="params">(<span class="type">mysem_t</span> *sem)</span> &#123;</span><br><span class="line">mysem_st *me = (mysem_st *) sem;</span><br><span class="line">pthread_mutex_destroy(&amp;me-&gt;mut);</span><br><span class="line">pthread_cond_destroy(&amp;me-&gt;cond);</span><br><span class="line"><span class="built_in">free</span>(me);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysem.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYSEM_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYSEM_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> <span class="type">mysem_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">mysem_t</span> *<span class="title function_">mysem_init</span><span class="params">(<span class="type">int</span> initval)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mysem_add</span><span class="params">(<span class="type">mysem_t</span> *sem, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mysem_sub</span><span class="params">(<span class="type">mysem_t</span> *sem, <span class="type">int</span> val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mysem_destroy</span><span class="params">(<span class="type">mysem_t</span> *sem)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h5 id="读写锁">读写锁</h5><p>共享锁+互斥锁</p><p>读锁是共享锁，写锁是互斥锁。</p><p>写优先策略（在文件外看来以为加了写锁）</p><h4 id="线程属性">线程属性</h4><p>80%的问题默认属性就可以解决。</p><h5 id="线程属性-2">线程属性</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_init</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_destroy</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setstacksize</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">size_t</span> stacksize)</span>;</span><br><span class="line"><span class="comment">// 其他见 see also</span></span><br></pre></td></tr></table></figure><p>测试最大线程数，但不好测因为肯定是PID数先耗尽</p><p>pause是干什么用的？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">pause();</span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">pthread_t</span> tid;</span><br><span class="line"><span class="type">pthread_attr_t</span> attr;</span><br><span class="line"></span><br><span class="line">pthread_attr_init(&amp;attr);</span><br><span class="line">pthread_attr_setstacksize(&amp;attr, <span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">err = pthread_create(&amp;tid, &amp;attr, func, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create(): %s\n&quot;</span>, strerror(err));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">pthread_attr_destroy(&amp;attr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程同步的属性">线程同步的属性</h5><p>互斥量属性</p><ul><li>pthread_mutexattr_init()</li><li>pthread_mutexattr_destroy()</li><li>pthread_mutexattr_getpshared()</li><li>pthread_mutexattr_setpshared() 跨进程 p:process（看clone思考）</li><li>clone() CLONE_FILE标识父子进程共享fd 而不是复制<ul><li>flags的不同决定什么共用什么不共用（两个极端就是进程与线程）</li></ul></li><li>从clone看 线程进程区分没那么明确</li></ul><p>条件变量属性</p><ul><li>pthread_condattr_init();</li><li>pthread_condattr_destroy();</li><li>pthread_mutexattr_get / setpshared()</li></ul><p>读写锁属性</p><h4 id="重入">重入</h4><h5 id="多线程中的IO">多线程中的IO</h5><p>线程任意情况都是可重入（线程是先有规范，后发展）</p><p>所有标准IO函数都支持多线程（有锁机制），操作缓冲区,lock -&gt; unlock</p><p>也有没有加锁的版本 <code>man putc_unlocked</code></p><h5 id="线程与信号">线程与信号</h5><ul><li>pthread_sigmask()</li><li>sigwait()</li><li>pthread_kill()</li></ul><h5 id="线程与fork">线程与fork</h5><p>不同线程标准不太一样</p><ul><li>posix: 保留调用fork的那一个线程</li></ul><h4 id="openmp标准">openmp标准</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel sections</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/2024/04/15/C%E8%AF%AD%E8%A8%80/%E8%BF%9B%E7%A8%8B/"/>
      <url>/2024/04/15/C%E8%AF%AD%E8%A8%80/%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="进程概述">进程概述</h3><p><strong>进程是什么？</strong></p><p>程序、文件是静态的，如果 a.out这种可执行程序不运行，没什么作用。</p><p>而进程是动态的，它是程序的一次运行过程，加载到内存中运行，而堆栈这种空间也是在运行过程中才会在不断存储数据。</p><p><strong>进程号PID是什么？</strong></p><p>每个进程都有一个进程号，用来唯一标识一个进程。</p><p><strong>进程常用命令</strong></p><ol><li>ps -aux</li><li>ps -ef</li><li>ps -axf</li><li>ps -axj</li><li>pstree</li><li>top / htop 任务管理器</li><li>kill -9 pid 杀死某进程 （-9指一种信号 表明杀死进程） 信号是系统预先定义好的</li><li>size a.out 查看可执行文件的 文本段，数据段，bss段的大小</li></ol><p><strong>进程是OS分配资源的最小单位，线程是OS调度任务的最小单位</strong></p><p><strong>进程的状态，如何转换？</strong></p><p>就绪态，运行态，暂停态，阻塞态，僵尸态</p><ul><li>就绪态就差CPU，等待被调度，而且<strong>只有就绪态能转变成运行态</strong></li><li>运行态可以通过STOP信号转变成暂停态，暂停态可以通过CONT信号变成就绪态</li><li>运行中的进程由于需要某种资源，运行态变成阻塞态，有了资源就会被唤醒，阻塞态变成就绪态</li><li>进程终止但是没被父进程回收，运行态变成僵尸态</li></ul><h3 id="进程标识PID">进程标识PID</h3><ul><li>getpid</li><li>getppid</li></ul><h3 id="进程的产生">进程的产生</h3><p>fork()  理解复制duplicate是什么意思，拷贝、一摸一样，连当时的执行位置都是一样的</p><p>不要凭空猜测父子进程谁先执行，由系统调度决定，sleep只是测试</p><p>fork 之前  fflush()的重要性</p><p>子进程及时 exit的重要性 避免无休止地fork</p><p>vfork: 未定义行为</p><p>fork: 写时拷贝技术 谁修改谁拷贝，总之别碰公用区域</p><h3 id="进程终止和资源释放">进程终止和资源释放</h3><p>分组的唯一作用：统一操作，方便管理，比如让这一组的全部进程完成关机功能</p><p>wait：死等 阻塞 不知道给谁收尸 只有通过参数才会知道</p><p>waitpid: 指定options参数  如果是0 和wait效果一样</p><p>如果是WNOHANG 非阻塞 没有达到收尸条件 就走人</p><p>僵尸进程不怎么占用空间，那是不是不用回收呢？不能，因为有进程就会占用PID，而PID数量是有上限的。</p><p><strong>进程分配</strong></p><p>分块：筛选质数 假设1-201 分三块1，2，3，同时执行，谁的负担最重？（其实是1 因为小的数也就是前面的数质数个数更多）</p><p>交叉分配：1给一 2给二 3给三 4给一 5 给二 6给三 7给1…. 一圈圈分 有一个进程拿到的永远不是质数，是某个数的倍数</p><p>池类算法：抢任务 竞争 锁 进程池 进程同步</p><h3 id="exec函数族">exec函数族</h3><p>既然是复制，既然是一摸一样 ./a.out的父进程是bash 为什么 ./a.out不是一个bash，不是一个shell？</p><p>复制一份，执行一摸一样的功能，有什么意义？</p><p>与fork的duplicate一样，exec的replace是什么意思？替换新的进程image是什么意思？</p><p>和fork一样，一定注意用刷新所有流</p><p>fork、wait、exec 配合使用</p><p>shell命令ls执行发生了什么？ shell作为父进程 执行fork，并用exec替换成ls程序，做完这些，就wait等待子进程ls终止，所以ls是先打印结果再显示终端。</p><p>这也可以解释之前prime1.c没有写wait打印出现的不正常现象。那为什么不再开一个终端，为什么父子进程在一个终端打印？因为子进程是fork出来的，文件描述符表（012标准输入输出出错）也是一摸一样的，虽然是两张表，但指向的是同一设备。这里其实父子进程已经可以通信了，因为指向的是同一份文件，那父进程往里写，子进程就可以读，同样子进程写，父进程也可以读，但是要考虑竞争问题。</p><p><strong>实现一个简单的shell</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glob.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELIM <span class="string">&quot; \t\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd_st</span> &#123;</span></span><br><span class="line"><span class="type">glob_t</span> globres;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">prompt</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mysh-1.0$ &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">parse</span><span class="params">(<span class="type">char</span> *line, <span class="keyword">struct</span> cmd_st *cmd)</span> &#123;</span><br><span class="line"><span class="type">char</span> *tok;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">tok = strsep(&amp;line, DELIM);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tok == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tok[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">glob(tok, GLOB_NOCHECK | GLOB_APPEND * i, <span class="literal">NULL</span>, &amp;cmd-&gt;globres);</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *linebuf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> linebuf_size;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd_st</span> <span class="title">cmd</span>;</span></span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">prompt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getline(&amp;linebuf, &amp;linebuf_size, <span class="built_in">stdin</span>) &lt; <span class="number">0</span>) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parse(linebuf, &amp;cmd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>) &#123;&#125; <span class="comment">// 内部命令 cd  ..</span></span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 外部命令 ls pwd whoami...</span></span><br><span class="line">fflush(<span class="literal">NULL</span>);</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// child</span></span><br><span class="line">execvp(cmd.globres.gl_pathv[<span class="number">0</span>], cmd.globres.gl_pathv);</span><br><span class="line"></span><br><span class="line">perror(<span class="string">&quot;execvp()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>cp myshell /usr/bin/myshell</p></li><li><p>创建一个测试用户  修改/etc/passwd 下 该用户的bash环境 从/bin/bash 改成 /usr/bin/myshell</p></li></ol></blockquote><h3 id="用户权限和组权限">用户权限和组权限</h3><ul><li>u+s  root权限下放</li><li>g+s</li></ul><p><code>passwd</code>如何实现的？做了什么？</p><p>passwd 这个可执行文件有 u+s权限，也就是用文件拥有者的权限替换了当前用户的权限，也就是有了root权限</p><p>鉴定权限看的是 effective user ID</p><ul><li><p>getuid() / geteuid()</p></li><li><p>getgid()</p></li><li><p>/ getegid()</p></li><li><p>setuid() / setgid() / seteuid() / setegid()</p></li><li><p>setreuid() / setregid() 原子化的交换 要么都交换 要么都不交换</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现 ./mysu 0 cat /etc/shadow 功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;uid&gt; &lt;command&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">setuid(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">execvp(argv[<span class="number">2</span>], argv + <span class="number">2</span>);</span><br><span class="line">perror(<span class="string">&quot;execvp()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接执行还是会提示 Permisson denied，毕竟要是谁都可以通过 <code>setuid()</code>直接使用root权限，那还要 <code>su -</code>这样的命令干什么呢？</p><ol><li>先用root权限 将 mysu可执行文件的拥有者改为root <code>sudo chown(change owner) root mysu</code></li><li>设置<code>u+s</code>权限 <code>sudo chmod u+s mysu</code></li></ol></blockquote><p><strong>解释器文件</strong></p><p>写一个脚本文件，后缀无所谓，sh、exec、doc、bat都行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">cat</span> /etc/shadow</span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>改成可执行文件 <code>chmod +x t.bat</code></p><p><code>#!/bin/bash</code>这里只是一句标识，将对应解释器文件（可执行文件）装载进来，让它解析该脚本文件的内容，那么第一行为什么没解析？因为#注释，解释器忽略了第一行。</p><p>把第一行改成 <code>#!/usr/bin/cat</code> 和 <code>cat t.bat</code>作用一样</p><h3 id="system">system()</h3><blockquote><p>The  system()  library  function uses fork(2) to create a  child process that executes the shell  command  specified in command using execl(3) as follows:</p><p>​<code>execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-c&quot;, command, (char *) NULL);</code></p></blockquote><p>理解：fork+exec+wait 的封装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">execl(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;date +%H:%M:%S&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">perror(<span class="string">&quot;execl()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进程会计与进程时间">进程会计与进程时间</h3><p><strong>进程会计</strong></p><p>acct() BSD的方言</p><p><strong>进程时间</strong></p><p>time 命令</p><p>times() 库函数 用这个实现 time命令</p><p>clock_t类型 一秒钟有多少个滴答数</p><h3 id="守护进程">守护进程</h3><p>脱离终端</p><p>会话：session（标识sid），一次成功地shell登录</p><p>终端：不是现在输入shell命令的终端，是一笨设备，只会输入输出</p><p>shell成功登陆后，有很多进程组，一个进程组有很多进程，一个进程中有很多线程</p><p>进程组有前台、后台进程组，前台只能有一个，可以没有</p><p>守护进程特点</p><blockquote><p>setsid()  creates  a  new session<code> if the calling process is  not a process group leader.</code>  The  calling  process  is  the  leader of the new session (i.e., <code>its session ID is made the same as its process ID</code>).  The calling process also  becomes the process group leader of a new process group in the session (i.e.,<code> its process group ID is made the  same  as  its process ID</code>).</p><p>The  calling  process  will  be the only process in the new process group and in the new session.</p><p>Initially, <code>the new session  has  no  controlling  terminal</code>.</p></blockquote><ol><li>sid == pid = pgid</li><li>脱离控制终端 tty 是 ？</li><li>只能是子进程调用，父进程也不用wait，因为它一直在后台运行，直到关机，fork之后，如果是父进程直接exit(0)，这时父进程就会变成Init进程，也就是说ppid=1</li></ol><ul><li>setsid()</li><li>setpgid() / getpgid()</li><li>getpgrp()</li></ul><p>单实例守护进程：锁文件 /var/run/name.pid 不能重复启动</p><p>启动脚本文件：/etc/rc*  开机自动启动</p><p>实现守护进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">define FNAME <span class="string">&quot;/tmp/daemon.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">daemonize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>) <span class="comment">// parent</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">&quot;/dev/null&quot;</span>, O_RDWR);</span><br><span class="line">dup2(fd, <span class="number">0</span>);</span><br><span class="line">dup2(fd, <span class="number">1</span>);</span><br><span class="line">dup2(fd, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fd &gt; <span class="number">2</span>)</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line">setsid();</span><br><span class="line">chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">// umask(0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (daemonize()) &#123;</span><br><span class="line">perror(<span class="string">&quot;daemonize()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fp = fopen(FNAME, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">// todo：脱离终端</span></span><br><span class="line">perror(<span class="string">&quot;fopen()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">fflush(<span class="literal">NULL</span>); <span class="comment">// 文件是全缓冲 stdouts</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>守护进程脱离终端 所以 setsid之前要</p><ul><li>关闭012这三个标准IO</li><li>之后要 chdir 到 / （这里没理解）</li><li>umask(0) （同上）</li></ul><p>ps -axj 查看是否产生守护进程</p><p><code>tail -f /tmp/daemon.log</code> 实时查看生成的日志文件</p><p>kill -9 PID 杀死守护进程</p><p>程序并不完整，因为守护进程脱离终端，报错信息肯定不能输出到标准输出上，而是写系统日志。</p></blockquote><h3 id="系统日志">系统日志</h3><p>syslogd服务</p><ul><li>openlog</li><li>closelog</li><li>syslog</li></ul><p>日志级别：LOG_ERR作为分界线，判断进程是否因此不能再执行下去</p><p><strong>加入系统日志的守护进程程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FNAME <span class="string">&quot;/tmp/daemon.log&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">daemonize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>) <span class="comment">// parent</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">&quot;/dev/null&quot;</span>, O_RDWR);</span><br><span class="line">dup2(fd, <span class="number">0</span>);</span><br><span class="line">dup2(fd, <span class="number">1</span>);</span><br><span class="line">dup2(fd, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fd &gt; <span class="number">2</span>)</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line">setsid();</span><br><span class="line">chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">// umask(0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line">openlog(<span class="string">&quot;mydaemon&quot;</span>, LOG_PID, LOG_DAEMON);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (daemonize()) &#123;</span><br><span class="line"><span class="comment">// 不需要加 \n 格式是 syslogd 服务控制的</span></span><br><span class="line">syslog(LOG_ERR, <span class="string">&quot;daemonize() failed!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">syslog(LOG_INFO, <span class="string">&quot;daemonize() success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fp = fopen(FNAME, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">syslog(LOG_ERR, <span class="string">&quot;fopen(): %s&quot;</span>, strerror(errno));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">syslog(LOG_INFO, <span class="string">&quot;%s was opened.&quot;</span>, FNAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">fflush(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">syslog(LOG_DEBUG, <span class="string">&quot;%d was written to %s.&quot;</span>, i, FNAME);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行不到这里</span></span><br><span class="line">fclose(fp);</span><br><span class="line">closelog();</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>strerror(int errno) 将错误码映射成字符串，也就是对应的错误信息</p><p>不同机器系统日志文件的位置也不同</p><p>这里是写到了 /var/log/syslog 中</p><p><code>tail -f /var/log/syslog</code></p><p><code>cat /var/log/syslog | grep &quot;mydaemon&quot;</code></p><p>May 28 15:57:21 localhost mydaemon[349526]: daemonize() success!<br>May 28 15:57:21 localhost mydaemon[349526]: /tmp/daemon.log was opened.<br>May 28 15:57:21 localhost mydaemon[349526]: 0 was written to /tmp/daemon.log.<br>May 28 15:57:22 localhost mydaemon[349526]: 1 was written to /tmp/daemon.log.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell编程</title>
      <link href="/2024/04/10/C%E8%AF%AD%E8%A8%80/shell/"/>
      <url>/2024/04/10/C%E8%AF%AD%E8%A8%80/shell/</url>
      
        <content type="html"><![CDATA[<h4 id="第一个shell-echo-sh">第一个shell: <a href="http://echo.sh">echo.sh</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim echo.sh</span><br></pre></td></tr></table></figure><p><a href="http://echo.sh">echo.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;hello world&quot;</span><br><span class="line">echo -n &quot;hello world&quot;</span><br><span class="line">echo -e &quot;hello\n world&quot;</span><br><span class="line"></span><br><span class="line">echo -e &quot;\033[30m 黑色字 \033[0m&quot;</span><br><span class="line">echo -e &quot;\033[31m 红色字 \033[0m&quot;</span><br></pre></td></tr></table></figure><ul><li><code>#!/bin/bash</code> 必须有 用来说明用什么 bash解析</li><li>-n 不换行-e 激活转义字符</li><li>彩色字 用的是 ASCII 控制码</li></ul><p>修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x echo.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">chmod 755 echo.sh</span><br></pre></td></tr></table></figure><p>执行shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./echo.sh</span><br><span class="line"></span><br><span class="line">sh ./echo.sh</span><br></pre></td></tr></table></figure><h4 id="变量">变量</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> adachi shimamura;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `<span class="built_in">ls</span> /etc/apt`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反引号可以识别命令</p><h4 id="字符串">字符串</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">skill=<span class="string">&#x27;Java&#x27;</span></span><br><span class="line">str=<span class="string">&#x27;I am good at $skill&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;I am good at <span class="variable">$skill</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:3&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:3:2&#125;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> am`</span><br><span class="line"><span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> am</span><br><span class="line"></span><br><span class="line">skill=<span class="string">&#x27;Java&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;skill&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#skill&#125;</span></span><br><span class="line"><span class="built_in">expr</span> length <span class="variable">$skill</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>单引号识别不了变量，双引号可以</p><p>expr 运算工具，也有其他，比如<code>(( var++ ))</code></p><h4 id="传递参数">传递参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;参数个数：<span class="variable">$#</span>&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;\$@：<span class="variable">$@</span>&quot;</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;\$*：$*&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$@ 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$* 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string">for file in $(ls /etc); do</span></span><br><span class="line"><span class="string">echo $file</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="read">read</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string"># echo -n &quot;enter your name: &quot;</span></span><br><span class="line"><span class="string"># read name</span></span><br><span class="line"><span class="string">read -p &quot;enter your name: &quot; name</span></span><br><span class="line"><span class="string">echo &quot;hello $name!&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">read -p &quot;enter your age: &quot; age</span></span><br><span class="line"><span class="string">if [ $age -gt 18 ]; then</span></span><br><span class="line"><span class="string">echo &quot; &gt; 18 &quot;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">echo &quot; &lt; 18 &quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; param.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加上 -p 可以直接在后面跟变量，读文件一行行读</p><h4 id="算数运算">算数运算</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=4</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="comment">#加法运算</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> $[a + b]</span><br><span class="line"></span><br><span class="line"><span class="comment">#减法运算</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> $[a - b]</span><br><span class="line"></span><br><span class="line"><span class="comment">#乘法运算，注意*号前面需要反斜杠</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> $[a * b]</span><br><span class="line"></span><br><span class="line"><span class="comment">#除法运算</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> $[a / b]</span><br><span class="line"></span><br><span class="line"><span class="comment">#let</span></span><br><span class="line"><span class="built_in">let</span> a=5</span><br><span class="line"><span class="built_in">let</span> a+=2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>反引号识别命令</li><li>$[  ] / let 可以直接计算 不用 expr</li></ul><h4 id="目录操作">目录操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FILE_PATH=<span class="string">&quot;/home/ubuntu/test/math.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">dirname</span> <span class="variable">$FILE_PATH</span>)</span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">basename</span> <span class="variable">$FILE_PATH</span>)</span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">realpath</span> <span class="variable">$FILE_PATH</span>)</span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">pwd</span> <span class="variable">$FILE_PATH</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 反引号也可以</p><h4 id="流程控制">流程控制</h4><h5 id="if">if</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=20</span><br><span class="line">b=10</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 需求1: 判断 a 是否 100</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$a</span> -gt 100 ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 大于 100&quot;</span></span><br><span class="line"> <span class="keyword">elif</span> [ <span class="variable">$a</span> -gt 20 ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 大于 20&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于等于 20&quot;</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 需求2: 判断 a 是否等于 b</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 等于 <span class="variable">$b</span>&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 不等于 <span class="variable">$b</span>&quot;</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 需求3: 判断 a 与 b 比较</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 <span class="variable">$b</span>&quot;</span></span><br><span class="line"> <span class="keyword">elif</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 等于 <span class="variable">$b</span>&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 大于 <span class="variable">$b</span>&quot;</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 需求4: 判断 (a + 10) 和 (b * b) 比较大小</span></span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">test</span>  $[ a + 10 ] -gt $[ b * b ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;(a+10): $[ a + 10 ]  大于 (b * b): $[ b * b ]&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;(a+10): $[ a + 10 ]  小于等于 (b * b): $[ b * b ]&quot;</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>条件表达式 [] 两边必须有空格 检查很严格</p><p>如果需要进行计算  比如需求4 要加 test</p><h5 id="for">for</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 1 - 5</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> 1 2 3 4 5; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$n</span> &quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 1 - 100</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$n</span> &quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 1 - 100 奇数</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..100..2&#125;; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$n</span> &quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 根目录 下的内容</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> ./`; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="while">while</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string">i=0</span></span><br><span class="line"><span class="string">sum=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while [ $i -le 100 ]; do</span></span><br><span class="line"><span class="string">sum=$[ sum + i ]</span></span><br><span class="line"><span class="string">i=$[ i + 1 ]</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;sum = $sum&quot;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string">i=0</span></span><br><span class="line"><span class="string">sum=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while [ $i -le 100 ]; do</span></span><br><span class="line"><span class="string">let sum+=i</span></span><br><span class="line"><span class="string">let i++</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;sum = $sum&quot;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line">: <span class="string">&#x27;  这个是块注释</span></span><br><span class="line"><span class="string">i=0</span></span><br><span class="line"><span class="string">sum=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while [ $i -le 99 ]; do</span></span><br><span class="line"><span class="string">(( sum += i ))</span></span><br><span class="line"><span class="string">(( i++ ))</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;sum = $sum&quot;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line"><span class="comment">#date</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="switch">switch</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string">while true; do</span></span><br><span class="line"><span class="string">read -p &quot;输入 1 到 4 之间的数字(q to quit): &quot; aNum</span></span><br><span class="line"><span class="string">case $aNum in</span></span><br><span class="line"><span class="string">1)  echo &#x27;</span>你选择了 1<span class="string">&#x27;</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">2)  echo &#x27;</span>你选择了 2<span class="string">&#x27;</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">3)  echo &#x27;</span>你选择了 3<span class="string">&#x27;</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">4)  echo &#x27;</span>你选择了 4<span class="string">&#x27;</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">q)  break</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">*)  echo &#x27;</span>你没有输入 1 到 4 之间的数字<span class="string">&#x27;</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string"> # 需求: 执行死循环 每隔1秒打印当前时间, 执行10次停止</span></span><br><span class="line"><span class="string"> i=0;</span></span><br><span class="line"><span class="string"> while true; do</span></span><br><span class="line"><span class="string"> sleep 1</span></span><br><span class="line"><span class="string"> echo $i `date +&quot;%Y-%m-%d %H:%M:%S&quot;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> (( i++ ))</span></span><br><span class="line"><span class="string"> if [ $i -eq 10 ]; then</span></span><br><span class="line"><span class="string"> break</span></span><br><span class="line"><span class="string"> fi</span></span><br><span class="line"><span class="string"> done</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求: 打印 1 - 30 忽略 3 的倍数</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..30&#125;; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[ n % 3 ] -eq 0; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="函数间调用">函数间调用</h4><p><a href="http://StringUtils.sh">StringUtils.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stringcopy</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;string copy&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://main.sh">main.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> StringUtils.sh</span><br><span class="line"></span><br><span class="line">stringcopy</span><br></pre></td></tr></table></figure><h4 id="数组">数组</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_array=(A B <span class="string">&quot;C&quot;</span> D)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个元素为: <span class="variable">$&#123;my_array[1]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个元素为: <span class="variable">$&#123;my_array[2]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个元素为: <span class="variable">$&#123;my_array[3]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为: <span class="variable">$&#123;my_array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为: <span class="variable">$&#123;my_array[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> <span class="variable">$&#123;my_array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ele</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">for</span> ((i = 0; i &lt; <span class="variable">$&#123;#my_array[@]&#125;</span>; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_array[$i]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在有一个需求，在一个脚本中定义数组，在另一个脚本中遍历</p><p><a href="http://defineArr.sh">defineArr.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">arr=(Java C++ JavaScript Shell)</span><br></pre></td></tr></table></figure><p><a href="http://main.sh">main.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$e</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="菜单案例">菜单案例</h4><p>工具脚本 func_tool.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backup</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;backup&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;copy&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">quit</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;quit&quot;</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">other</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;enter again&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://menu.sh">menu.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> func_tool.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"> **************</span></span><br><span class="line"><span class="string"> ** 1.backup **</span></span><br><span class="line"><span class="string"> ** 2.copy   **</span></span><br><span class="line"><span class="string"> ** 3.quit   **</span></span><br><span class="line"><span class="string"> **************</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;enter your choice: &quot;</span> op</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$op</span> <span class="keyword">in</span></span><br><span class="line">1|backup)</span><br><span class="line">backup</span><br><span class="line">;;</span><br><span class="line">2|copy)</span><br><span class="line">copy</span><br><span class="line">;;</span><br><span class="line">3|quit)</span><br><span class="line">quit</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">other</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="正则-regex">正则 regex</h4><p>data.txt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kimi:<span class="number">18</span>:female</span><br><span class="line">adachi:<span class="number">20</span>:female</span><br><span class="line">shimamura:<span class="number">20</span>:female</span><br></pre></td></tr></table></figure><p>用 cut、sed、awk命令 处理文件</p><h5 id="cut-命令">cut 命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f2,3 data.txt</span><br></pre></td></tr></table></figure><p>获取 第二列和第三列</p><h5 id="sed">sed</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/male/female/g&#x27;</span> data.txt</span><br></pre></td></tr></table></figure><p>全局替换 male 改成 female</p><h5 id="awk">awk</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v FS=<span class="string">&#x27;:&#x27;</span> -v OFS=<span class="string">&#x27;---&#x27;</span> <span class="string">&#x27;&#123;print $1,$2,$3&#125;&#x27;</span> data.txt</span><br></pre></td></tr></table></figure><h5 id="grep">grep</h5>]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile</title>
      <link href="/2024/03/25/C%E8%AF%AD%E8%A8%80/Makefile/"/>
      <url>/2024/03/25/C%E8%AF%AD%E8%A8%80/Makefile/</url>
      
        <content type="html"><![CDATA[<h4 id="makefile-三要素">makefile 三要素</h4><ul><li>目标</li><li>依赖（先决条件）</li><li>命令（TAB键）</li></ul><h4 id="makefile版本一">makefile版本一</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main: main.o cal.o input.o</span></span><br><span class="line">gcc -o main main.o cal.o input.o</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">cal.o:: cal.c</span></span><br><span class="line">gcc -c cal.c</span><br><span class="line"></span><br><span class="line"><span class="section">input.o:: input.c</span></span><br><span class="line">gcc -c input.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o main</span><br></pre></td></tr></table></figure><h4 id="版本二">版本二</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean # 伪对象</span></span><br><span class="line"></span><br><span class="line"><span class="section">main: main.o cal.o input.o</span></span><br><span class="line">gcc -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o main</span><br></pre></td></tr></table></figure><blockquote><p>伪对象解决的问题：如果项目下出现 同名文件clean  这时候 make clean命令就会失效 因为make把 clean当成了文件</p><p>$@:  每条规则中的 目标 也就是冒号前</p><p>$^: 每条规则中的 依赖（先决条件）所有参数 也就是冒号后</p><p>$&lt;: 每条规则中的 依赖的第一个参数</p></blockquote><h4 id="版本三">版本三</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean # 伪对象</span></span><br><span class="line"></span><br><span class="line">CC=gcc</span><br><span class="line">EXE=main</span><br><span class="line">OBJS=main.o cal.o input.o</span><br><span class="line">RM=rm -f</span><br><span class="line"></span><br><span class="line"><span class="variable">$(EXE)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(EXE)</span></span><br></pre></td></tr></table></figure><p>自定义变量，这样项目文件发生变化时只需要修改变量值</p><h4 id="版本四">版本四</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean # 伪对象</span></span><br><span class="line"></span><br><span class="line">CC=gcc</span><br><span class="line">EXE=main</span><br><span class="line">SRCS=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">OBJS=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">RM=rm -f</span><br><span class="line"></span><br><span class="line"><span class="variable">$(EXE)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(EXE)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">print:</span></span><br><span class="line">@echo <span class="variable">$(SRCS)</span></span><br><span class="line">@echo <span class="variable">$(OBJS)</span></span><br></pre></td></tr></table></figure><p>使用函数 wildcard(通配符) patsubst(字符串替换)</p><p>如果项目添加了 test.c，版本三还需要在变量后添加 test.o，但是在这个版本就不用再添加</p><p>可以添加自定义命令，比如上面的print 打印SRCS OBJS查看目标和源文件寻找替换的是否正确，注意用 patsubst替换时 用的是 %.c 不是 *.c</p><h4 id="函数">函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean # 伪对象</span></span><br><span class="line"></span><br><span class="line">CC=gcc</span><br><span class="line">EXE=main</span><br><span class="line">SRCS=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">OBJS=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">RM=rm -f</span><br><span class="line"></span><br><span class="line">FILTER_SRCS=<span class="variable">$(<span class="built_in">filter</span> main%.c,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">FILTER_OUT_SRCS=<span class="variable">$(<span class="built_in">filter</span>-out main%.c,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">ADD_PREFIX_SRCS=<span class="variable">$(<span class="built_in">addprefix</span> src/,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$(EXE)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(EXE)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">print:</span></span><br><span class="line">@echo <span class="variable">$(SRCS)</span></span><br><span class="line">@echo <span class="variable">$(OBJS)</span></span><br><span class="line">@echo <span class="variable">$(FILTER_SRCS)</span></span><br><span class="line">@echo <span class="variable">$(FILTER_OUT_SRCS)</span></span><br><span class="line">@echo <span class="variable">$(ADD_PREFIX_SRCS)</span></span><br></pre></td></tr></table></figure><ul><li>wildcard *.c 拿到所有源文件</li><li>patsubst %.c, %.o  字符串替换 目的是为了赋给 OBJS</li><li>filter 保留符合格式的文件</li><li>filter-out 排除符合格式的文件</li><li>addprefix 加前缀</li></ul><h4 id="赋值符">赋值符</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">name = kimi</span><br><span class="line"></span><br><span class="line"><span class="comment"># cname = $(name)</span></span><br><span class="line"><span class="comment"># cname := $(name)</span></span><br><span class="line"></span><br><span class="line">cname ?= shimamura</span><br><span class="line"></span><br><span class="line">name = adachi</span><br><span class="line"></span><br><span class="line"><span class="section">print:</span></span><br><span class="line">@echo cname = <span class="variable">$(cname)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>=   可以使用 前后的变量</li><li>:=   只可以使用前面的变量</li><li>?=  如果前面定义了就使用原来的，前面没有定义才使用这里的值</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端命令问题</title>
      <link href="/2024/03/23/C%E8%AF%AD%E8%A8%80/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/23/C%E8%AF%AD%E8%A8%80/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="GitHub如何生成SSH-key">GitHub如何生成SSH key</h3><p>首先在本地生成公钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>公钥默认生成在用户目录下的 .ssh目录下的 id_ed25519.pub中</p><p>进入Github 进入SSH页面</p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240523213636550.png" alt="image-20240523213636550" style="zoom: 33%;" /><p>复制到key中 生成即可，这样就可以用 git 将本地代码推送到GitHub仓库中了</p><p>Gitee同理</p><p>最后测试SSH连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>有时候配置好了还是会出现 连接被拒绝或者找不到仓库的问题，可能有几个原因</p><p>这里把SSH远程连接云服务器错误原因也放在这里了</p><ol><li>缓存问题，将.ssh文件夹下的 known_host known_host_old 删掉 再重试</li><li>bash环境切换问题 别装zsh （仅对于云服务器）</li><li>网络 / 代理问题，把魔法关了重试</li><li>重启 终端 或者 多试几次</li><li>防火墙开了之后，没开放22端口 <code>sudo ufw allow 22/tcp</code></li></ol><p>参考：</p><p><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p><p><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection">https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection</a></p><p><a href="https://m.w3cschool.cn/githubcn/githubcn-mur43ad5.html">https://m.w3cschool.cn/githubcn/githubcn-mur43ad5.html</a></p><h3 id="ubuntu安装vscode">ubuntu安装vscode</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install --classic code</span><br></pre></td></tr></table></figure><p>参考:</p><p><a href="https://code.visualstudio.com/docs/setup/linux">https://code.visualstudio.com/docs/setup/linux</a></p><h3 id="hexo-d失败">hexo d失败</h3><ul><li>ssh -T <a href="mailto:git@github.com">git@github.com</a> 测试连接</li><li>删掉 .ssh/known_hosts* 重试</li></ul><h3 id="虚拟机快捷键">虚拟机快捷键</h3><p>ctrl+alt+F5/F6 无图形化界面终端</p><p>ctrl+alt+F1 返回图形化登录界面</p><p>ctrl+alt+F2 返回进入无图形化终端前的 图形化界面</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3</title>
      <link href="/2024/03/20/C%E8%AF%AD%E8%A8%80/sqlite/"/>
      <url>/2024/03/20/C%E8%AF%AD%E8%A8%80/sqlite/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库的组成">数据库的组成</h3><ul><li>操作系统 OS</li><li>数据库管理系统 DMS</li><li>数据库管理员 DBA</li></ul><h3 id="创建表和删除表">创建表和删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">tb_worker(wid <span class="type">char</span>(<span class="number">18</span>), tel <span class="type">char</span>(<span class="number">11</span>), name <span class="type">varchar</span>(<span class="number">10</span>), salary <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用其他表的查询结果创建新的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_worker;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 第一种写法</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student(id, name, age) <span class="keyword">VALUES</span>(<span class="number">6</span>, <span class="string">&#x27;kimi&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二种写法 默认全部字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student <span class="keyword">VALUES</span>(<span class="number">7</span>, <span class="string">&#x27;kimi&#x27;</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定 某些字段 但是必须包含 NOT NULL 的字段 其他默认为NULL</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student(id, age) <span class="keyword">VALUES</span>(<span class="number">8</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 相当于复制表  要求两个表结构 要相同</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user1 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多行数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;kimi&#x27;</span>, <span class="number">15</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;kimi&#x27;</span>, <span class="number">15</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;kimi&#x27;</span>, <span class="number">15</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除数据">删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表中所有数据 并不像 DROP 去删除表</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student;</span><br><span class="line"><span class="comment">-- 删除某一行</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> tb_student.id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> tb_student.name <span class="operator">=</span> <span class="string">&#x27;kimi&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="查询数据">查询数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> demo;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> demo;</span><br><span class="line"><span class="keyword">SELECT</span> id, name <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span>, demo.Hint <span class="keyword">AS</span> <span class="string">&#x27;介绍&#x27;</span> <span class="keyword">FROM</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">name <span class="operator">=</span> <span class="string">&#x27;Paul&#x27;</span> </span><br><span class="line"><span class="keyword">OR</span> </span><br><span class="line">name <span class="operator">=</span> <span class="string">&#x27;Allen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.ADDRESS <span class="operator">=</span> <span class="string">&#x27;Texas&#x27;</span></span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">worker.AGE <span class="operator">=</span> <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.AGE <span class="operator">&gt;=</span> <span class="number">26</span></span><br><span class="line"><span class="keyword">OR</span></span><br><span class="line">worker.SALARY <span class="operator">&gt;=</span> <span class="number">65000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.AGE <span class="keyword">BETWEEN</span> <span class="number">25</span> <span class="keyword">AND</span> <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.name <span class="keyword">IN</span>(<span class="string">&#x27;Paul&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.AGE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">worker.name <span class="keyword">LIKE</span> <span class="string">&#x27;_a%&#x27;</span>; <span class="comment">-- _表示一个占位符 %表示多个( &gt;= 0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>like 中的 % 一般不放在前面 因为会导致索引失效 影响查询效率</p></blockquote><h3 id="更新">更新</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> </span><br><span class="line">name <span class="operator">=</span> <span class="string">&#x27;tamako&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> </span><br><span class="line">name <span class="operator">=</span> <span class="string">&#x27;kimi&#x27;</span>,</span><br><span class="line">id <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;tamako&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> </span><br><span class="line">name <span class="operator">=</span> <span class="string">&#x27;kimi&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;takagi&#x27;</span> <span class="keyword">AND</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="order-by">order by</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>; <span class="comment">-- 默认 asc 升序 可省略</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="索引">索引</h3><p>索引操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单列索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX index_id <span class="keyword">on</span> worker(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX index_name_id <span class="keyword">on</span> worker(name, id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合索引 要满足最左匹配原则 不然会导致索引失效 id 可写可不写 但name必须有且在最前面 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;zs&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX index_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_id <span class="keyword">on</span> worker(id);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name <span class="keyword">on</span> worker(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(name, age) <span class="keyword">VALUES</span>(<span class="string">&#x27;Paul&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker;</span><br></pre></td></tr></table></figure><p>加快查询速度但是占用额外空间</p><p>相当于另外一个表 数据结构，适合多读少写的表，因为创建索引后 插入更新操作更慢了，因为还要更新索引表</p><ul><li>小表 不要用索引</li><li>有频繁的更新插入操作的表 不要用索引</li><li>有大量重复值 / 大量NULL值 / 有频繁更新插入操作 的列上 不要用索引</li></ul><p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240506161650932.png" alt=""></p><p>索引的种类</p><ul><li>hash索引  <strong>不适合做范围查询</strong></li><li>二叉树  b+树 索引<ul><li>节点存储据 找到了直接取</li><li>节点存地址 根据地址找到存数据的位置</li><li>平衡二叉树：左右节点相当 通过左旋右旋调整</li></ul></li></ul><p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240506163015749.png" alt=""></p><h3 id="系统表">系统表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sqlite_master;</span><br><span class="line"><span class="keyword">SELECT</span> type, name, tbl_name <span class="keyword">FROM</span> sqlite_master <span class="keyword">WHERE</span> type <span class="operator">=</span> <span class="string">&#x27;table&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="sql执行顺序">sql执行顺序</h3><p>from —&gt;  on   —&gt;   join   —&gt;   where   —&gt;   select</p><h3 id="命令行常用命令">命令行常用命令</h3><ul><li><code>.mode box / table / column</code> 美化显示</li><li><code>.indices / .indexes</code> 显示索引</li><li><code>.header on</code> 查询结果显示 列名</li><li><code>.tables</code> 当前数据库的表</li><li><code>.databases</code> 当前数据库</li></ul><h3 id="约束">约束</h3><ul><li><code>NOT NULL</code> ⭐</li><li><code>DEFAULT</code></li><li><code>UNIQUE</code>  ⭐</li><li><code>PRIMARY KEY</code> ⭐<ul><li>主键 == UNIQUE + NOT NULL （与其他不同）</li><li>只能有一个主键 可以把多个字段 作为一个主键</li><li>可以是NULL 与 mysql… 不同</li><li><strong>与数据类型有关  如果是 int  可以为NULL 但如果是 INTEGER 就会自增 就算赋 NULL值 也会忽略</strong></li></ul></li><li><code>CHECK</code></li><li><code>外键约束</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> worker (</span><br><span class="line">wid <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;kimi&#x27;</span>,</span><br><span class="line">salary <span class="type">real</span> <span class="keyword">DEFAULT</span> <span class="number">5000</span>,</span><br><span class="line">age <span class="type">integer</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span> (age <span class="operator">&gt;</span> <span class="number">15</span>),</span><br><span class="line">tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;13563742464&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(age) <span class="keyword">VALUES</span>(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(age) <span class="keyword">VALUES</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(age) <span class="keyword">VALUES</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(name, age, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;adachi&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;10000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;shimamura&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker;</span><br></pre></td></tr></table></figure><blockquote><p>sqlite 不能删除约束 添加约束 只能 重新建表 把 旧表的数据迁移过去</p><p><a href="https://www.sqlite.org/lang_altertable.html">https://www.sqlite.org/lang_altertable.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_example_table (</span><br><span class="line">    id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    email TEXT <span class="keyword">UNIQUE</span>,</span><br><span class="line">    name TEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> new_example_table <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> example_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> example_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> new_example_table RENAME <span class="keyword">TO</span> example_table;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建新表 -&gt; 复制数据 -&gt; 删除旧表 -&gt; 重命名为旧表</p><p><img src="https://shaohua-1313651385.cos.ap-guangzhou.myqcloud.com/img/image-20240507105427578.png" alt=""></p></blockquote><h3 id="ALTER-TABLE">ALTER TABLE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> worker (</span><br><span class="line">wid <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;kimi&#x27;</span>,</span><br><span class="line">salary <span class="type">real</span> <span class="keyword">DEFAULT</span> <span class="number">5000</span>,</span><br><span class="line">age <span class="type">integer</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span> (age <span class="operator">&gt;</span> <span class="number">15</span>),</span><br><span class="line">tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;13563742464&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(age) <span class="keyword">VALUES</span>(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(age) <span class="keyword">VALUES</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(wid, age) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(name, age, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;adachi&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;10000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> worker(name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;shimamura&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个 不包含 age UNIQUE约束 结构的新表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> woker_tmp (</span><br><span class="line">  wid <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;kimi&#x27;</span>,</span><br><span class="line">salary <span class="type">real</span> <span class="keyword">DEFAULT</span> <span class="number">5000</span>,</span><br><span class="line">age <span class="type">integer</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span> (age <span class="operator">&gt;</span> <span class="number">15</span>),</span><br><span class="line">tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;13563742464&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> woker_tmp <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> worker;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> woker_tmp RENAME <span class="keyword">TO</span> worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker;</span><br></pre></td></tr></table></figure><h3 id="Join">Join</h3><blockquote><ol><li>注意外键声明的语法</li><li>注意级联删除语法</li><li>删除数据的两种写法</li><li>多表联查的两种写法</li><li>区分 inner join / left join / outer join</li><li>USING 用法  当两个表的 相关字段名 一样 可以代替ON</li><li>多表联查 和 外键约束 是两个独立的东西，加外键约束 是为了限制 一些不合理的操作，比如插入员工数据 给的 dept_id 在dept表根本不存在，或者实现一些级联删除操作等</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;产品部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;开发部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;测试部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">dept_id <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(dept_id) </span><br><span class="line">    <span class="keyword">REFERENCES</span> dept(id) </span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;kimi&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;tamako&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;adachi&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;shimamura&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;nixikada&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;takagi&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(name, dept_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;takagi&#x27;</span>, <span class="number">6</span>); <span class="comment">-- FOREIGN KEY CONSTRAINT failed</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先删掉 部门的员工 再删掉部门 直接删掉部门 会有外键约束报错</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dept.id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 级联删除 ON DELETE CASCADE</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dept.id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept; <span class="comment">-- * 测试用即可 实际工作不要用 * </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不加 on 限制 会产生笛卡尔积 即每个员工 都要与所有部门匹配(实际每个员工只会属于一个部门) 这是错误的</span></span><br><span class="line"><span class="keyword">SELECT</span> e.name <span class="keyword">AS</span> <span class="string">&#x27;员工名&#x27;</span>, d.name <span class="keyword">AS</span> <span class="string">&#x27;部门名&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 另一种写法</span></span><br><span class="line"><span class="keyword">SELECT</span> e.name <span class="keyword">AS</span> <span class="string">&#x27;员工名&#x27;</span>, d.name <span class="keyword">AS</span> <span class="string">&#x27;部门名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> emp e, dept d</span><br><span class="line"><span class="keyword">WHERE</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 三表查</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">identity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">identity</span> (</span><br><span class="line">id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">identity_id <span class="type">char</span>(<span class="number">18</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">identity</span>(name, identity_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;kimi&#x27;</span>, <span class="string">&#x27;410259205409233853&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">identity</span>(name, identity_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;tamako&#x27;</span>, <span class="string">&#x27;410259209409233853&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">identity</span>(name, identity_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;shimamura&#x27;</span>, <span class="string">&#x27;410259202409233853&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">identity</span>(name, identity_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;adachi&#x27;</span>, <span class="string">&#x27;410251209409233853&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">identity</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e.name <span class="keyword">AS</span> <span class="string">&#x27;员工姓名&#x27;</span>,</span><br><span class="line">d.name <span class="keyword">AS</span> <span class="string">&#x27;部门姓名&#x27;</span>,</span><br><span class="line">i.identity_id <span class="keyword">AS</span> <span class="string">&#x27;身份证号&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d <span class="keyword">ON</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">identity</span> i <span class="keyword">ON</span> e.name <span class="operator">=</span> i.name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN INNER JOIN 区别</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept d <span class="keyword">ON</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp e <span class="keyword">ON</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- USING 用法</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept_tmp;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept_tmp (</span><br><span class="line">dept_id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept_tmp(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;产品部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept_tmp(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;开发部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept_tmp(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;测试部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept_tmp(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept_tmp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">e.name <span class="keyword">AS</span> <span class="string">&#x27;员工姓名&#x27;</span>,</span><br><span class="line">d.name <span class="keyword">AS</span> <span class="string">&#x27;部门&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> emp e </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_tmp d <span class="keyword">USING</span>(dept_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用函数">常用函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> func_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> func_user (</span><br><span class="line">id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> func_user(username, password) <span class="keyword">VALUES</span> (<span class="string">&#x27;adachi&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COUNT</span>( <span class="operator">*</span> ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">func_user </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">username <span class="operator">=</span> <span class="string">&#x27;adac2hi&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> password <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">name,</span><br><span class="line">salary,</span><br><span class="line">salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">AS</span> <span class="string">&#x27;薪水+100&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;员工薪水=5000人数&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">worker</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(salary) <span class="keyword">FROM</span> worker;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">min</span>(salary) <span class="keyword">FROM</span> worker;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">max</span>( salary ) <span class="keyword">AS</span> <span class="string">&#x27;最高薪水&#x27;</span>,</span><br><span class="line"><span class="built_in">min</span>( salary ) <span class="keyword">AS</span> <span class="string">&#x27;最低薪水&#x27;</span>,</span><br><span class="line"><span class="built_in">AVG</span>( salary ) <span class="keyword">AS</span> <span class="string">&#x27;平均薪水&#x27;</span>,</span><br><span class="line"><span class="built_in">SUM</span>( salary ) <span class="keyword">AS</span> <span class="string">&#x27;发出薪水&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">name <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line"><span class="built_in">UPPER</span>( name ) <span class="keyword">AS</span> <span class="string">&#x27;大写&#x27;</span>,</span><br><span class="line">LENGTH( name ) <span class="keyword">AS</span> <span class="string">&#x27;姓名长度&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SQLITE_VERSION();</span><br></pre></td></tr></table></figure><h3 id="视图View">视图View</h3><blockquote><ul><li>视图是个虚表  本身没有数据</li><li>优点<ul><li>封装复杂查询，简化 sql 语句编写（特别是多表查询）</li><li>隐藏实际表  只暴露 视图 （两家公司数据库对接）</li></ul></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AS 后 起什么别名 有文档说明</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_emp <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">e.name <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">d.name <span class="keyword">AS</span> <span class="string">&#x27;部门&#x27;</span>,</span><br><span class="line">i.identity_id <span class="keyword">AS</span> <span class="string">&#x27;身份证号&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept d <span class="keyword">ON</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">identity</span> i <span class="keyword">ON</span> i.name <span class="operator">=</span> e.name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_emp; <span class="comment">-- 数据库层面的接口对接</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v_emp;</span><br></pre></td></tr></table></figure><h3 id="事务Transaction">事务Transaction</h3><blockquote><ul><li>ACID<ul><li>Atomicity：原子性 要执行都执行 有一个操作有问题 都要回滚</li><li>Consistency：一致性</li><li>Isolation：隔离性 事务之间独立</li><li>Durability：持久性</li></ul></li><li>事务隔离级别<ul><li>mysql这种功能强大 sqlite 几乎没有</li></ul></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transaction_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> transaction_user (</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">balance <span class="type">real</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transaction_user(name, balance) <span class="keyword">VALUES</span> (<span class="string">&#x27;zs&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transaction_user(name, balance) <span class="keyword">VALUES</span> (<span class="string">&#x27;ls&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> transaction_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> transaction_user </span><br><span class="line"><span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> </span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> transaction_user </span><br><span class="line"><span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> </span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="comment">-- ROLLBACK;</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h3 id="备份和恢复">备份和恢复</h3><p>比如要备份 <code>test1.db </code> 到 <code>test2.db</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 test1.db</span><br><span class="line"></span><br><span class="line">.output backup.sql</span><br><span class="line">.dump</span><br><span class="line">.q</span><br><span class="line"></span><br><span class="line">sqlite3 test2.db</span><br><span class="line"></span><br><span class="line">.read backup.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证是否 备份完成</span></span><br></pre></td></tr></table></figure><p>如果要备份单个表 <code>worker</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.output backup.sql</span><br><span class="line">.dump worker</span><br><span class="line">.q</span><br><span class="line"></span><br><span class="line">sqlite3 test2.db</span><br><span class="line"></span><br><span class="line">.read backup.sql</span><br></pre></td></tr></table></figure><blockquote><p>.output xxx.sql 表示 之后命令输出的结果 都输出到 xxx.sql 中</p><p>sqlite3 进入后 不能用 <code>&gt;</code> 这种管道符了</p></blockquote><p>第二种方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 test1.db .dump &gt; back.sql</span><br><span class="line">sqlite3 test2.db &lt; back.sql</span><br></pre></td></tr></table></figure><p>而且这种方法 只能备份 整个数据库 不能备份单个表</p><blockquote><p>powershell 环境 识别不了 符号 而且会有编码问题</p><p>只能用 linux 和 cmd</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索意识</title>
      <link href="/2023/11/06/%E5%B7%A5%E5%85%B7/%E6%90%9C%E7%B4%A2%E6%84%8F%E8%AF%86/"/>
      <url>/2023/11/06/%E5%B7%A5%E5%85%B7/%E6%90%9C%E7%B4%A2%E6%84%8F%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考视频 <a href="https://www.bilibili.com/video/BV1yw411F7J1/?spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1yw411F7J1/?spm_id_from=333.1007.top_right_bar_window_history.content.click</a></p><h2 id="搜索意识是什么？为什么要去搜？">搜索意识是什么？为什么要去搜？</h2><blockquote><p>学习差距 = 信息差（搜索能力决定） × 时间投入</p><p>本质上就是自己想做的事情，前人已经做过了，而且比自己做的好，现在要做的就是搜到它，学习它，避开它，利用它。仅此而已</p></blockquote><h2 id="怎么搜">怎么搜?</h2><p>分为几个部分</p><ul><li>信息资讯</li><li>知识技能</li><li>素材文件</li><li>工具软件</li><li>综合创作平台</li><li>chatGPT</li></ul><h2 id="信息资讯">信息资讯</h2><h3 id="使用chrome的搜索语法">使用chrome的搜索语法</h3><ul><li><p>最基本的关键词 + 空格模糊搜索 ✔️</p></li><li><p>限定完整关键词  ✔️</p></li><li><p><code>intext:</code>限定内容关键词（和上面配合使用） ✔️</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intext:&quot;无人机&quot; &quot;报告&quot; &quot;2023&quot;</span><br></pre></td></tr></table></figure><ul><li><code>filetype</code>限定文件格式 ✔️</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;无人机&quot; &quot;报告&quot; &quot;2023&quot; filetype:pdf</span><br></pre></td></tr></table></figure><ul><li><code>inurl</code> / <code>site</code>限定域名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;无人机&quot; &quot;报告&quot; &quot;2023&quot; inurl:199it.com</span><br></pre></td></tr></table></figure><h3 id="判断信息的源头">判断信息的源头</h3><p>一般是各种备案信息网站 网站要备案，企业要备案，各种各种都可以查。</p><p>以化妆品为例，源头就是国家药监局的化妆品备案信息，这个就是积累了，慢慢积累</p><h3 id="选择">选择</h3><ul><li>Google 主力✔️</li><li>搜狗搜索（搜公众号文章）✔️</li><li>youtube （视频 中文内容也很多）</li><li>领域垂类网站 （stackoverflow github csdn…）</li></ul><h3 id="资源类型">资源类型</h3><ul><li>网页</li><li>文档</li><li>电子书</li><li>视频</li></ul><p>如果想要快速了解一个行业，这个行业的研究报告(一般是pdf)可以帮助快速扫盲</p><p>搜索方法</p><ul><li><code>filetype:pdf</code></li><li><code>inurl:baogao</code></li><li>寻找类似网站 <code>SimilarSites</code> 似乎用不了</li><li>寻找专业网站 chrome搜索 <strong>xx行业/岗位必逛/必用的网站</strong></li></ul><p>搜索之前，<strong>要思考自己要找的东西载体是什么</strong>，也就是资源类型是什么，是网页，是文档，是电子书还是视频？？然后再<strong>思考自己是为了什么搜索</strong>，</p><p>如果只是为了<strong>了解</strong>，网页搜索就够了，但是如果是为了<strong>系统学习</strong>，就不光要搜网页、文档，还要看论文（质量高的知识源头）</p><p>不要未经任何个人思考和搜索后就去张口问别人，这是很不礼貌的，自己要带着思考和预先搜索得到的一些结果请教别人，这样别人也会乐意回答你的问题，这里参考Github项目 <strong>提问的智慧</strong></p><h2 id="素材文件">素材文件</h2><p>搜索各种视频 音频 照片素材</p><h3 id="搜索常见网站">搜索常见网站</h3><p>如何在不知道素材网站的情况下找到这些网站，上面已经提到了一个 <strong>xx必逛/必用的网站</strong></p><p>除此之外还可以英文搜索 <code>best sites for xxx</code> 比如说要搜索免费视频 就可以搜 <code>best sites for free stock videos</code>，这个就可以搜到一些 <strong>pexels</strong> <strong>Videezy</strong> 这样的网站，国外这种总结最好用的网站的文章还挺多的，其实lol官方也老喜欢整一些最强的5名选手，或者说各个位置的最强选手hhh</p><p>所以还是要学好英语，不过目前来说学会一些常见的表达足以，但是也要坚持学习</p><p><code>best sites for English learning</code> （现学现卖）</p><h3 id="网站推荐">网站推荐</h3><p><code>best sites for ppt templates</code> 找到 canva <a href="https://www.canva.com/">https://www.canva.com/</a></p><p><code>best sites for mind map</code> 找到 绘制脑图软件miro <a href="https://miro.com/app/dashboard/">https://miro.com/app/dashboard/</a></p><p>抠图 <a href="https://www.remove.bg/upload">https://www.remove.bg/upload</a></p><p>这种神奇的网站有很多，搜索的方法就是 <code>xxx需求 + online</code> 比如想给十年后的自己写封信</p><p>那么就搜索 <code>future letter online </code> 就能搜到实现类似功能的在线网站 <a href="https://www.futureme.org/">https://www.futureme.org/</a></p><p>或者想知道一些生产力工具  <code>2023 best apps productivity</code></p><p>或是chrome 插件 <code>best chrome extensions productivity</code></p><p>或是软件插件 <code>2023 best PowerPoint plugin productivity</code> 一般浏览器插件叫 extensions 软件插件叫 plugin</p><p>写完这些就能发现，想要迅速找到答案，必须要求</p><ol><li>关键词正确或意思相近  templates extensions plugin programing</li><li>表达清晰明了 <code>best sites for xxx productivity</code></li></ol><p>这两点套用到中文也是同理</p><p>到此为止，基本上就三点</p><ol><li>chrome / bilibili / youtube 搜索</li><li>微信搜一搜</li><li>练习中英文文字表达方式</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用vercel上线项目</title>
      <link href="/2023/11/06/%E5%B7%A5%E5%85%B7/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vercel%E4%B8%8A%E7%BA%BF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/11/06/%E5%B7%A5%E5%85%B7/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vercel%E4%B8%8A%E7%BA%BF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前端部署">前端部署</h2><p>首先是前端项目，配置请求参数，并判断多环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myAxios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: isDev ? <span class="string">&#x27;http://localhost:8080/api/&#x27;</span> : <span class="string">&#x27;待会部署到服务器的后端二级域名地址&#x27;</span>,</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>, <span class="comment">// 携带cookie</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>build项目，终端进入到dist目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel --prod</span><br></pre></td></tr></table></figure><p>如果没有 安装vercel 会提示安装 文档在这里 <a href="https://vercel.com/docs/getting-started-with-vercel">https://vercel.com/docs/getting-started-with-vercel</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add vercel  # 全局安装 vercel</span><br></pre></td></tr></table></figure><p>再运行上面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel --prod</span><br></pre></td></tr></table></figure><p>这之后会提示登录，选择GitHub登录，部署的账号，是否是更新已部署的项目（之前已经部署过了，所以选择y，第一次选择N）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vercel --prod</span><br><span class="line">? Set up and deploy “C:\dist”? [Y/n] y</span><br><span class="line">? Which scope <span class="keyword">do</span> you want to deploy to? mhyc</span><br><span class="line">? Link to existing project? [y/N] y</span><br><span class="line">? What’s the name of your existing project? myfriend-frontend</span><br></pre></td></tr></table></figure><p>到这里就前端就部署成功了，vercel也可以选择自定义域名，在domain那里，一般添加两条解析记录就可以</p><p>vecel也会提示如何添加这两条记录（会自动检测你是否配置成功的，不行就刷新刷新）</p><h2 id="后端部署">后端部署</h2><blockquote><p>后端部署 也可以使用 微信云托管（需要写Dockerfile） 这里在服务器部署</p></blockquote><blockquote><p>因为前端项目是部署在 vercel上的 发起的请求也是 https的，而后端如果还是像之前不支持https</p><p>就会出现 <code>The page at https://* was loaded over HTTPS, but requested an insecure XMLHttpReque</code> 这样的错误，所以我们需要在服务器提供商那里（这里以腾讯云为例）给后端域名申请ssl证书，支持https</p></blockquote><p>这个直接在ssl 控制台就可以申请，通过的很快</p><p>最后会得到两个文件 <code>keystorePass.txt</code> <code>xxx.jks</code>  jks文件放在 resources目录下</p><p>然后在 <code>application.yml</code>中进行下面的配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line">      <span class="attr">cookie:</span></span><br><span class="line">        <span class="attr">domain:</span> <span class="string">后端线上地址</span></span><br><span class="line">        <span class="comment"># http-only: true  使用https 就去掉这条 转而使用下面两条配置</span></span><br><span class="line">        <span class="attr">same-site:</span> <span class="string">none</span></span><br><span class="line">        <span class="attr">secure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ssl:</span></span><br><span class="line">    <span class="attr">key-store:</span> <span class="string">classpath:证书文件</span> <span class="string">放在resources下</span></span><br><span class="line">    <span class="attr">key-store-password:</span> <span class="string">ssl</span> <span class="string">密码</span> <span class="string">一般在文件中</span></span><br><span class="line">    <span class="attr">key-store-type:</span> <span class="string">JKS</span></span><br><span class="line">    <span class="attr">key-password:</span> <span class="string">ssl</span> <span class="string">密码</span> <span class="string">一般在文件中</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 可加可不加 默认是true</span></span><br></pre></td></tr></table></figure><p>配置好之后，就通过maven打包好项目，将jar包上传到服务器，并后台运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar projectNmae-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &amp; </span><br><span class="line"></span><br><span class="line">netstat -ntlp <span class="comment"># 查看是否启动</span></span><br></pre></td></tr></table></figure><p>有个细节，不知道是不是只有我有这个问题，比如这个项目运行在8081端口，所以需要在服务器控制台开放8081端口</p><p>但是除了这个之外，也要通过<code>linux</code>命令开启 防火墙的 8081端口，不然还是访问不了</p><p>还有就是这种具体的命令，问chatgpt 真的太方便了，之前一直没有尝试过，用了才觉得香</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=8081/tcp --permanent <span class="comment"># 开放8081</span></span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --reload <span class="comment"># 刷新防火墙</span></span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --list-ports <span class="comment"># 查看当前开放的端口</span></span><br></pre></td></tr></table></figure><p>打开浏览器，测试后端接口是否正常运行。</p><p>最后我得说，lng打的真的烂，gala也是真的惨…</p>]]></content>
      
      
      
        <tags>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo美化（一）</title>
      <link href="/2023/10/27/%E7%BE%8E%E5%8C%96/hexo%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/10/27/%E7%BE%8E%E5%8C%96/hexo%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="评论">评论</h2><p>注册DISQUS账号，创建一个site</p><p><img src="https://raw.githubusercontent.com/mhyccc/source/main/img/image-20231027173639149.png" alt=""></p><p>修改hexo 主题配置文件</p><p><img src="https://raw.githubusercontent.com/mhyccc/source/main/img/image-20231027173822152.png" alt=""></p><h2 id="代码块配色">代码块配色</h2><p>安装插件<code>hexo-prism-plugin</code><a href="https://github.com/ele828/hexo-prism-plugin">GitHub地址</a></p><p>可能是由于没怎么更新的原因 有一个渲染的坑，从 Issues中也能找到  <a href="https://github.com/ele828/hexo-prism-plugin/issues/61">地址</a></p><p>源码中的 <code>index.js</code>添加下面代码即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = &#123;</span><br><span class="line">  <span class="string">&#x27;&amp;#39;&#x27;</span>: <span class="string">&#x27;\&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&amp;amp;&#x27;</span>: <span class="string">&#x27;&amp;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&amp;gt;&#x27;</span>: <span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&amp;lt;&#x27;</span>: <span class="string">&#x27;&lt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&amp;quot;&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&amp;#123;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&amp;#125;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后还需要</p><ol><li>hexo配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件配置</span></span><br><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">&#x27;preprocess&#x27;</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br></pre></td></tr></table></figure><ol start="2"><li>主题配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="literal">false</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网站美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis key value乱码</title>
      <link href="/2023/10/27/Java/redis/redis%20key%20value%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/27/Java/redis/redis%20key%20value%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>springboot 集成redis 往redis存数据时 如果不进行配置</p><p>key value都会出现乱码的情况, 这是因为 redis默认的序列化器<code>RedisSerializer</code> 出了问题</p><p>配置一下就好了</p><p>先说下 基本配置</p><p>集群配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span> <span class="comment">#连接池最大连接数（负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">3000</span> <span class="comment">#连接池最大阻塞等待时间（负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">200</span> <span class="comment">#连接池最大空闭连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">50</span> <span class="comment">#连接汉最小空闲连接数</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">600</span> <span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.132</span><span class="string">:6380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.132</span><span class="string">:6381</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.132</span><span class="string">:6382</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.132</span><span class="string">:6383</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.132</span><span class="string">:6384</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.132</span><span class="string">:6385</span></span><br></pre></td></tr></table></figure><p>单机配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># ip地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>  <span class="comment">#可不配，因为底层默认值为6379</span></span><br></pre></td></tr></table></figure><p>创建 <code>redis</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">       RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// value 序列化器配置</span></span><br><span class="line">       redisTemplate.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">       <span class="comment">// key 序列化器配置</span></span><br><span class="line">       redisTemplate.setKeySerializer(RedisSerializer.string()); <span class="comment">// !!!!!</span></span><br><span class="line">       <span class="comment">// 需要指定 工厂</span></span><br><span class="line">       redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">       <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>⭐ 使用时key泛型必须和配置类中保持一致 <code>RedisTemplate&lt;String, Object&gt;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看哪个进程在占用8080端口</title>
      <link href="/2023/10/24/linux/%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A88080%E7%AB%AF%E5%8F%A3/"/>
      <url>/2023/10/24/linux/%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A88080%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>启动<code>springboot</code>项目的时候 出现以下错误</p><blockquote><p>Web server failed to start. Port 8080 was already in use.</p></blockquote><h2 id="解决方法">解决方法</h2><h4 id="linux">linux</h4><ol><li>查找正在使用端口 8080 的进程 ID</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp | grep 8080</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">ps -aef | grep tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>使用上面结果中的进程 ID 杀死进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 process_id</span><br></pre></td></tr></table></figure><h4 id="windows">windows</h4><p>以管理员身份打开终端</p><ol><li>查找进程ID(<code>process_id</code>)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br></pre></td></tr></table></figure><ol start="2"><li>根据进程ID终止进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /pid process_id</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231012125253776.png" alt=""></p><p><a href="https://stackoverflow.com/questions/34253779/tomcat-server-error-port-8080-already-in-use">参考文章</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios 种不上 cookie 的问题</title>
      <link href="/2023/10/24/%E5%89%8D%E7%AB%AF/axios/axios-cookie/"/>
      <url>/2023/10/24/%E5%89%8D%E7%AB%AF/axios/axios-cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="axios-设置了-withCredentials-true-但还是不能带上-cookie-的问题">axios 设置了 withCredentials = true 但还是不能带上 cookie 的问题</h2><p>如题</p><p>前端配置了 cookie</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023130024467.png" alt=""></p><p>后端也配了 跨域</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023130330925.png" alt=""></p><p>但是报错</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023130352139.png" alt=""></p><p>大概意思是说如果前端配置了 cookie, 后端<code>Access-Control-Allow-Origin</code>这个属性值不能是 <code>*</code> 所以指定一下地址</p><p>但是指定之后 又又报错了</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023130603212.png" alt=""></p><p>大致意思是<code>Access-Control-Allow-Credentials</code>为空  需要在后端指定为<code>true</code>注意是 <code>string</code>类型 不是 <code>boolean</code>类型</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023130759196.png" alt=""></p><p>这之后就可以了, 但是发请求时还是没有携带上<code>cookie</code> 在响应头发现警告</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023130912928.png" alt=""></p><p>搜索时发现掘金有下面解决方案</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023131127910.png" alt=""></p><p>CSDN也有(最后这样配置了)</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023131336486.png" alt=""></p><p>成功携带上cookie了</p><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231023131610651.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合-todolist</title>
      <link href="/2022/10/09/Java/Java%E6%A1%86%E6%9E%B6/ssm%E6%95%B4%E5%90%88-todolist%E6%A1%88%E4%BE%8B/"/>
      <url>/2022/10/09/Java/Java%E6%A1%86%E6%9E%B6/ssm%E6%95%B4%E5%90%88-todolist%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="ssm整合步骤-todolist案例">ssm整合步骤-todolist案例</h2><h3 id="依赖">依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   需要依赖清单分析:</span></span><br><span class="line"><span class="comment">      spring</span></span><br><span class="line"><span class="comment">        ioc/di</span></span><br><span class="line"><span class="comment">          spring-context / 6.0.6</span></span><br><span class="line"><span class="comment">          jakarta.annotation-api / 2.1.1  jsr250  @Resource</span></span><br><span class="line"><span class="comment">        aop</span></span><br><span class="line"><span class="comment">          spring-aspects / 6.0.6</span></span><br><span class="line"><span class="comment">        tx</span></span><br><span class="line"><span class="comment">          spring-tx  / 6.0.6</span></span><br><span class="line"><span class="comment">          spring-jdbc / 6.0.6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      springmvc</span></span><br><span class="line"><span class="comment">         spring-webmvc 6.0.6</span></span><br><span class="line"><span class="comment">         jakarta.jakartaee-web-api 9.1.0</span></span><br><span class="line"><span class="comment">         jackson-databind 2.15.0        JSON处理</span></span><br><span class="line"><span class="comment">         hibernate-validator   校验 @Validated</span></span><br><span class="line"><span class="comment">         hibernate-validator-annotation-processor 8.0.0.Final</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      mybatis</span></span><br><span class="line"><span class="comment">         mybatis  / 3.5.11</span></span><br><span class="line"><span class="comment">         mysql    / 8.0.25</span></span><br><span class="line"><span class="comment">         pagehelper / 5.1.11  分页</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      整合需要</span></span><br><span class="line"><span class="comment">         加载spring容器 spring-web / 6.0.6</span></span><br><span class="line"><span class="comment">         整合mybatis   mybatis-spring x x  SqlSessionFactoryBean</span></span><br><span class="line"><span class="comment">         数据库连接池    druid / x</span></span><br><span class="line"><span class="comment">         lombok        lombok / 1.18.26</span></span><br><span class="line"><span class="comment">         logback       logback/ 1.2.3</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jakarta.annotation-api.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">jakarta.annotation-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jakarta.jakartaee-web-api.version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">jakarta.jakartaee-web-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jackson-databind.version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">jackson-databind.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate-validator.version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">hibernate-validator.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jakarta.servlet.jsp.jstl-api.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">jakarta.servlet.jsp.jstl-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring pom.xml依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.annotation-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.jakartaee-web-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JSON处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson-databind.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 校验 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合第三方特殊依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三方连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><h3 id="配置类">配置类</h3><blockquote><p>MvcConfig+ServiceConfig+DataSourceConfig+MapperConfig</p></blockquote><h4 id="MvcConfig">MvcConfig</h4><ol><li>表明配置类 <code>@Configuration</code></li><li>Controller加入IOC  <code>@ComponentScan</code></li><li><code>implements</code> WebMvcConfigurer</li><li><code>HandlerMapping</code>(地址映射)  <code>HandlerAdapter</code>(简化参数接收响应) 加入IOC  且添加JSON转化器 <code>@EnableWebMvc</code></li></ol><h4 id="ServiceConfig">ServiceConfig</h4><ol><li><code>@Configuration</code></li><li>Service加入IOC  <code>@ComponentScan</code></li><li>开启aop <code>EnableAspectJAutoProxy</code></li><li>开启事务 <code>EnableTransactionManagement</code></li><li>实现事务管理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataSourceConfig">DataSourceConfig</h4><ol><li>@Configuration</li><li>创建 jdbc.properties 并引入 @PropertySource</li><li>DataSource 加入IOC</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.user&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUsername(user);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MapperConfig">MapperConfig</h4><blockquote><p>完全使用配置类</p></blockquote><ol><li>@Configuration</li><li>SqlSessionFactoryBean加入IOC</li><li>配置其他mybatis设置<ol><li>驼峰映射</li><li>多表映射</li><li>别名设置</li><li>分页插件设置</li></ol></li><li>Mapper 加入到IOC</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperConfigAllJava</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        org.apache.ibatis.session.<span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.apache.ibatis.session.Configuration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;!-- 开启驼峰映射 --&gt;</span></span><br><span class="line"><span class="comment">            &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;!-- 多表映射  FULL 会自动映射任何复杂的结果集（无论是否嵌套） --&gt;</span></span><br><span class="line"><span class="comment">            &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;FULL&quot;/&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="literal">true</span>);</span><br><span class="line">        configuration.setAutoMappingBehavior(AutoMappingBehavior.FULL);</span><br><span class="line"></span><br><span class="line">        sqlSessionFactoryBean.setConfiguration(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;package name=&quot;com.xiaodong.pojo&quot;/&gt;</span></span><br><span class="line"><span class="comment">            别名设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.xiaodong.pojo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分页插件设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">PageInterceptor</span> <span class="variable">pageInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInterceptor</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;helperDialect&quot;</span>,<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line">        pageInterceptor.setProperties(properties);</span><br><span class="line">        sqlSessionFactoryBean.addPlugins(pageInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapper代理对象加入到ioc</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">configurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        configurer.setBasePackage(<span class="string">&quot;com.xiaodong.mapper&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mvc启动类">Mvc启动类</h4><ol><li>继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code></li><li>实现这三个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IocInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">// rootIOC  == 持久层 + 业务层</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;DataSourceConfig.class, MapperConfigAllJava.class, ServiceConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mvcIOC == web层</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;MvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 响应路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建表">建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database `ssm<span class="operator">-</span>integration`;</span><br><span class="line"></span><br><span class="line">use `ssm<span class="operator">-</span>integration`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> schedule</span><br><span class="line">(</span><br><span class="line">    id        <span class="type">INT</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    title     <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    completed <span class="type">BOOLEAN</span>      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> schedule (title, completed)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;学习java&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Python&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习C++&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习JavaScript&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习HTML5&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习CSS3&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Vue.js&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习React&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Angular&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Node.js&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Express&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Koa&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习MongoDB&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习MySQL&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Redis&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Git&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Docker&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Kubernetes&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">       (<span class="string">&#x27;学习AWS&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">       (<span class="string">&#x27;学习Azure&#x27;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="创建实体类">创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Schedule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Boolean completed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaodong.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentPage;   <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;      <span class="comment">// 每页显示的数据量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total;    <span class="comment">// 总数据条数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;      <span class="comment">// 当前页的数据集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建返回结果类">创建返回结果类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">200</span>; <span class="comment">//200成功状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//返回状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;  <span class="comment">//返回具体数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R  <span class="title function_">fail</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">500</span>; <span class="comment">//错误码</span></span><br><span class="line">        r.flag = <span class="literal">false</span>; <span class="comment">//错误状态</span></span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三层架构">三层架构</h3><blockquote><p>写代码前 创建好类 接口 实现类 有提示舒服一些</p></blockquote><h4 id="Controller层">Controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">// 解决CORS跨域问题</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;schedule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleService scheduleService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询 /schedule</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPage 当前页数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果类R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;pageSize&#125;/&#123;currentPage&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">page</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize,</span></span><br><span class="line"><span class="params">                  <span class="meta">@PathVariable</span> <span class="type">int</span> currentPage)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> scheduleService.page(pageSize, currentPage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除计划 /schedule/&#123;id&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 计划id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果类R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleService.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加计划 /schedule</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedule 计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果类R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> Schedule schedule, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.fail(<span class="string">&quot;参数格式错误!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scheduleService.save(schedule);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新计划 /schedule</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedule 计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果类R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> Schedule schedule, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.fail(<span class="string">&quot;参数格式错误!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scheduleService.update(schedule);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Service层">Service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ScheduleService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleMapper scheduleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">page</span><span class="params">(<span class="type">int</span> pageSize, <span class="type">int</span> currentPage)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启分页</span></span><br><span class="line">        PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        List&lt;Schedule&gt; scheduleList = scheduleMapper.queryList();</span><br><span class="line">        <span class="comment">// 分页数据装配</span></span><br><span class="line">        PageInfo&lt;Schedule&gt; info = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(scheduleList);</span><br><span class="line">        <span class="comment">// 装配pageBean</span></span><br><span class="line">        PageBean&lt;Schedule&gt; pageBean = <span class="keyword">new</span> <span class="title class_">PageBean</span>&lt;&gt;(currentPage, pageSize, info.getTotal(), info.getList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> R.ok(pageBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">remove</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> scheduleMapper.deleteSchedule(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.fail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(Schedule schedule)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> scheduleMapper.insert(schedule);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.fail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(Schedule schedule)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (schedule.getId() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> scheduleMapper.update(schedule);</span><br><span class="line">            <span class="keyword">if</span> (rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> R.ok(schedule);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> R.fail(schedule);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.fail(<span class="string">&quot;id为null !!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Mapper层">Mapper层</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace == mapper接口类的全限定名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xiaodong.mapper.ScheduleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;schedule&quot;</span>&gt;</span></span><br><span class="line">        select * from schedule</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteSchedule&quot;</span>&gt;</span></span><br><span class="line">        delete from schedule where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">        insert into schedule(title, completed) values(#&#123;title&#125;, #&#123;completed&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update schedule set title = #&#123;title&#125;, completed = #&#123;completed&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试请求">测试请求</h3><blockquote><p>可以选择在IDEA测试  也可以用第三方工具(apifox/postman)</p></blockquote><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231009125141628.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux终端 ifconfig不显示子网ip</title>
      <link href="/2022/09/05/linux/linux%20ifconfig%20%E4%B8%8D%E6%98%BE%E7%A4%BAip%E5%9C%B0%E5%9D%80/"/>
      <url>/2022/09/05/linux/linux%20ifconfig%20%E4%B8%8D%E6%98%BE%E7%A4%BAip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012255097/article/details/83834702">参考文章</a></p><h4 id="打开-ifcfg-ens33-配置文件">打开 ifcfg-ens33 配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-ens33</span></span><br></pre></td></tr></table></figure><h4 id="修改-ONBOOT-yes">修改 ONBOOT=yes</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">Ethernet</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">none</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">no</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">dhcp</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">no</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">no</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">stable-privacy</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">ens33</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">3f7f48da-0954-4757-9e63-171f8cab8177</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">ens33</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">yes</span></span><br></pre></td></tr></table></figure><h4 id="重启网络服务">重启网络服务</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network restart</span><br></pre></td></tr></table></figure><blockquote><p>sudo 表示以最高权限执行命令</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL Windows中的Linux</title>
      <link href="/2022/08/05/linux/%E9%80%82%E7%94%A8%E4%BA%8E%20Linux%20%E7%9A%84%20Windows%20%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/08/05/linux/%E9%80%82%E7%94%A8%E4%BA%8E%20Linux%20%E7%9A%84%20Windows%20%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么">是什么</h2><p>适用于 <strong>Linux</strong> 的 <strong>Windows 子系统</strong>可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。</p><h2 id="WSL2-是什么">WSL2 是什么</h2><p>WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持<strong>适用于 Linux 的 Windows 子系统</strong>在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是<strong>提高文件系统性能</strong>。</p><p>也就是说 <strong>WSL2</strong> == <strong>适用于 Linux 的 Windows 子系统</strong></p><h2 id="资源">资源</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/">微软 WSL 官方文档</a></p><h2 id="安装-wsl">安装 wsl</h2><h3 id="安装条件">安装条件</h3><p>必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11</p><h3 id="安装命令">安装命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure><p>安装完成后重启电脑</p><p>重启之后运行安装好的<strong>Ubuntu</strong>，会提示设置<strong>用户名</strong>和<strong>密码</strong></p><h3 id="wsl-的一些命令">wsl 的一些命令</h3><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands">wsl 命令</a></p><h3 id="遇到的一些问题">遇到的一些问题</h3><p>wsl --install 安装完成重启电脑 打开 ubuntu 注册错误</p><p>最后是把 wsl 版本设置成 1 然后再打开 ubuntu 发现成功了 最后又重新 wsl --update 了一下</p><p>而且有可能是与其他虚拟软件（virtualbox VMware）兼容冲突了 建议卸载</p><p>具体原因未知</p><h2 id="安装-docker">安装 docker</h2><h3 id="安装条件-2">安装条件</h3><ul><li>确保计算机正在运行 Windows 10，<a href="ms-settings:windowsupdate">更新到版本 2004</a> 版本 <strong>18362</strong> 或更高版本。</li><li>安装了 wsl，而且有 Linux 发行版（Ubuntu/Debian）</li></ul><h3 id="安装">安装</h3><p><a href="https://docs.docker.com/desktop/windows/wsl/#download">docker 下载</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers">在 Windows 下的 Linux 下载 docker 以及配置的微软官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令</title>
      <link href="/2021/09/24/%E5%B7%A5%E5%85%B7/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/09/24/%E5%B7%A5%E5%85%B7/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Git">什么是Git</h3><ul><li><p>解决代码的丢失和备份问题</p></li><li><p>Git 是一个版本控制系统，可以让你跟踪你对文件所做的修改</p><ul><li>例如学习一个项目，跟着敲代码，如果全程提交的话，也方便自己复盘</li></ul></li><li><p>与GitHub / Gitee 配合使用</p></li></ul><h3 id="安装Git">安装Git</h3><p><a href="https://git-scm.com/">git安装</a></p><h3 id="初始配置">初始配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 1. 查看全部配置</span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line">// 2. 配置开发者用户名和邮箱</span><br><span class="line">git config --global user.name [username]</span><br><span class="line">git config --global user.email [email]</span><br></pre></td></tr></table></figure><h3 id="如何将本地和GitHub相关联">如何将本地和GitHub相关联</h3><ol><li>根据GitHub官网提示操作即可</li></ol><p><img src="https://raw.githubusercontent.com/foreverForth/source/main/img/image-20231012214838397.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class="line">git init  // 项目初始化</span><br><span class="line">git add README.md </span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/foreverForth/test.git // 与远程仓库相关联</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者这样</span><br><span class="line">git remote add origin https://github.com/foreverForth/test.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>如果之后再次提交代码</p><blockquote><p>首先git status 之后git 发现你修改了项目代码 提示你 git add / git commit</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is up to date with &#x27;origin/main&#x27;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>提交</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;第二次提交&quot;</span><br></pre></td></tr></table></figure><blockquote><p>再次 git status 发现没有需要 commit的了 提示我们 use “git push” to publish your local commits</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is ahead of &#x27;origin/main&#x27; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><blockquote><p>还记得第一次 提交代码是 git push -u origin main  如果是默认分支 git push即可 或者 git push origin + 指定分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
